ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tmag5170_ex.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.getSYSTEM_CONFIG_stored,"ax",%progbits
  20              		.align	1
  21              		.global	getSYSTEM_CONFIG_stored
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	getSYSTEM_CONFIG_stored:
  27              	.LFB2:
  28              		.file 1 "Core/Src/tmag5170_ex.c"
   1:Core/Src/tmag5170_ex.c **** /**
   2:Core/Src/tmag5170_ex.c ****  * \copyright Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com/
   3:Core/Src/tmag5170_ex.c ****  *
   4:Core/Src/tmag5170_ex.c ****  *  Redistribution and use in source and binary forms, with or without
   5:Core/Src/tmag5170_ex.c ****  *  modification, are permitted provided that the following conditions
   6:Core/Src/tmag5170_ex.c ****  *  are met:
   7:Core/Src/tmag5170_ex.c ****  *
   8:Core/Src/tmag5170_ex.c ****  *    Redistributions of source code must retain the above copyright
   9:Core/Src/tmag5170_ex.c ****  *    notice, this list of conditions and the following disclaimer.
  10:Core/Src/tmag5170_ex.c ****  *
  11:Core/Src/tmag5170_ex.c ****  *    Redistributions in binary form must reproduce the above copyright
  12:Core/Src/tmag5170_ex.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:Core/Src/tmag5170_ex.c ****  *    documentation and/or other materials provided with the
  14:Core/Src/tmag5170_ex.c ****  *    distribution.
  15:Core/Src/tmag5170_ex.c ****  *
  16:Core/Src/tmag5170_ex.c ****  *    Neither the name of Texas Instruments Incorporated nor the names of
  17:Core/Src/tmag5170_ex.c ****  *    its contributors may be used to endorse or promote products derived
  18:Core/Src/tmag5170_ex.c ****  *    from this software without specific prior written permission.
  19:Core/Src/tmag5170_ex.c ****  *
  20:Core/Src/tmag5170_ex.c ****  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  21:Core/Src/tmag5170_ex.c ****  *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  22:Core/Src/tmag5170_ex.c ****  *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  23:Core/Src/tmag5170_ex.c ****  *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  24:Core/Src/tmag5170_ex.c ****  *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  25:Core/Src/tmag5170_ex.c ****  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  26:Core/Src/tmag5170_ex.c ****  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  27:Core/Src/tmag5170_ex.c ****  *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  28:Core/Src/tmag5170_ex.c ****  *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  29:Core/Src/tmag5170_ex.c ****  *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  30:Core/Src/tmag5170_ex.c ****  *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 2


  31:Core/Src/tmag5170_ex.c ****  *
  32:Core/Src/tmag5170_ex.c ****  */
  33:Core/Src/tmag5170_ex.c **** 
  34:Core/Src/tmag5170_ex.c **** #include "tmag5170.h"
  35:Core/Src/tmag5170_ex.c **** 
  36:Core/Src/tmag5170_ex.c **** /*
  37:Core/Src/tmag5170_ex.c ****  * These code examples were written with the objective of minimizing the amount
  38:Core/Src/tmag5170_ex.c ****  * of static variables tracking the states of the sensor they are used with. Because
  39:Core/Src/tmag5170_ex.c ****  * of this, functions in this code will send additional SPI read commands to get
  40:Core/Src/tmag5170_ex.c ****  * mostly unchanging data (such as the device version or set ranges) needed for
  41:Core/Src/tmag5170_ex.c ****  * other operations.
  42:Core/Src/tmag5170_ex.c ****  *
  43:Core/Src/tmag5170_ex.c ****  * The SYSTEM_CONFIG register must be stored and kept current with the sensor
  44:Core/Src/tmag5170_ex.c ****  * to keep track of the DATA_TYPE field so that Special Read Mode operation can
  45:Core/Src/tmag5170_ex.c ****  * be implemented successfully.
  46:Core/Src/tmag5170_ex.c ****  */
  47:Core/Src/tmag5170_ex.c **** 
  48:Core/Src/tmag5170_ex.c **** //****************************************************************************
  49:Core/Src/tmag5170_ex.c **** //
  50:Core/Src/tmag5170_ex.c **** // Internal variables
  51:Core/Src/tmag5170_ex.c **** //
  52:Core/Src/tmag5170_ex.c **** //****************************************************************************
  53:Core/Src/tmag5170_ex.c **** 
  54:Core/Src/tmag5170_ex.c **** // These two arrays are used with the CORDIC function to convert the integer output
  55:Core/Src/tmag5170_ex.c **** // into floating point values
  56:Core/Src/tmag5170_ex.c **** const uint32_t magArray[16] = {1518500250,1358187913,1317635818,1307460871,
  57:Core/Src/tmag5170_ex.c ****                                1304914694,1304277995,1304118810,1304079014,
  58:Core/Src/tmag5170_ex.c ****                                1304069065,1304066577,1304065955,1304065800,
  59:Core/Src/tmag5170_ex.c ****                                1304065761,1304065751,1304065749,1304065748};
  60:Core/Src/tmag5170_ex.c **** const uint32_t atanArray32[16] = {536870912,316933406,167458907,85004756,42667331,
  61:Core/Src/tmag5170_ex.c ****                                   21354465,10679838,5340245,2670163,1335087,667544,
  62:Core/Src/tmag5170_ex.c ****                                   333772,166886,83443,41722,20861};
  63:Core/Src/tmag5170_ex.c **** 
  64:Core/Src/tmag5170_ex.c **** //****************************************************************************
  65:Core/Src/tmag5170_ex.c **** //! This variable tracks the state of the SYSTEM_CONFIG register (0x02)
  66:Core/Src/tmag5170_ex.c **** //! Since any special read state cannot read out registers when called,
  67:Core/Src/tmag5170_ex.c **** //! keeping track of the SYSTEM_CONFIG register is needed in order to
  68:Core/Src/tmag5170_ex.c **** //! switch to and from normal read mode without altering other bits besides
  69:Core/Src/tmag5170_ex.c **** //! DATA_TYPE's (0x028-6).
  70:Core/Src/tmag5170_ex.c **** //!
  71:Core/Src/tmag5170_ex.c **** //! The macro 'DATA_TYPE_RESULTS' defined in the header can be used to access
  72:Core/Src/tmag5170_ex.c **** //! the DATA_TYPE bits contained in the stored register.
  73:Core/Src/tmag5170_ex.c **** //!
  74:Core/Src/tmag5170_ex.c **** //! This variable also must be initialized using a function like the one
  75:Core/Src/tmag5170_ex.c **** //! below before the rest of any code implementation using the given example
  76:Core/Src/tmag5170_ex.c **** //! functions can work.
  77:Core/Src/tmag5170_ex.c **** //****************************************************************************
  78:Core/Src/tmag5170_ex.c **** static uint16_t SYSTEM_CONFIG_stored = 0;
  79:Core/Src/tmag5170_ex.c **** #define DATA_TYPE_RESULTS    ((SYSTEM_CONFIG_stored & ~(SYSTEM_CONFIG_DATA_TYPE_MASK)) >> 6)
  80:Core/Src/tmag5170_ex.c **** 
  81:Core/Src/tmag5170_ex.c **** #ifdef      GLOBAL_CRC_ERROR_VAR_ENABLED
  82:Core/Src/tmag5170_ex.c ****             uint8_t crc_error_occurence = 0;
  83:Core/Src/tmag5170_ex.c **** #endif
  84:Core/Src/tmag5170_ex.c **** 
  85:Core/Src/tmag5170_ex.c **** #ifdef      GLOBAL_INPUT_ERROR_VAR_ENABLED
  86:Core/Src/tmag5170_ex.c ****             uint8_t fcn_input_error_occurence = 0;
  87:Core/Src/tmag5170_ex.c **** #endif
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 3


  88:Core/Src/tmag5170_ex.c **** 
  89:Core/Src/tmag5170_ex.c **** 
  90:Core/Src/tmag5170_ex.c **** 
  91:Core/Src/tmag5170_ex.c **** //****************************************************************************
  92:Core/Src/tmag5170_ex.c **** //! Initialization function
  93:Core/Src/tmag5170_ex.c **** //!
  94:Core/Src/tmag5170_ex.c **** //! This function MUST be ran at the beginning of any implementation using this
  95:Core/Src/tmag5170_ex.c **** //! example code. This is needed because the SYSTEM_CONFIG register is needed to
  96:Core/Src/tmag5170_ex.c **** //! be tracked and updated accordingly to prevent losing track of the DATA_TYPE
  97:Core/Src/tmag5170_ex.c **** //! in use by the device.
  98:Core/Src/tmag5170_ex.c **** //!
  99:Core/Src/tmag5170_ex.c **** //! If CRC is being disabled per the header definition being enabled, then this
 100:Core/Src/tmag5170_ex.c **** //! function also sends the command to disable CRC on the device as well.
 101:Core/Src/tmag5170_ex.c **** //! NOTE: if CRC is being disabled then the RESET_DEVICE_IN_STARTUP should be
 102:Core/Src/tmag5170_ex.c **** //! enabled as well
 103:Core/Src/tmag5170_ex.c **** //****************************************************************************
 104:Core/Src/tmag5170_ex.c **** void TMAG5170startup()
 105:Core/Src/tmag5170_ex.c **** {
 106:Core/Src/tmag5170_ex.c ****     // (OPTIONAL) Provide additional delay time for power supply settling
 107:Core/Src/tmag5170_ex.c ****     delay_ms(50);
 108:Core/Src/tmag5170_ex.c **** 
 109:Core/Src/tmag5170_ex.c **** #ifdef RESET_DEVICE_IN_STARTUP
 110:Core/Src/tmag5170_ex.c ****     // SYSTEM_CONFIG_stored will be set to default in this function
 111:Core/Src/tmag5170_ex.c ****     resetDevice();
 112:Core/Src/tmag5170_ex.c **** #else
 113:Core/Src/tmag5170_ex.c ****     // The default implementation of this initialize function is resetting only
 114:Core/Src/tmag5170_ex.c ****     // the SYSTEM_CONFIG register and leaving the other registers unchanged.
 115:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, SYSTEM_CONFIG_DEFAULT );
 116:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored = SYSTEM_CONFIG_DEFAULT;
 117:Core/Src/tmag5170_ex.c **** #endif
 118:Core/Src/tmag5170_ex.c **** 
 119:Core/Src/tmag5170_ex.c **** #ifdef DISABLE_CRC_IN_STARTUP
 120:Core/Src/tmag5170_ex.c ****     // Sends command to disable CRC verfication and calculation on device-side
 121:Core/Src/tmag5170_ex.c ****     // MUST be called first in implementation for commands from other functions
 122:Core/Src/tmag5170_ex.c ****     // to be accepted when DISABLE_CRC_IN_STARTUP is used.
 123:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = {0x0F,0x00,0x04,0x07};
 124:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = {0};
 125:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx,dataRx);
 126:Core/Src/tmag5170_ex.c **** #endif
 127:Core/Src/tmag5170_ex.c **** }
 128:Core/Src/tmag5170_ex.c **** 
 129:Core/Src/tmag5170_ex.c **** 
 130:Core/Src/tmag5170_ex.c **** 
 131:Core/Src/tmag5170_ex.c **** //****************************************************************************
 132:Core/Src/tmag5170_ex.c **** //! Reset Device to Factory Settings
 133:Core/Src/tmag5170_ex.c **** //!
 134:Core/Src/tmag5170_ex.c **** //! This function uses the DeepSleep functions to reset the device's registers back to the
 135:Core/Src/tmag5170_ex.c **** //! default settings outlined in the datasheet. This function also resets the
 136:Core/Src/tmag5170_ex.c **** //! SYSTEM_CONFIG_stored variable to the default value in the enterDeepSleepMode function.
 137:Core/Src/tmag5170_ex.c **** //****************************************************************************
 138:Core/Src/tmag5170_ex.c **** void resetDevice()
 139:Core/Src/tmag5170_ex.c **** {
 140:Core/Src/tmag5170_ex.c ****     enterDeepSleepMode(); // Deep Sleep Mode resets the device to its default settings
 141:Core/Src/tmag5170_ex.c ****     exitDeepSleepMode();
 142:Core/Src/tmag5170_ex.c **** }
 143:Core/Src/tmag5170_ex.c **** 
 144:Core/Src/tmag5170_ex.c **** //****************************************************************************
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 4


 145:Core/Src/tmag5170_ex.c **** //! Getter Functions for the SYSTEM_CONFIG_stored static variable
 146:Core/Src/tmag5170_ex.c **** //!
 147:Core/Src/tmag5170_ex.c **** //! These two functions return the stored SYSTEM_CONFIG register on the MCU or the
 148:Core/Src/tmag5170_ex.c **** //! DATA_TYPE field within that stored register, respectively.
 149:Core/Src/tmag5170_ex.c **** //****************************************************************************
 150:Core/Src/tmag5170_ex.c **** 
 151:Core/Src/tmag5170_ex.c **** uint16_t getSYSTEM_CONFIG_stored() { return SYSTEM_CONFIG_stored; }
  29              		.loc 1 151 36 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 151 38 view .LVU1
  35              		.loc 1 151 67 is_stmt 0 view .LVU2
  36 0000 014B     		ldr	r3, .L2
  37 0002 1888     		ldrh	r0, [r3]
  38 0004 7047     		bx	lr
  39              	.L3:
  40 0006 00BF     		.align	2
  41              	.L2:
  42 0008 00000000 		.word	.LANCHOR0
  43              		.cfi_endproc
  44              	.LFE2:
  46              		.section	.text.getDATA_TYPE,"ax",%progbits
  47              		.align	1
  48              		.global	getDATA_TYPE
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  53              	getDATA_TYPE:
  54              	.LFB3:
 152:Core/Src/tmag5170_ex.c **** uint16_t getDATA_TYPE() { return DATA_TYPE_RESULTS; }
  55              		.loc 1 152 25 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              		.loc 1 152 27 view .LVU4
  61              		.loc 1 152 34 is_stmt 0 view .LVU5
  62 0000 024B     		ldr	r3, .L5
  63 0002 1888     		ldrh	r0, [r3]
  64 0004 8011     		asrs	r0, r0, #6
  65              		.loc 1 152 53 view .LVU6
  66 0006 00F47E70 		and	r0, r0, #1016
  67 000a 7047     		bx	lr
  68              	.L6:
  69              		.align	2
  70              	.L5:
  71 000c 00000000 		.word	.LANCHOR0
  72              		.cfi_endproc
  73              	.LFE3:
  75              		.section	.text.atan2CORDIC,"ax",%progbits
  76              		.align	1
  77              		.global	atan2CORDIC
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 5


  82              	atan2CORDIC:
  83              	.LVL0:
  84              	.LFB67:
 153:Core/Src/tmag5170_ex.c **** 
 154:Core/Src/tmag5170_ex.c **** 
 155:Core/Src/tmag5170_ex.c **** 
 156:Core/Src/tmag5170_ex.c **** //****************************************************************************
 157:Core/Src/tmag5170_ex.c **** //****************************************************************************
 158:Core/Src/tmag5170_ex.c **** //
 159:Core/Src/tmag5170_ex.c **** // SPI fucntions
 160:Core/Src/tmag5170_ex.c **** //
 161:Core/Src/tmag5170_ex.c **** //****************************************************************************
 162:Core/Src/tmag5170_ex.c **** //****************************************************************************
 163:Core/Src/tmag5170_ex.c **** 
 164:Core/Src/tmag5170_ex.c **** 
 165:Core/Src/tmag5170_ex.c **** //****************************************************************************
 166:Core/Src/tmag5170_ex.c **** //! Send and Receive Frame
 167:Core/Src/tmag5170_ex.c **** //!
 168:Core/Src/tmag5170_ex.c **** //! Takes in the frame to transmit by SPI and the array to put the received frame in
 169:Core/Src/tmag5170_ex.c **** //!
 170:Core/Src/tmag5170_ex.c **** //! dataTx[4] - unint8_t array of length 4 containing the bytes frame to transmit
 171:Core/Src/tmag5170_ex.c **** //!             ordered with CRC-containing byte last
 172:Core/Src/tmag5170_ex.c **** //! dataRx[4] - unint8_t array of length 4 of zeroes on input, will have the received
 173:Core/Src/tmag5170_ex.c **** //!             frame bytes assigned to it ordered with CRC bits last
 174:Core/Src/tmag5170_ex.c **** //****************************************************************************
 175:Core/Src/tmag5170_ex.c **** void sendAndReceiveFrame(uint8_t dataTx[], uint8_t dataRx[])
 176:Core/Src/tmag5170_ex.c **** {
 177:Core/Src/tmag5170_ex.c **** 
 178:Core/Src/tmag5170_ex.c **** #ifdef DISABLE_CRC_IN_STARTUP
 179:Core/Src/tmag5170_ex.c ****     // When CRC is disabled upon system initialization, the need to calculate
 180:Core/Src/tmag5170_ex.c ****     // the dataTx CRC for the TMAG5170 to accept commands is gone at the risk
 181:Core/Src/tmag5170_ex.c ****     // of transmission errors being passed through.
 182:Core/Src/tmag5170_ex.c **** 
 183:Core/Src/tmag5170_ex.c ****     spiSendReceiveArrays(dataTx, dataRx, TMAG5170_FRAME_NUM_BYTES);
 184:Core/Src/tmag5170_ex.c **** 
 185:Core/Src/tmag5170_ex.c ****     // Check if SYSTEM_CONFIG was written to and update SYSTEM_CONFIG_stored if so
 186:Core/Src/tmag5170_ex.c ****     if ( dataTx[0] == SYSTEM_CONFIG_ADDRESS ) SYSTEM_CONFIG_stored = (dataTx[1] << 8) | dataTx[2];
 187:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 188:Core/Src/tmag5170_ex.c ****                                        // stored variable doesn't have them changed
 189:Core/Src/tmag5170_ex.c **** #else
 190:Core/Src/tmag5170_ex.c ****     // When CRC is enabled (it is by default), the CRC must be calculated and
 191:Core/Src/tmag5170_ex.c ****     // included in dataTx for the TMAG5170 to accept commands.
 192:Core/Src/tmag5170_ex.c **** 
 193:Core/Src/tmag5170_ex.c ****     uint8_t crc = calculateCRC( dataTx );
 194:Core/Src/tmag5170_ex.c ****     dataTx[3] = dataTx[3] | crc;
 195:Core/Src/tmag5170_ex.c **** 
 196:Core/Src/tmag5170_ex.c ****     spiSendReceiveArrays(dataTx, dataRx, TMAG5170_FRAME_NUM_BYTES);
 197:Core/Src/tmag5170_ex.c **** 
 198:Core/Src/tmag5170_ex.c ****     // The TMAG5170 also calculates the CRC for the frame it sends back to its
 199:Core/Src/tmag5170_ex.c ****     // MCU. The TMAG5170 will purposely return a bad CRC if it received a
 200:Core/Src/tmag5170_ex.c ****     // transmitted command with a bad CRC as well. Verifying the CRC of dataRx
 201:Core/Src/tmag5170_ex.c ****     // helps confirm if dataTx was received successfully and if dataRx is valid.
 202:Core/Src/tmag5170_ex.c ****     if (verifyCRC(dataRx) == 0)
 203:Core/Src/tmag5170_ex.c ****     {
 204:Core/Src/tmag5170_ex.c ****         // Without GLOBAL_CRC_ERROR_VAR_ENABLED defined or another error response
 205:Core/Src/tmag5170_ex.c ****         // implemented, this function will not give any indication that the
 206:Core/Src/tmag5170_ex.c ****         // received data has an error
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 6


 207:Core/Src/tmag5170_ex.c **** 
 208:Core/Src/tmag5170_ex.c ****         #ifdef  SEND_RECIEVE_REDUNDANCY_ENABLED
 209:Core/Src/tmag5170_ex.c **** 
 210:Core/Src/tmag5170_ex.c ****         for ( i = 0; i<4; i++ ) { dataRx[i] = 0 };
 211:Core/Src/tmag5170_ex.c ****         spiSendReceiveArrays(dataTx, dataRx, TMAG5170_FRAME_NUM_BYTES);
 212:Core/Src/tmag5170_ex.c ****         if ( verifyCRC(dataRx) )
 213:Core/Src/tmag5170_ex.c ****         {
 214:Core/Src/tmag5170_ex.c ****             // Check if SYSTEM_CONFIG was written to and update SYSTEM_CONFIG_stored if so
 215:Core/Src/tmag5170_ex.c ****             if ( dataTx[0] == SYSTEM_CONFIG_ADDRESS ) SYSTEM_CONFIG_stored = (dataTx[1] << 8) | dat
 216:Core/Src/tmag5170_ex.c ****             SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 217:Core/Src/tmag5170_ex.c ****                                                // stored variable doesn't have them changed
 218:Core/Src/tmag5170_ex.c ****             return;
 219:Core/Src/tmag5170_ex.c ****         }
 220:Core/Src/tmag5170_ex.c **** 
 221:Core/Src/tmag5170_ex.c ****         #endif
 222:Core/Src/tmag5170_ex.c **** 
 223:Core/Src/tmag5170_ex.c ****         #ifdef  GLOBAL_CRC_ERROR_VAR_ENABLED
 224:Core/Src/tmag5170_ex.c ****         crc_error_occurence = 1; // If redundancy is enabled too, the error bit
 225:Core/Src/tmag5170_ex.c ****                                  // only flips if both sent TXs receive bad CRCs
 226:Core/Src/tmag5170_ex.c ****         #endif
 227:Core/Src/tmag5170_ex.c **** 
 228:Core/Src/tmag5170_ex.c ****         return; // If a received data CRC error is detected, SYSTEM_CONFIG_stored
 229:Core/Src/tmag5170_ex.c ****                 // will not be updated under the assumption that whatever command
 230:Core/Src/tmag5170_ex.c ****                 // sent was not accepted.
 231:Core/Src/tmag5170_ex.c ****     }
 232:Core/Src/tmag5170_ex.c **** 
 233:Core/Src/tmag5170_ex.c ****     // Check if SYSTEM_CONFIG was written to and update SYSTEM_CONFIG_stored if so
 234:Core/Src/tmag5170_ex.c ****     if ( dataTx[0] == SYSTEM_CONFIG_ADDRESS ) SYSTEM_CONFIG_stored = (dataTx[1] << 8) | dataTx[2];
 235:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 236:Core/Src/tmag5170_ex.c ****                                        // stored variable doesn't have them changed
 237:Core/Src/tmag5170_ex.c **** #endif
 238:Core/Src/tmag5170_ex.c **** }
 239:Core/Src/tmag5170_ex.c **** 
 240:Core/Src/tmag5170_ex.c **** 
 241:Core/Src/tmag5170_ex.c **** 
 242:Core/Src/tmag5170_ex.c **** //****************************************************************************
 243:Core/Src/tmag5170_ex.c **** //! Write to Register Function (no CMD sent or value returned)
 244:Core/Src/tmag5170_ex.c **** //!
 245:Core/Src/tmag5170_ex.c **** //! Takes in the address of the register to edit and the 16-bit frame to overwrite it with and writ
 246:Core/Src/tmag5170_ex.c **** //! the input frame to the register.
 247:Core/Src/tmag5170_ex.c **** //!
 248:Core/Src/tmag5170_ex.c **** //! This function replaces the whole register with the input data, make sure the values desired to 
 249:Core/Src/tmag5170_ex.c **** //! unchanged are in the input data_to_write!
 250:Core/Src/tmag5170_ex.c **** //!
 251:Core/Src/tmag5170_ex.c **** //! This function will work in Normal and Special Read Mode.
 252:Core/Src/tmag5170_ex.c **** //!
 253:Core/Src/tmag5170_ex.c **** //! address       - uint8_t value from 0x00 to 0x14 containing the register address to write over
 254:Core/Src/tmag5170_ex.c **** //! data_to_write - the 16-bit frame to be written to the register at address.
 255:Core/Src/tmag5170_ex.c **** //****************************************************************************
 256:Core/Src/tmag5170_ex.c **** void writeToRegister(uint8_t address, uint16_t data_to_write)
 257:Core/Src/tmag5170_ex.c **** {
 258:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 259:Core/Src/tmag5170_ex.c ****     assert(address < NUM_REGISTERS);
 260:Core/Src/tmag5170_ex.c **** 
 261:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 262:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = { 0 };
 263:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 7


 264:Core/Src/tmag5170_ex.c **** 
 265:Core/Src/tmag5170_ex.c ****     // MSB is 0 for WRITE command
 266:Core/Src/tmag5170_ex.c ****     dataTx[0] = (address);
 267:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 268:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 269:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x00;
 270:Core/Src/tmag5170_ex.c **** 
 271:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx, dataRx);
 272:Core/Src/tmag5170_ex.c **** }
 273:Core/Src/tmag5170_ex.c **** 
 274:Core/Src/tmag5170_ex.c **** 
 275:Core/Src/tmag5170_ex.c **** 
 276:Core/Src/tmag5170_ex.c **** //****************************************************************************
 277:Core/Src/tmag5170_ex.c **** //! Write to Register Function (CMD0 sent)
 278:Core/Src/tmag5170_ex.c **** //!
 279:Core/Src/tmag5170_ex.c **** //! Takes in the address of the register to edit and the 16-bit frame to overwrite it with and writ
 280:Core/Src/tmag5170_ex.c **** //! the frame to the register.
 281:Core/Src/tmag5170_ex.c **** //! Sends CMD0 function (cmd_bits = 0x01), triggering conversion if device trigger is set to
 282:Core/Src/tmag5170_ex.c **** //! 'start at SPI command' [TRIGGER_MODE (0x02A-9) == 00b]
 283:Core/Src/tmag5170_ex.c **** //!
 284:Core/Src/tmag5170_ex.c **** //! This function replaces the whole register with the input data, make sure the values desired to 
 285:Core/Src/tmag5170_ex.c **** //! unchanged are in the input data_to_write!
 286:Core/Src/tmag5170_ex.c **** //!
 287:Core/Src/tmag5170_ex.c **** //! This function will work in Normal and Special Read Mode.
 288:Core/Src/tmag5170_ex.c **** //!
 289:Core/Src/tmag5170_ex.c **** //! address       - uint8_t value from 0x00 to 0x14 containing the register address to write over
 290:Core/Src/tmag5170_ex.c **** //! data_to_write - the 16-bit frame to be written to the register at address.
 291:Core/Src/tmag5170_ex.c **** //****************************************************************************
 292:Core/Src/tmag5170_ex.c **** void writeToRegisterWithCMD0(uint8_t address, uint16_t data_to_write)
 293:Core/Src/tmag5170_ex.c **** {
 294:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 295:Core/Src/tmag5170_ex.c ****     assert(address < NUM_REGISTERS);
 296:Core/Src/tmag5170_ex.c **** 
 297:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 298:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = { 0 };
 299:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 300:Core/Src/tmag5170_ex.c **** 
 301:Core/Src/tmag5170_ex.c ****     // MSB is 0 for WRITE command
 302:Core/Src/tmag5170_ex.c ****     dataTx[0] = (address);
 303:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 304:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 305:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x10;
 306:Core/Src/tmag5170_ex.c **** 
 307:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx, dataRx);
 308:Core/Src/tmag5170_ex.c **** }
 309:Core/Src/tmag5170_ex.c **** 
 310:Core/Src/tmag5170_ex.c **** 
 311:Core/Src/tmag5170_ex.c **** 
 312:Core/Src/tmag5170_ex.c **** //****************************************************************************
 313:Core/Src/tmag5170_ex.c **** //! Write to Register Function (Send CMD bits and return STAT)
 314:Core/Src/tmag5170_ex.c **** //!
 315:Core/Src/tmag5170_ex.c **** //! Takes in the address of the register to edit and the 16-bit frame to overwrite it with and writ
 316:Core/Src/tmag5170_ex.c **** //! the frame to the register.
 317:Core/Src/tmag5170_ex.c **** //! Sends CMD0 and CMD1 depending on cmd_bits setting and returns the STAT values returned by the d
 318:Core/Src/tmag5170_ex.c **** //! (STAT4 - STAT11 are not returned by the device in Special Read Mode)
 319:Core/Src/tmag5170_ex.c **** //!
 320:Core/Src/tmag5170_ex.c **** //! This function replaces the whole register with the input data, make sure the values desired to 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 8


 321:Core/Src/tmag5170_ex.c **** //! unchanged are in the input data_to_write!
 322:Core/Src/tmag5170_ex.c **** //!
 323:Core/Src/tmag5170_ex.c **** //! This function will work in Normal and Special Read Mode.
 324:Core/Src/tmag5170_ex.c **** //!
 325:Core/Src/tmag5170_ex.c **** //! address       - uint8_t value from 0x00 to 0x14 containing the register address to write over
 326:Core/Src/tmag5170_ex.c **** //! data_to_write - the 16-bit frame to be written to the register at address.
 327:Core/Src/tmag5170_ex.c **** //! cmd_bits      - uint8_t value from 0x00 to 0x03 containing the CMD0 and CMD1 bits that will be 
 328:Core/Src/tmag5170_ex.c **** //!                 in dataTx. LSB is CMD0, next bit is CMD1.  (see header file or datasheet pg. 29
 329:Core/Src/tmag5170_ex.c **** //****************************************************************************
 330:Core/Src/tmag5170_ex.c **** uint16_t writeToRegisterWithSTAT(uint8_t address, uint16_t data_to_write, uint8_t cmd_bits)
 331:Core/Src/tmag5170_ex.c **** {
 332:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 333:Core/Src/tmag5170_ex.c ****     assert(address < NUM_REGISTERS);
 334:Core/Src/tmag5170_ex.c **** 
 335:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 336:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = { 0 };
 337:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 338:Core/Src/tmag5170_ex.c **** 
 339:Core/Src/tmag5170_ex.c ****     // MSB is 0 for WRITE command
 340:Core/Src/tmag5170_ex.c ****     dataTx[0] = (address);
 341:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 342:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 343:Core/Src/tmag5170_ex.c ****     dataTx[3] = (cmd_bits << 4);
 344:Core/Src/tmag5170_ex.c **** 
 345:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx, dataRx);
 346:Core/Src/tmag5170_ex.c **** 
 347:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS == 0x00 )
 348:Core/Src/tmag5170_ex.c ****     {
 349:Core/Src/tmag5170_ex.c ****         return (cmd_bits << 12) | (dataRx[0] << 4) | (dataRx[3] >> 4);
 350:Core/Src/tmag5170_ex.c ****     }
 351:Core/Src/tmag5170_ex.c ****     else
 352:Core/Src/tmag5170_ex.c ****     {
 353:Core/Src/tmag5170_ex.c ****         return (cmd_bits << 12) | (dataRx[3] >> 4);
 354:Core/Src/tmag5170_ex.c ****     }
 355:Core/Src/tmag5170_ex.c **** 
 356:Core/Src/tmag5170_ex.c ****     // returned bits: | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 
 357:Core/Src/tmag5170_ex.c ****     //                |  0 |  0 | cmd_bits|  --------           STAT11 - STAT0           --------  
 358:Core/Src/tmag5170_ex.c ****     // if DATA_TYPE != 000b (Special Read Mode) then only STAT0 to STAT3 will be returned
 359:Core/Src/tmag5170_ex.c ****     // (all other STAT bits will be returned as zero)
 360:Core/Src/tmag5170_ex.c **** }
 361:Core/Src/tmag5170_ex.c **** 
 362:Core/Src/tmag5170_ex.c **** 
 363:Core/Src/tmag5170_ex.c **** 
 364:Core/Src/tmag5170_ex.c **** //****************************************************************************
 365:Core/Src/tmag5170_ex.c **** //! Full Read Function for Normal Data Mode (DATA_TYPE = 000b)
 366:Core/Src/tmag5170_ex.c **** //!
 367:Core/Src/tmag5170_ex.c **** //! Takes in an output array of length 2, address to read from, and CMD bits to send along,
 368:Core/Src/tmag5170_ex.c **** //! then creates the dataTx array and calls the sendAndReturnFrame function, interpreting
 369:Core/Src/tmag5170_ex.c **** //! dataRx and putting the read register in output[0] and status bits in output[1]
 370:Core/Src/tmag5170_ex.c **** //!
 371:Core/Src/tmag5170_ex.c **** //! output[2] - empty uint16_t array of length 2, output[0] will be assigned the returned register
 372:Core/Src/tmag5170_ex.c **** //!             at the given address, output[1] will be assigned the returned status bits.
 373:Core/Src/tmag5170_ex.c **** //! address   - uint8_t value from 0x00 to 0x14 containing the register address to read from
 374:Core/Src/tmag5170_ex.c **** //! cmd_bits  - uint8_t value from 0x00 to 0x03 containing the CMD0 and CMD1 bits that will be sent
 375:Core/Src/tmag5170_ex.c **** //!             in dataTx. LSB is CMD0, next bit is CMD1. (see header file or datasheet pg. 29 for 
 376:Core/Src/tmag5170_ex.c **** //****************************************************************************
 377:Core/Src/tmag5170_ex.c **** void normalRead( uint16_t output[], uint8_t address, uint8_t cmd_bits )
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 9


 378:Core/Src/tmag5170_ex.c **** {
 379:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 380:Core/Src/tmag5170_ex.c ****     assert(address < NUM_REGISTERS);
 381:Core/Src/tmag5170_ex.c **** 
 382:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 383:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = { 0 };
 384:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 385:Core/Src/tmag5170_ex.c **** 
 386:Core/Src/tmag5170_ex.c ****     // MSB is 1 for READ command
 387:Core/Src/tmag5170_ex.c ****     dataTx[0] = (address | 0x80);
 388:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 389:Core/Src/tmag5170_ex.c ****     dataTx[2] = 0x00;
 390:Core/Src/tmag5170_ex.c ****     dataTx[3] = cmd_bits << 4;
 391:Core/Src/tmag5170_ex.c **** 
 392:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx, dataRx);
 393:Core/Src/tmag5170_ex.c ****     output[0] = (dataRx[1] << 8) | dataRx[2];
 394:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 395:Core/Src/tmag5170_ex.c **** }
 396:Core/Src/tmag5170_ex.c **** 
 397:Core/Src/tmag5170_ex.c **** 
 398:Core/Src/tmag5170_ex.c **** 
 399:Core/Src/tmag5170_ex.c **** //****************************************************************************
 400:Core/Src/tmag5170_ex.c **** //! Register-only Read Function for Normal Data Mode (DATA_TYPE = 000b)
 401:Core/Src/tmag5170_ex.c **** //!
 402:Core/Src/tmag5170_ex.c **** //! Takes in address to read from and returns register at address without the status bits or
 403:Core/Src/tmag5170_ex.c **** //! triggering any CMD function (cmd_bits = 0x00).
 404:Core/Src/tmag5170_ex.c **** //!
 405:Core/Src/tmag5170_ex.c **** //! address   - uint8_t value from 0x00 to 0x14 containing the register address to read from
 406:Core/Src/tmag5170_ex.c **** //****************************************************************************
 407:Core/Src/tmag5170_ex.c **** uint16_t normalReadRegister( uint8_t address )
 408:Core/Src/tmag5170_ex.c **** {
 409:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 410:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x00 );
 411:Core/Src/tmag5170_ex.c ****     return output[0];
 412:Core/Src/tmag5170_ex.c **** }
 413:Core/Src/tmag5170_ex.c **** 
 414:Core/Src/tmag5170_ex.c **** 
 415:Core/Src/tmag5170_ex.c **** 
 416:Core/Src/tmag5170_ex.c **** //****************************************************************************
 417:Core/Src/tmag5170_ex.c **** //! Register-only Read Function for Normal Data Mode with CMD0 sent (DATA_TYPE = 000b)
 418:Core/Src/tmag5170_ex.c **** //!
 419:Core/Src/tmag5170_ex.c **** //! Takes in address to read from and returns register at address without the status bits.
 420:Core/Src/tmag5170_ex.c **** //! Sends CMD0 function (cmd_bits = 0x01), triggering conversion if device trigger is set to
 421:Core/Src/tmag5170_ex.c **** //! 'start at SPI command' [TRIGGER_MODE (0x02A-9) == 00b]
 422:Core/Src/tmag5170_ex.c **** //!
 423:Core/Src/tmag5170_ex.c **** //! address   - uint8_t value from 0x00 to 0x14 containing the register address to read from
 424:Core/Src/tmag5170_ex.c **** //****************************************************************************
 425:Core/Src/tmag5170_ex.c **** uint16_t normalReadRegisterWithCMD0( uint8_t address )
 426:Core/Src/tmag5170_ex.c **** {
 427:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 428:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x01 );
 429:Core/Src/tmag5170_ex.c ****     return output[0];
 430:Core/Src/tmag5170_ex.c **** }
 431:Core/Src/tmag5170_ex.c **** 
 432:Core/Src/tmag5170_ex.c **** 
 433:Core/Src/tmag5170_ex.c **** 
 434:Core/Src/tmag5170_ex.c **** //****************************************************************************
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 10


 435:Core/Src/tmag5170_ex.c **** //! Status-bits-only Read Function for Normal Data Mode (DATA_TYPE = 000b)
 436:Core/Src/tmag5170_ex.c **** //!
 437:Core/Src/tmag5170_ex.c **** //! Takes in address to read from and CMD bits and returns the used CMD bits and
 438:Core/Src/tmag5170_ex.c **** //! status bits WITHOUT a read register. (by default this function sends a read command for the
 439:Core/Src/tmag5170_ex.c **** //! DEVICE_CONFIG register)
 440:Core/Src/tmag5170_ex.c **** //!
 441:Core/Src/tmag5170_ex.c **** //! cmd_bits  - uint8_t value from 0x00 to 0x03 containing the CMD0 and CMD1 bits that will be sent
 442:Core/Src/tmag5170_ex.c **** //!             in dataTx. LSB is CMD0, next bit is CMD1. (see header file or datasheet pg. 29 for 
 443:Core/Src/tmag5170_ex.c **** //****************************************************************************
 444:Core/Src/tmag5170_ex.c **** uint16_t normalReadSTAT( uint8_t cmd_bits )
 445:Core/Src/tmag5170_ex.c **** {
 446:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 447:Core/Src/tmag5170_ex.c ****     normalRead( output, DEVICE_CONFIG_ADDRESS, cmd_bits );
 448:Core/Src/tmag5170_ex.c ****     return (cmd_bits << 12) | output[0];
 449:Core/Src/tmag5170_ex.c ****     // returned bits: | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 
 450:Core/Src/tmag5170_ex.c ****     //                |  0 |  0 | cmd_bits|  --------           STAT11 - STAT0           --------  
 451:Core/Src/tmag5170_ex.c **** }
 452:Core/Src/tmag5170_ex.c **** 
 453:Core/Src/tmag5170_ex.c **** 
 454:Core/Src/tmag5170_ex.c **** 
 455:Core/Src/tmag5170_ex.c **** //****************************************************************************
 456:Core/Src/tmag5170_ex.c **** //! Read Function for Special Data Mode (DATA_TYPE != 000b)
 457:Core/Src/tmag5170_ex.c **** //!
 458:Core/Src/tmag5170_ex.c **** //! Takes in an output array of length 3, address to read from, and CMD bits to send along,
 459:Core/Src/tmag5170_ex.c **** //! then creates the dataTx array and calls the sendAndReturnFrame function, interpreting
 460:Core/Src/tmag5170_ex.c **** //! dataRx according to Special Data Mode and putting the first measurement channel in output[0],
 461:Core/Src/tmag5170_ex.c **** //! second measurement channel in output[1], and status bits in output[2]
 462:Core/Src/tmag5170_ex.c **** //!
 463:Core/Src/tmag5170_ex.c **** //! output[3] - empty uint16_t array of length 3, output[0] will be assigned the CH1 measurement,
 464:Core/Src/tmag5170_ex.c **** //!             output[1] will be assigned the CH2 measurement, and output[2] will be assigned the
 465:Core/Src/tmag5170_ex.c **** //!             returned status bits.
 466:Core/Src/tmag5170_ex.c **** //! cmd_bits  - uint8_t value from 0x00 to 0x03 containing the CMD0 and CMD1 bits that will be sent
 467:Core/Src/tmag5170_ex.c **** //!             in dataTx. LSB is CMD0, next bit is CMD1. (see header file or datasheet pg. 29 for 
 468:Core/Src/tmag5170_ex.c **** //****************************************************************************
 469:Core/Src/tmag5170_ex.c **** void specialRead( uint16_t output[], uint8_t cmd_bits )
 470:Core/Src/tmag5170_ex.c **** {
 471:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 472:Core/Src/tmag5170_ex.c ****     uint8_t dataTx[4] = { 0 };
 473:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 474:Core/Src/tmag5170_ex.c **** 
 475:Core/Src/tmag5170_ex.c ****     dataTx[0] = 0x80;
 476:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 477:Core/Src/tmag5170_ex.c ****     dataTx[2] = 0x00;
 478:Core/Src/tmag5170_ex.c ****     dataTx[3] = cmd_bits << 4;
 479:Core/Src/tmag5170_ex.c **** 
 480:Core/Src/tmag5170_ex.c ****     sendAndReceiveFrame(dataTx, dataRx);
 481:Core/Src/tmag5170_ex.c **** 
 482:Core/Src/tmag5170_ex.c ****     // The output values have their respective bits assembled from the RX frame
 483:Core/Src/tmag5170_ex.c ****     output[0] = output[1] = 0x0000;
 484:Core/Src/tmag5170_ex.c ****     output[0] = ((dataRx[1] & 0x0F) << 8);
 485:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[2] & 0xF0);
 486:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[3] >> 4);
 487:Core/Src/tmag5170_ex.c ****     output[1] = ((dataRx[0] & 0x0F) << 8);
 488:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[1] & 0xF0);
 489:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[2] & 0x0F);
 490:Core/Src/tmag5170_ex.c **** 
 491:Core/Src/tmag5170_ex.c ****     output[2] = 0x0000;
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 11


 492:Core/Src/tmag5170_ex.c ****     output[2] = (dataRx[0] >> 4);
 493:Core/Src/tmag5170_ex.c **** }
 494:Core/Src/tmag5170_ex.c **** 
 495:Core/Src/tmag5170_ex.c **** 
 496:Core/Src/tmag5170_ex.c **** 
 497:Core/Src/tmag5170_ex.c **** //****************************************************************************
 498:Core/Src/tmag5170_ex.c **** //! Status-bits-only Read Function for Special Data Mode (DATA_TYPE != 000b)
 499:Core/Src/tmag5170_ex.c **** //!
 500:Core/Src/tmag5170_ex.c **** //! Takes in CMD bits to send on dataTx and returns the received status bits without
 501:Core/Src/tmag5170_ex.c **** //! the measurement channel values.
 502:Core/Src/tmag5170_ex.c **** //!
 503:Core/Src/tmag5170_ex.c **** //! cmd_bits  - uint8_t value from 0x00 to 0x03 containing the CMD0 and CMD1 bits that will be sent
 504:Core/Src/tmag5170_ex.c **** //!             in dataTx. LSB is CMD0, next bit is CMD1. (see header file or datasheet pg. 29 for 
 505:Core/Src/tmag5170_ex.c **** //****************************************************************************
 506:Core/Src/tmag5170_ex.c **** uint16_t specialReadSTAT( uint8_t cmd_bits )
 507:Core/Src/tmag5170_ex.c **** {
 508:Core/Src/tmag5170_ex.c ****     uint16_t output[3];
 509:Core/Src/tmag5170_ex.c ****     specialRead( output, cmd_bits );
 510:Core/Src/tmag5170_ex.c ****     return output[2];
 511:Core/Src/tmag5170_ex.c **** }
 512:Core/Src/tmag5170_ex.c **** 
 513:Core/Src/tmag5170_ex.c **** 
 514:Core/Src/tmag5170_ex.c **** 
 515:Core/Src/tmag5170_ex.c **** 
 516:Core/Src/tmag5170_ex.c **** //****************************************************************************
 517:Core/Src/tmag5170_ex.c **** //****************************************************************************
 518:Core/Src/tmag5170_ex.c **** //
 519:Core/Src/tmag5170_ex.c **** // Change Device Operation Mode
 520:Core/Src/tmag5170_ex.c **** //
 521:Core/Src/tmag5170_ex.c **** //****************************************************************************
 522:Core/Src/tmag5170_ex.c **** //****************************************************************************
 523:Core/Src/tmag5170_ex.c **** 
 524:Core/Src/tmag5170_ex.c **** 
 525:Core/Src/tmag5170_ex.c **** //****************************************************************************
 526:Core/Src/tmag5170_ex.c **** //! Enter Configuration Mode
 527:Core/Src/tmag5170_ex.c **** //!
 528:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 529:Core/Src/tmag5170_ex.c **** //****************************************************************************
 530:Core/Src/tmag5170_ex.c **** void enterConfigurationMode()
 531:Core/Src/tmag5170_ex.c **** {
 532:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 533:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 534:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 535:Core/Src/tmag5170_ex.c **** 
 536:Core/Src/tmag5170_ex.c ****     uint16_t input;
 537:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (address: 0x006-4) to Configuration Mode (0h)
 538:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 539:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 540:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 541:Core/Src/tmag5170_ex.c **** 
 542:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 543:Core/Src/tmag5170_ex.c ****     delay_us(50); // max expected delay as given by t_start_sleep (datasheet pg. 10)
 544:Core/Src/tmag5170_ex.c **** #endif
 545:Core/Src/tmag5170_ex.c **** }
 546:Core/Src/tmag5170_ex.c **** 
 547:Core/Src/tmag5170_ex.c **** 
 548:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 12


 549:Core/Src/tmag5170_ex.c **** //****************************************************************************
 550:Core/Src/tmag5170_ex.c **** //! Enter Stand-by Mode
 551:Core/Src/tmag5170_ex.c **** //!
 552:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 553:Core/Src/tmag5170_ex.c **** //****************************************************************************
 554:Core/Src/tmag5170_ex.c **** void enterStandbyMode()
 555:Core/Src/tmag5170_ex.c **** {
 556:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 557:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 558:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 559:Core/Src/tmag5170_ex.c **** 
 560:Core/Src/tmag5170_ex.c ****     uint16_t input;
 561:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (address: 0x006-4) to Standby Mode (1h)
 562:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 563:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Standby
 564:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 565:Core/Src/tmag5170_ex.c **** 
 566:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 567:Core/Src/tmag5170_ex.c ****     delay_us(140); // max expected delay as given by t_start_sleep + t_stand_by (datasheet pg. 10)
 568:Core/Src/tmag5170_ex.c **** #endif
 569:Core/Src/tmag5170_ex.c **** }
 570:Core/Src/tmag5170_ex.c **** 
 571:Core/Src/tmag5170_ex.c **** 
 572:Core/Src/tmag5170_ex.c **** 
 573:Core/Src/tmag5170_ex.c **** //****************************************************************************
 574:Core/Src/tmag5170_ex.c **** //! Enter Active Measure Mode (continuous conversion)
 575:Core/Src/tmag5170_ex.c **** //!
 576:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 577:Core/Src/tmag5170_ex.c **** //****************************************************************************
 578:Core/Src/tmag5170_ex.c **** void enterActiveMeasureMode()
 579:Core/Src/tmag5170_ex.c **** {
 580:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 581:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 582:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 583:Core/Src/tmag5170_ex.c **** 
 584:Core/Src/tmag5170_ex.c ****     uint16_t input;
 585:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Active Measure Mode (2h)
 586:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 587:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveM
 588:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 589:Core/Src/tmag5170_ex.c **** 
 590:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 591:Core/Src/tmag5170_ex.c ****     delay_us(140); // max expected delay as given by t_start_sleep + t_stand_by (datasheet pg. 10)
 592:Core/Src/tmag5170_ex.c **** #endif
 593:Core/Src/tmag5170_ex.c **** }
 594:Core/Src/tmag5170_ex.c **** 
 595:Core/Src/tmag5170_ex.c **** 
 596:Core/Src/tmag5170_ex.c **** 
 597:Core/Src/tmag5170_ex.c **** //****************************************************************************
 598:Core/Src/tmag5170_ex.c **** //! Enter Active Trigger Mode
 599:Core/Src/tmag5170_ex.c **** //!
 600:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 601:Core/Src/tmag5170_ex.c **** //****************************************************************************
 602:Core/Src/tmag5170_ex.c **** void enterActiveTriggerMode()
 603:Core/Src/tmag5170_ex.c **** {
 604:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 605:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 13


 606:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 607:Core/Src/tmag5170_ex.c **** 
 608:Core/Src/tmag5170_ex.c ****     uint16_t input;
 609:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Active Trigger Mode (3h)
 610:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 611:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveT
 612:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 613:Core/Src/tmag5170_ex.c **** 
 614:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 615:Core/Src/tmag5170_ex.c ****     delay_us(140); // max expected delay as given by t_start_sleep + t_stand_by (datasheet pg. 10)
 616:Core/Src/tmag5170_ex.c **** #endif
 617:Core/Src/tmag5170_ex.c **** }
 618:Core/Src/tmag5170_ex.c **** 
 619:Core/Src/tmag5170_ex.c **** 
 620:Core/Src/tmag5170_ex.c **** 
 621:Core/Src/tmag5170_ex.c **** //****************************************************************************
 622:Core/Src/tmag5170_ex.c **** //! Enter Sleep Mode
 623:Core/Src/tmag5170_ex.c **** //!
 624:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 625:Core/Src/tmag5170_ex.c **** //****************************************************************************
 626:Core/Src/tmag5170_ex.c **** void enterSleepMode()
 627:Core/Src/tmag5170_ex.c **** {
 628:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 629:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 630:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 631:Core/Src/tmag5170_ex.c **** 
 632:Core/Src/tmag5170_ex.c ****     uint16_t input;
 633:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Sleep Mode (5h)
 634:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 635:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_SleepMo
 636:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 637:Core/Src/tmag5170_ex.c **** 
 638:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 639:Core/Src/tmag5170_ex.c ****     delay_us(60); // max expected delay as given by t_go_sleep (datasheet pg. 10)
 640:Core/Src/tmag5170_ex.c **** #endif
 641:Core/Src/tmag5170_ex.c **** }
 642:Core/Src/tmag5170_ex.c **** 
 643:Core/Src/tmag5170_ex.c **** 
 644:Core/Src/tmag5170_ex.c **** 
 645:Core/Src/tmag5170_ex.c **** //****************************************************************************
 646:Core/Src/tmag5170_ex.c **** //! Enter Wake and Sleep Mode
 647:Core/Src/tmag5170_ex.c **** //! Does not change the SLEEPTIME bits
 648:Core/Src/tmag5170_ex.c **** //!
 649:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 650:Core/Src/tmag5170_ex.c **** //****************************************************************************
 651:Core/Src/tmag5170_ex.c **** void enterWakeUpAndSleepMode()
 652:Core/Src/tmag5170_ex.c **** {
 653:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 654:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 655:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 656:Core/Src/tmag5170_ex.c **** 
 657:Core/Src/tmag5170_ex.c ****     uint16_t input;
 658:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Wake-Up and Sleep Mode (4h)
 659:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 660:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Wakeupa
 661:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 662:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 14


 663:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 664:Core/Src/tmag5170_ex.c ****     delay_us(60); // max expected delay as given by t_go_sleep (datasheet pg. 10)
 665:Core/Src/tmag5170_ex.c **** #endif
 666:Core/Src/tmag5170_ex.c **** }
 667:Core/Src/tmag5170_ex.c **** 
 668:Core/Src/tmag5170_ex.c **** 
 669:Core/Src/tmag5170_ex.c **** 
 670:Core/Src/tmag5170_ex.c **** //****************************************************************************
 671:Core/Src/tmag5170_ex.c **** //! Set SLEEPTIME
 672:Core/Src/tmag5170_ex.c **** //! Takes in input from 0x00 to 0x09 to determine SLEEPTIME field according to datasheet (pg. 35)
 673:Core/Src/tmag5170_ex.c **** //! Does not change OPERATING_MODE and will not begin Wake and Sleep Mode
 674:Core/Src/tmag5170_ex.c **** //!
 675:Core/Src/tmag5170_ex.c **** //! SLEEPTIME determines the amount of time spend in low power mode between device conversions
 676:Core/Src/tmag5170_ex.c **** //! while in Wake Up and Sleep mode (OPERATING_MODE = 4h)
 677:Core/Src/tmag5170_ex.c **** //!                          |
 678:Core/Src/tmag5170_ex.c **** //!          SLEEPTIME bits  |  time between convs.
 679:Core/Src/tmag5170_ex.c **** //!         _________________|_______________________
 680:Core/Src/tmag5170_ex.c **** //!               0x00                   1ms
 681:Core/Src/tmag5170_ex.c **** //!               0x01                   5ms
 682:Core/Src/tmag5170_ex.c **** //!               0x02                  10ms
 683:Core/Src/tmag5170_ex.c **** //!               0x03                  15ms
 684:Core/Src/tmag5170_ex.c **** //!               0x04                  20ms
 685:Core/Src/tmag5170_ex.c **** //!               0x05                  30ms
 686:Core/Src/tmag5170_ex.c **** //!               0x06                  50ms
 687:Core/Src/tmag5170_ex.c **** //!               0x07                 100ms
 688:Core/Src/tmag5170_ex.c **** //!               0x08                 500ms
 689:Core/Src/tmag5170_ex.c **** //!               0x09                1000ms
 690:Core/Src/tmag5170_ex.c **** //!
 691:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 692:Core/Src/tmag5170_ex.c **** //****************************************************************************
 693:Core/Src/tmag5170_ex.c **** void setSLEEPTIME( uint8_t sleeptime )
 694:Core/Src/tmag5170_ex.c **** {
 695:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 696:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 697:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 698:Core/Src/tmag5170_ex.c **** 
 699:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
 700:Core/Src/tmag5170_ex.c ****     if ( !(sleeptime <= 0x09) ) return;
 701:Core/Src/tmag5170_ex.c **** 
 702:Core/Src/tmag5170_ex.c ****     uint16_t input;
 703:Core/Src/tmag5170_ex.c **** 
 704:Core/Src/tmag5170_ex.c ****     // Set SLEEPTIME (0x01D-A) to input value (corresponding time values are on datasheet pg. 35)
 705:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SENSOR_CONFIG_ADDRESS);
 706:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_SLEEPTIME_MASK) ) | (sleeptime << 10);
 707:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 708:Core/Src/tmag5170_ex.c **** }
 709:Core/Src/tmag5170_ex.c **** 
 710:Core/Src/tmag5170_ex.c **** 
 711:Core/Src/tmag5170_ex.c **** 
 712:Core/Src/tmag5170_ex.c **** //****************************************************************************
 713:Core/Src/tmag5170_ex.c **** //! Wake Up and Sleep Mode with SLEEPTIME set
 714:Core/Src/tmag5170_ex.c **** //! Takes in input from 0x00 to 0x0F to set the SLEEPTIME field according to datasheet
 715:Core/Src/tmag5170_ex.c **** //!
 716:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 717:Core/Src/tmag5170_ex.c **** //****************************************************************************
 718:Core/Src/tmag5170_ex.c **** void setWakeUpAndSleepMode( uint8_t sleeptime )
 719:Core/Src/tmag5170_ex.c **** {
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 15


 720:Core/Src/tmag5170_ex.c ****     setSLEEPTIME(sleeptime);
 721:Core/Src/tmag5170_ex.c ****     enterWakeUpAndSleepMode();
 722:Core/Src/tmag5170_ex.c **** }
 723:Core/Src/tmag5170_ex.c **** 
 724:Core/Src/tmag5170_ex.c **** 
 725:Core/Src/tmag5170_ex.c **** 
 726:Core/Src/tmag5170_ex.c **** //****************************************************************************
 727:Core/Src/tmag5170_ex.c **** //! Enter Deep Sleep Mode
 728:Core/Src/tmag5170_ex.c **** //!
 729:Core/Src/tmag5170_ex.c **** //! Make sure to use the exitDeepSleepMode function to properly exit Deep Sleep Mode.
 730:Core/Src/tmag5170_ex.c **** //! Deep Sleep Mode can be alternately exited with a short pulse on the CS pin.
 731:Core/Src/tmag5170_ex.c **** //!
 732:Core/Src/tmag5170_ex.c **** //! WILL WORK IN SPECIAL READ MODE, DEEP SLEEP MODE RESETS DEVICE TO FACTORY SETTINGS
 733:Core/Src/tmag5170_ex.c **** //! (EXITS SPECIAL READ MODE)
 734:Core/Src/tmag5170_ex.c **** //****************************************************************************
 735:Core/Src/tmag5170_ex.c **** void enterDeepSleepMode()
 736:Core/Src/tmag5170_ex.c **** {
 737:Core/Src/tmag5170_ex.c ****     // Send Write command, Deep Sleep resets device to factory settings so
 738:Core/Src/tmag5170_ex.c ****     // an initial register read is not needed (DEVICE_CONFIG default is 0x0000)
 739:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, DEVICE_CONFIG_OPERATING_MODE_DeepSleepMode );
 740:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored = SYSTEM_CONFIG_DEFAULT;
 741:Core/Src/tmag5170_ex.c ****     delay_us(100);
 742:Core/Src/tmag5170_ex.c **** }
 743:Core/Src/tmag5170_ex.c **** 
 744:Core/Src/tmag5170_ex.c **** 
 745:Core/Src/tmag5170_ex.c **** 
 746:Core/Src/tmag5170_ex.c **** //****************************************************************************
 747:Core/Src/tmag5170_ex.c **** //! Exit Sleep Mode
 748:Core/Src/tmag5170_ex.c **** //!
 749:Core/Src/tmag5170_ex.c **** //! Exits Sleep Mode by setting the OP_MODE field to Configuration Mode.
 750:Core/Src/tmag5170_ex.c **** //!
 751:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 752:Core/Src/tmag5170_ex.c **** //****************************************************************************
 753:Core/Src/tmag5170_ex.c **** void exitSleepMode()
 754:Core/Src/tmag5170_ex.c **** {
 755:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 756:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 757:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 758:Core/Src/tmag5170_ex.c **** 
 759:Core/Src/tmag5170_ex.c ****     uint16_t input;
 760:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Configuration Mode (0h)
 761:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 762:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 763:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 764:Core/Src/tmag5170_ex.c **** 
 765:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 766:Core/Src/tmag5170_ex.c ****     delay_us(140); // max expected delay as given by t_start_sleep + t_stand_by (datasheet pg. 10)
 767:Core/Src/tmag5170_ex.c **** #endif
 768:Core/Src/tmag5170_ex.c **** }
 769:Core/Src/tmag5170_ex.c **** 
 770:Core/Src/tmag5170_ex.c **** 
 771:Core/Src/tmag5170_ex.c **** 
 772:Core/Src/tmag5170_ex.c **** //****************************************************************************
 773:Core/Src/tmag5170_ex.c **** //! Exit Wake Up and Sleep Mode
 774:Core/Src/tmag5170_ex.c **** //!
 775:Core/Src/tmag5170_ex.c **** //! Exits Wake Up and Sleep Mode by setting the OP_MODE field to Configuration Mode.
 776:Core/Src/tmag5170_ex.c **** //!
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 16


 777:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 778:Core/Src/tmag5170_ex.c **** //****************************************************************************
 779:Core/Src/tmag5170_ex.c **** void exitWakeAndSleepMode()
 780:Core/Src/tmag5170_ex.c **** {
 781:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 782:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 783:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 784:Core/Src/tmag5170_ex.c **** 
 785:Core/Src/tmag5170_ex.c ****     uint16_t input;
 786:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Configuration Mode (0h)
 787:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 788:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 789:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 790:Core/Src/tmag5170_ex.c **** 
 791:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 792:Core/Src/tmag5170_ex.c ****     delay_us(140); // max expected delay as given by t_start_sleep + t_stand_by (datasheet pg. 10)
 793:Core/Src/tmag5170_ex.c **** #endif
 794:Core/Src/tmag5170_ex.c **** }
 795:Core/Src/tmag5170_ex.c **** 
 796:Core/Src/tmag5170_ex.c **** 
 797:Core/Src/tmag5170_ex.c **** 
 798:Core/Src/tmag5170_ex.c **** //****************************************************************************
 799:Core/Src/tmag5170_ex.c **** //! Exit Deep Sleep Mode
 800:Core/Src/tmag5170_ex.c **** //! (Use this function instead of a different operation mode change function to
 801:Core/Src/tmag5170_ex.c **** //! exit Deep Sleep mode properly)
 802:Core/Src/tmag5170_ex.c **** //!
 803:Core/Src/tmag5170_ex.c **** //! Exits Deep Sleep Mode by pulsing LOW on the CS pin and waiting for the chip
 804:Core/Src/tmag5170_ex.c **** //! to start up. (t_start_deep_sleep)
 805:Core/Src/tmag5170_ex.c **** //!
 806:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 807:Core/Src/tmag5170_ex.c **** //****************************************************************************
 808:Core/Src/tmag5170_ex.c **** void exitDeepSleepMode()
 809:Core/Src/tmag5170_ex.c **** {
 810:Core/Src/tmag5170_ex.c ****     // A LOW pulse is needed on CS to exit Deep Sleep Mode (enters Configuration Mode)
 811:Core/Src/tmag5170_ex.c ****     csPulse();
 812:Core/Src/tmag5170_ex.c **** 
 813:Core/Src/tmag5170_ex.c **** #ifdef  MAX_DELAYS_IN_OPMODE_CHANGES
 814:Core/Src/tmag5170_ex.c ****     delay_us(500); // max expected delay as given by t_start_deep_sleep (datasheet pg. 10)
 815:Core/Src/tmag5170_ex.c **** #else
 816:Core/Src/tmag5170_ex.c ****     delay_us(260); // typical delay for t_start_deep_sleep at Vcc = 2.3V (datasheet pg. 10)
 817:Core/Src/tmag5170_ex.c **** #endif
 818:Core/Src/tmag5170_ex.c **** }
 819:Core/Src/tmag5170_ex.c **** 
 820:Core/Src/tmag5170_ex.c **** 
 821:Core/Src/tmag5170_ex.c **** 
 822:Core/Src/tmag5170_ex.c **** 
 823:Core/Src/tmag5170_ex.c **** 
 824:Core/Src/tmag5170_ex.c **** 
 825:Core/Src/tmag5170_ex.c **** //****************************************************************************
 826:Core/Src/tmag5170_ex.c **** //****************************************************************************
 827:Core/Src/tmag5170_ex.c **** //
 828:Core/Src/tmag5170_ex.c **** // Functions to Configure Trigger Settings
 829:Core/Src/tmag5170_ex.c **** //
 830:Core/Src/tmag5170_ex.c **** //****************************************************************************
 831:Core/Src/tmag5170_ex.c **** //****************************************************************************
 832:Core/Src/tmag5170_ex.c **** 
 833:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 17


 834:Core/Src/tmag5170_ex.c **** //****************************************************************************
 835:Core/Src/tmag5170_ex.c **** //! SPI to to Trigger Conversion
 836:Core/Src/tmag5170_ex.c **** //!
 837:Core/Src/tmag5170_ex.c **** //! Configures the conversion trigger to be activated on a SPI read or write command with CMD0 enab
 838:Core/Src/tmag5170_ex.c **** //! (Use normalReadRegisterWithCMD0, writeToRegisterWithCMD0, or any R/W function with a 'cmd_bits'
 839:Core/Src/tmag5170_ex.c **** //!  input to send CMD0 in sent frame)
 840:Core/Src/tmag5170_ex.c **** //!
 841:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 842:Core/Src/tmag5170_ex.c **** //****************************************************************************
 843:Core/Src/tmag5170_ex.c **** void spiTriggersConversion()
 844:Core/Src/tmag5170_ex.c **** {
 845:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 846:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 847:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 848:Core/Src/tmag5170_ex.c **** 
 849:Core/Src/tmag5170_ex.c ****     uint16_t input;
 850:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to 'trigger at SPI CMD0' (0h)
 851:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SYSTEM_CONFIG_ADDRESS);
 852:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 853:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtSPIcommandbits;
 854:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 855:Core/Src/tmag5170_ex.c **** }
 856:Core/Src/tmag5170_ex.c **** 
 857:Core/Src/tmag5170_ex.c **** 
 858:Core/Src/tmag5170_ex.c **** 
 859:Core/Src/tmag5170_ex.c **** //****************************************************************************
 860:Core/Src/tmag5170_ex.c **** //! CS pulse to Trigger Conversion
 861:Core/Src/tmag5170_ex.c **** //!
 862:Core/Src/tmag5170_ex.c **** //! Configures the conversion trigger to be activated on a LOW pulse (1us to 25us in length) to CS.
 863:Core/Src/tmag5170_ex.c **** //!
 864:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 865:Core/Src/tmag5170_ex.c **** //****************************************************************************
 866:Core/Src/tmag5170_ex.c **** void csTriggersConversion()
 867:Core/Src/tmag5170_ex.c **** {
 868:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 869:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 870:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 871:Core/Src/tmag5170_ex.c **** 
 872:Core/Src/tmag5170_ex.c ****     uint16_t input;
 873:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to at CS pulse (1h)
 874:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SYSTEM_CONFIG_ADDRESS);
 875:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 876:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtnCSSyncPulse;
 877:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 878:Core/Src/tmag5170_ex.c **** }
 879:Core/Src/tmag5170_ex.c **** 
 880:Core/Src/tmag5170_ex.c **** 
 881:Core/Src/tmag5170_ex.c **** 
 882:Core/Src/tmag5170_ex.c **** //****************************************************************************
 883:Core/Src/tmag5170_ex.c **** //! ALERT to Trigger Conversion
 884:Core/Src/tmag5170_ex.c **** //!
 885:Core/Src/tmag5170_ex.c **** //! Configures the conversion trigger to be activated on a LOW pulse (1us to 25us in length) to ALE
 886:Core/Src/tmag5170_ex.c **** //! ALERT_MODE must be in Interrupt & Trigger Mode for this functionality to work.
 887:Core/Src/tmag5170_ex.c **** //!
 888:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 889:Core/Src/tmag5170_ex.c **** //****************************************************************************
 890:Core/Src/tmag5170_ex.c **** void alertTriggersConversion()
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 18


 891:Core/Src/tmag5170_ex.c **** {
 892:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 893:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
 894:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 895:Core/Src/tmag5170_ex.c **** 
 896:Core/Src/tmag5170_ex.c ****     uint16_t input;
 897:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to at ALERT pulse (2h)
 898:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SYSTEM_CONFIG_ADDRESS);
 899:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 900:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtALERTSyncPulse;
 901:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 902:Core/Src/tmag5170_ex.c **** 
 903:Core/Src/tmag5170_ex.c ****     // SET ALERT_MODE (address: 0x03C) to Interrupt & Trigger Mode (0h)
 904:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
 905:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 906:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 907:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 908:Core/Src/tmag5170_ex.c **** }
 909:Core/Src/tmag5170_ex.c **** 
 910:Core/Src/tmag5170_ex.c **** 
 911:Core/Src/tmag5170_ex.c **** 
 912:Core/Src/tmag5170_ex.c **** 
 913:Core/Src/tmag5170_ex.c **** //****************************************************************************
 914:Core/Src/tmag5170_ex.c **** //****************************************************************************
 915:Core/Src/tmag5170_ex.c **** //
 916:Core/Src/tmag5170_ex.c **** // Threshold Detection + ALERT output Settings
 917:Core/Src/tmag5170_ex.c **** //
 918:Core/Src/tmag5170_ex.c **** //****************************************************************************
 919:Core/Src/tmag5170_ex.c **** //****************************************************************************
 920:Core/Src/tmag5170_ex.c **** 
 921:Core/Src/tmag5170_ex.c **** 
 922:Core/Src/tmag5170_ex.c **** //****************************************************************************
 923:Core/Src/tmag5170_ex.c **** //! Enable ALERT to Indicate Conversion
 924:Core/Src/tmag5170_ex.c **** //!
 925:Core/Src/tmag5170_ex.c **** //! Configures the device so when its magnetic measurements are complete, the device will
 926:Core/Src/tmag5170_ex.c **** //! output LOW on the ALERT pin.
 927:Core/Src/tmag5170_ex.c **** //!
 928:Core/Src/tmag5170_ex.c **** //! NOTE: This configures ALERT as an output pin, the respective GPIO pin it is
 929:Core/Src/tmag5170_ex.c **** //!       connected to will have to be set as an input as well. Please ensure none
 930:Core/Src/tmag5170_ex.c **** //!       of the input functions of ALERT are being used as well (such as the ALERT trigger)
 931:Core/Src/tmag5170_ex.c **** //!
 932:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 933:Core/Src/tmag5170_ex.c **** //****************************************************************************
 934:Core/Src/tmag5170_ex.c **** void alertIndicatesConversionEnable()
 935:Core/Src/tmag5170_ex.c **** {
 936:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 937:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 938:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 939:Core/Src/tmag5170_ex.c **** 
 940:Core/Src/tmag5170_ex.c ****     uint16_t input;
 941:Core/Src/tmag5170_ex.c ****     // SET ALERT_MODE (address: 0x03C) to Interrupt Mode (0h)
 942:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
 943:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 944:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 945:Core/Src/tmag5170_ex.c **** 
 946:Core/Src/tmag5170_ex.c ****     // SET RSLT_ALRT (address: 0x038) to ALERT output asserted LOW to indicate conversion completio
 947:Core/Src/tmag5170_ex.c ****     // (Register already grabbed so no new READ command is needed)
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 19


 948:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_RSLT_ALRT_ALERToutputsignalsconversioncomplete;
 949:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 950:Core/Src/tmag5170_ex.c **** }
 951:Core/Src/tmag5170_ex.c **** 
 952:Core/Src/tmag5170_ex.c **** 
 953:Core/Src/tmag5170_ex.c **** 
 954:Core/Src/tmag5170_ex.c **** //****************************************************************************
 955:Core/Src/tmag5170_ex.c **** //! Disable ALERT to Indicate Conversion
 956:Core/Src/tmag5170_ex.c **** //!
 957:Core/Src/tmag5170_ex.c **** //! Turns off the ALERT pin assertion when device measurements are complete.
 958:Core/Src/tmag5170_ex.c **** //!
 959:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 960:Core/Src/tmag5170_ex.c **** //****************************************************************************
 961:Core/Src/tmag5170_ex.c **** void alertIndicatesConversionDisable()
 962:Core/Src/tmag5170_ex.c **** {
 963:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 964:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
 965:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
 966:Core/Src/tmag5170_ex.c **** 
 967:Core/Src/tmag5170_ex.c ****     uint16_t input;
 968:Core/Src/tmag5170_ex.c ****     // SET RSLT_ALRT (address: 0x038) ALERT output is not asserted to indicate conversion completio
 969:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
 970:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_RSLT_ALRT_MASK);
 971:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_RSLT_ALRT_ALERTisnotusedtosignalconversioncompleteion;
 972:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 973:Core/Src/tmag5170_ex.c **** }
 974:Core/Src/tmag5170_ex.c **** 
 975:Core/Src/tmag5170_ex.c **** 
 976:Core/Src/tmag5170_ex.c **** 
 977:Core/Src/tmag5170_ex.c **** //****************************************************************************
 978:Core/Src/tmag5170_ex.c **** //! Setup Magnetic Switch Mode
 979:Core/Src/tmag5170_ex.c **** //!
 980:Core/Src/tmag5170_ex.c **** //! Enables Magnetic Switch Mode for the ALERT pin and the respective high/low
 981:Core/Src/tmag5170_ex.c **** //! threshold triggers. The thresholds are not set using this function, use
 982:Core/Src/tmag5170_ex.c **** //! magThreshSet to change the high/low thresholds for each measurement.
 983:Core/Src/tmag5170_ex.c **** //!
 984:Core/Src/tmag5170_ex.c **** //! thresholds_en - input determining the state of each threshold
 985:Core/Src/tmag5170_ex.c **** //!                 (4 LSBs of input int correlate to which thresholds are enabled in
 986:Core/Src/tmag5170_ex.c **** //!                  order TZYX, cannot be greater than 0x0F)
 987:Core/Src/tmag5170_ex.c **** //!                 examples:
 988:Core/Src/tmag5170_ex.c **** //!                 thresholds_en = 0x0A (1010b) ==> T and Y are enabled, Z and X are disabled
 989:Core/Src/tmag5170_ex.c **** //!                 thresholds_en = 0x04 (0100b) ==> Z is enabled, T, Y, and X are disabled
 990:Core/Src/tmag5170_ex.c **** //!                 --inputs of 0x00 and 0x0F can be used to disable or enable all thresholds, resp
 991:Core/Src/tmag5170_ex.c **** //!
 992:Core/Src/tmag5170_ex.c **** //! NOTE: This configures ALERT as an output pin, the respective GPIO pin it is
 993:Core/Src/tmag5170_ex.c **** //!       connected to will have to be set as an input as well. Please ensure none
 994:Core/Src/tmag5170_ex.c **** //!       of the input functions of ALERT are being used as well (such as the ALERT trigger)
 995:Core/Src/tmag5170_ex.c **** //!
 996:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
 997:Core/Src/tmag5170_ex.c **** //****************************************************************************
 998:Core/Src/tmag5170_ex.c **** void setMagSwitch( uint8_t thresholds_en )
 999:Core/Src/tmag5170_ex.c **** {
1000:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1001:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
1002:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1003:Core/Src/tmag5170_ex.c **** 
1004:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 20


1005:Core/Src/tmag5170_ex.c ****     if( !(thresholds_en <= 0x0F) ) return;
1006:Core/Src/tmag5170_ex.c **** 
1007:Core/Src/tmag5170_ex.c ****     uint16_t input;
1008:Core/Src/tmag5170_ex.c **** 
1009:Core/Src/tmag5170_ex.c ****     // Pull DEVICE_CONFIG register and set T_HLT_EN according to input, then
1010:Core/Src/tmag5170_ex.c ****     // write back to TMAG5170
1011:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
1012:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_HLT_EN_MASK);
1013:Core/Src/tmag5170_ex.c **** 
1014:Core/Src/tmag5170_ex.c ****     if ( thresholds_en & 0x08 == 0x08 ) input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOn;
1015:Core/Src/tmag5170_ex.c ****     else input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOff;
1016:Core/Src/tmag5170_ex.c **** 
1017:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
1018:Core/Src/tmag5170_ex.c **** 
1019:Core/Src/tmag5170_ex.c ****     // Pull SYSTEM_CONFIG register and set X, Y, and Z_HLT_EN according to input,
1020:Core/Src/tmag5170_ex.c ****     // then write back to TMAG5170
1021:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SYSTEM_CONFIG_ADDRESS);
1022:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_Z_HLT_EN_MASK);
1023:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_Y_HLT_EN_MASK);
1024:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_X_HLT_EN_MASK);
1025:Core/Src/tmag5170_ex.c **** 
1026:Core/Src/tmag5170_ex.c ****     if ( thresholds_en & 0x04 == 0x04 ) input |= SYSTEM_CONFIG_Z_HLT_EN_ON;
1027:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Z_HLT_EN_OFF;
1028:Core/Src/tmag5170_ex.c **** 
1029:Core/Src/tmag5170_ex.c ****     if ( thresholds_en & 0x02 == 0x02 ) input |= SYSTEM_CONFIG_Y_HLT_EN_ON;
1030:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Y_HLT_EN_OFF;
1031:Core/Src/tmag5170_ex.c **** 
1032:Core/Src/tmag5170_ex.c ****     if ( thresholds_en & 0x01 == 0x01 ) input |= SYSTEM_CONFIG_X_HLT_EN_ON;
1033:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_X_HLT_EN_OFF;
1034:Core/Src/tmag5170_ex.c **** 
1035:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
1036:Core/Src/tmag5170_ex.c **** 
1037:Core/Src/tmag5170_ex.c **** 
1038:Core/Src/tmag5170_ex.c ****     // Set ALERT_MODE field in ALERT_CONFIG to Magnetic Switch Mode
1039:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
1040:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
1041:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_MagneticSwitchMode;
1042:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
1043:Core/Src/tmag5170_ex.c **** 
1044:Core/Src/tmag5170_ex.c **** }
1045:Core/Src/tmag5170_ex.c **** 
1046:Core/Src/tmag5170_ex.c **** 
1047:Core/Src/tmag5170_ex.c **** 
1048:Core/Src/tmag5170_ex.c **** //****************************************************************************
1049:Core/Src/tmag5170_ex.c **** //! Disable Magnetic Switch Mode (set back to Interrupt & Trigger Mode)
1050:Core/Src/tmag5170_ex.c **** //!
1051:Core/Src/tmag5170_ex.c **** //! Changes the ALERT_MODE back to Interrupt & Trigger Mode, effectively disabling
1052:Core/Src/tmag5170_ex.c **** //! Magnetic Switch mode without wiping its set threshold registers
1053:Core/Src/tmag5170_ex.c **** //****************************************************************************
1054:Core/Src/tmag5170_ex.c **** void disableMagSwitch()
1055:Core/Src/tmag5170_ex.c **** {
1056:Core/Src/tmag5170_ex.c ****     uint16_t input;
1057:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
1058:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
1059:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
1060:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
1061:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 21


1062:Core/Src/tmag5170_ex.c **** 
1063:Core/Src/tmag5170_ex.c **** 
1064:Core/Src/tmag5170_ex.c **** 
1065:Core/Src/tmag5170_ex.c **** //****************************************************************************
1066:Core/Src/tmag5170_ex.c **** //! Setup Magnetic Thresholds
1067:Core/Src/tmag5170_ex.c **** //! set_threshold - which threshold is being set (one at a time):
1068:Core/Src/tmag5170_ex.c **** //!                 0x00 = X  |  0x01 = Y  |  0x02 = Z  |  0x03 = T
1069:Core/Src/tmag5170_ex.c **** //! thrx_hi (SIGNED) - signed 8-bit value for the high threshold (check datasheet for conversion eq
1070:Core/Src/tmag5170_ex.c **** //! thrx_lo (SIGNED) - signed 8-bit value for the low threshold (check datasheet for conversion eqn
1071:Core/Src/tmag5170_ex.c **** //!
1072:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
1073:Core/Src/tmag5170_ex.c **** //****************************************************************************
1074:Core/Src/tmag5170_ex.c **** void magThreshSet( uint8_t set_threshold, int8_t thrx_hi, int8_t thrx_lo )
1075:Core/Src/tmag5170_ex.c **** {
1076:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1077:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (address: 0x028-6) is not set to Normal Read Mode (000b)
1078:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1079:Core/Src/tmag5170_ex.c **** 
1080:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
1081:Core/Src/tmag5170_ex.c ****     if( !(set_threshold <= 0x03) ) return;
1082:Core/Src/tmag5170_ex.c **** 
1083:Core/Src/tmag5170_ex.c ****     // Get associated register address (register order is XYZT from 0x04 to 0x07)
1084:Core/Src/tmag5170_ex.c ****     // The set_threshold value can be added to X address to get the desired one
1085:Core/Src/tmag5170_ex.c ****     uint8_t reg_address = X_THRX_CONFIG_ADDRESS + set_threshold;
1086:Core/Src/tmag5170_ex.c **** 
1087:Core/Src/tmag5170_ex.c ****     // Signed ints were used in the function call to make input easier.
1088:Core/Src/tmag5170_ex.c ****     // Unsigned ints must be used to combine into one dataline/
1089:Core/Src/tmag5170_ex.c ****     uint16_t input = ((uint8_t) thrx_hi << 8) | ((uint8_t) thrx_lo);
1090:Core/Src/tmag5170_ex.c **** 
1091:Core/Src/tmag5170_ex.c ****     writeToRegister( reg_address, input );
1092:Core/Src/tmag5170_ex.c **** }
1093:Core/Src/tmag5170_ex.c **** 
1094:Core/Src/tmag5170_ex.c **** 
1095:Core/Src/tmag5170_ex.c **** 
1096:Core/Src/tmag5170_ex.c **** 
1097:Core/Src/tmag5170_ex.c **** 
1098:Core/Src/tmag5170_ex.c **** //****************************************************************************
1099:Core/Src/tmag5170_ex.c **** //****************************************************************************
1100:Core/Src/tmag5170_ex.c **** //
1101:Core/Src/tmag5170_ex.c **** // Measurement Configuration Functions
1102:Core/Src/tmag5170_ex.c **** //
1103:Core/Src/tmag5170_ex.c **** //****************************************************************************
1104:Core/Src/tmag5170_ex.c **** //****************************************************************************
1105:Core/Src/tmag5170_ex.c **** 
1106:Core/Src/tmag5170_ex.c **** 
1107:Core/Src/tmag5170_ex.c **** //****************************************************************************
1108:Core/Src/tmag5170_ex.c **** //! Enable Magnetic Axes for Measurement (also can turn all channels off)
1109:Core/Src/tmag5170_ex.c **** //!
1110:Core/Src/tmag5170_ex.c **** //! Takes in a 4-bit value for the MAG_CH_EN field (0x019-6)
1111:Core/Src/tmag5170_ex.c **** //! mag_ch_en_bits must not be greater than 0x0F
1112:Core/Src/tmag5170_ex.c **** //!
1113:Core/Src/tmag5170_ex.c **** //! When mag_ch_en_bits < 0x08 its three LSBs act as a three bit enable/disable command for ZYX
1114:Core/Src/tmag5170_ex.c **** //! (examples:  0x05 (0101b) => ZX enabled  |  0x02 (0010b) => Y enabled)
1115:Core/Src/tmag5170_ex.c **** //!
1116:Core/Src/tmag5170_ex.c **** //! When mag_ch_en_bits >= 0x08 it configures alternative sampling orders along with enabling
1117:Core/Src/tmag5170_ex.c **** //! specific channels (see chart below)
1118:Core/Src/tmag5170_ex.c **** //!
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 22


1119:Core/Src/tmag5170_ex.c **** //!                          | enabled channels ||                  | enabled channels
1120:Core/Src/tmag5170_ex.c **** //!          mag_ch_en_bits  | + sampling order ||  mag_ch_en_bits  | + sampling order
1121:Core/Src/tmag5170_ex.c **** //!         _________________|__________________||__________________|__________________
1122:Core/Src/tmag5170_ex.c **** //!               0x00               none       ||       0x08               XYX
1123:Core/Src/tmag5170_ex.c **** //!               0x01                X         ||       0x09               YXY
1124:Core/Src/tmag5170_ex.c **** //!               0x02                Y         ||       0x0A               YZY
1125:Core/Src/tmag5170_ex.c **** //!               0x03               XY         ||       0x0B               ZYZ
1126:Core/Src/tmag5170_ex.c **** //!               0x04                Z         ||       0x0C               ZXZ
1127:Core/Src/tmag5170_ex.c **** //!               0x05               ZX         ||       0x0D               XZX
1128:Core/Src/tmag5170_ex.c **** //!               0x06               YZ         ||       0x0E              XYZYX
1129:Core/Src/tmag5170_ex.c **** //!               0x07               XYZ        ||       0x0F              XYZZYX
1130:Core/Src/tmag5170_ex.c **** //!
1131:Core/Src/tmag5170_ex.c **** //! Definitions for descriptive inputs to this function are provided in the header file.
1132:Core/Src/tmag5170_ex.c **** //!
1133:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
1134:Core/Src/tmag5170_ex.c **** //****************************************************************************
1135:Core/Src/tmag5170_ex.c **** void enableMagChannels( uint8_t mag_ch_en_bits )
1136:Core/Src/tmag5170_ex.c **** {
1137:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1138:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
1139:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1140:Core/Src/tmag5170_ex.c **** 
1141:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
1142:Core/Src/tmag5170_ex.c ****     if ( !( mag_ch_en_bits <= 0x0F ) ) return;
1143:Core/Src/tmag5170_ex.c **** 
1144:Core/Src/tmag5170_ex.c ****     uint16_t input;
1145:Core/Src/tmag5170_ex.c ****     // Set MAG_CH_EN (0x019-6) to mag_ch_en_bits
1146:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SENSOR_CONFIG_ADDRESS);
1147:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_MAG_CH_EN_MASK) ) | (mag_ch_en_bits << 6);
1148:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
1149:Core/Src/tmag5170_ex.c **** }
1150:Core/Src/tmag5170_ex.c **** 
1151:Core/Src/tmag5170_ex.c **** 
1152:Core/Src/tmag5170_ex.c **** 
1153:Core/Src/tmag5170_ex.c **** //****************************************************************************
1154:Core/Src/tmag5170_ex.c **** //! Enable Angle Measurement (also can turn off angle measurement)
1155:Core/Src/tmag5170_ex.c **** //!
1156:Core/Src/tmag5170_ex.c **** //! Takes in a 2-bit value for the ANGLE_EN field (0x01F-E) to determine which two
1157:Core/Src/tmag5170_ex.c **** //! axes to measure the angle off of for the on-board CORDIC function in the device.
1158:Core/Src/tmag5170_ex.c **** //!
1159:Core/Src/tmag5170_ex.c **** //! Based on the ANGLE_EN setting, the angle will be calculated using the first axis
1160:Core/Src/tmag5170_ex.c **** //! as the "horizontal" axis (positive side of axis is 0 degrees) and the second as
1161:Core/Src/tmag5170_ex.c **** //! the "vertical" axis (positive side of axis is 90degrees)
1162:Core/Src/tmag5170_ex.c **** //!
1163:Core/Src/tmag5170_ex.c **** //! angle_en_bits can be set to 0x00 to 0x03 to configure these settings for ANGLE_EN:
1164:Core/Src/tmag5170_ex.c **** //!              ANGLE_EN value | horizontal axis | vertical axis
1165:Core/Src/tmag5170_ex.c **** //!                   0x00              none            none  --  (angle measurement disabled)
1166:Core/Src/tmag5170_ex.c **** //!                   0x01               X               Y
1167:Core/Src/tmag5170_ex.c **** //!                   0x02               Y               Z
1168:Core/Src/tmag5170_ex.c **** //!                   0x03               X               Z
1169:Core/Src/tmag5170_ex.c **** //****************************************************************************
1170:Core/Src/tmag5170_ex.c **** void enableAngleMeasurement( uint8_t angle_en_bits )
1171:Core/Src/tmag5170_ex.c **** {
1172:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1173:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
1174:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1175:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 23


1176:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
1177:Core/Src/tmag5170_ex.c ****     if ( !( angle_en_bits <= 0x03 ) ) return;
1178:Core/Src/tmag5170_ex.c **** 
1179:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1180:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
1181:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1182:Core/Src/tmag5170_ex.c **** 
1183:Core/Src/tmag5170_ex.c ****     uint16_t input;
1184:Core/Src/tmag5170_ex.c ****     // Set ANGLE_EN (0x01F-E) to mag_ch_en_bits
1185:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(SENSOR_CONFIG_ADDRESS);
1186:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_ANGLE_EN_MASK) ) | (angle_en_bits << 14);
1187:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
1188:Core/Src/tmag5170_ex.c **** }
1189:Core/Src/tmag5170_ex.c **** 
1190:Core/Src/tmag5170_ex.c **** 
1191:Core/Src/tmag5170_ex.c **** 
1192:Core/Src/tmag5170_ex.c **** //****************************************************************************
1193:Core/Src/tmag5170_ex.c **** //! Enable Temperature Measurement
1194:Core/Src/tmag5170_ex.c **** //!
1195:Core/Src/tmag5170_ex.c **** //! Begins Temperature Measurements by changing the T_CH_EN field in the
1196:Core/Src/tmag5170_ex.c **** //! DEVICE_CONFIG to 1b.
1197:Core/Src/tmag5170_ex.c **** //****************************************************************************
1198:Core/Src/tmag5170_ex.c **** void enableTemperatureMeasurement() {
1199:Core/Src/tmag5170_ex.c ****     uint16_t input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
1200:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
1201:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelEnabled;
1202:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
1203:Core/Src/tmag5170_ex.c **** }
1204:Core/Src/tmag5170_ex.c **** 
1205:Core/Src/tmag5170_ex.c **** //****************************************************************************
1206:Core/Src/tmag5170_ex.c **** //! Disable Temperature Measurement
1207:Core/Src/tmag5170_ex.c **** //!
1208:Core/Src/tmag5170_ex.c **** //! Ends Temperature Measurements by changing the T_CH_EN field in the
1209:Core/Src/tmag5170_ex.c **** //! DEVICE_CONFIG to 0b.
1210:Core/Src/tmag5170_ex.c **** //****************************************************************************
1211:Core/Src/tmag5170_ex.c **** void disableTemperatureMeasurement() {
1212:Core/Src/tmag5170_ex.c ****     uint16_t input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
1213:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
1214:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelDisabled;
1215:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
1216:Core/Src/tmag5170_ex.c **** }
1217:Core/Src/tmag5170_ex.c **** 
1218:Core/Src/tmag5170_ex.c **** 
1219:Core/Src/tmag5170_ex.c **** 
1220:Core/Src/tmag5170_ex.c **** //****************************************************************************
1221:Core/Src/tmag5170_ex.c **** //! Set Sampling Rate (configure the amount of additional samples to reduce noise/increase resoluti
1222:Core/Src/tmag5170_ex.c **** //!
1223:Core/Src/tmag5170_ex.c **** //! CONV_AVG_bits - what value to set for the CONV_AVG (0x00E-C) value (from datasheet pg. 34):
1224:Core/Src/tmag5170_ex.c **** //!                      | num. samples | 3-axes speed | 1-axis speed |
1225:Core/Src/tmag5170_ex.c **** //!                 0x00 -       1x         10.0Ksps         20Ksps
1226:Core/Src/tmag5170_ex.c **** //!                 0x01 -       2x          5.7Ksps       13.3Ksps
1227:Core/Src/tmag5170_ex.c **** //!                 0x02 -       4x          3.1Ksps        8.0Ksps
1228:Core/Src/tmag5170_ex.c **** //!                 0x03 -       8x          1.6Ksps        4.4Ksps
1229:Core/Src/tmag5170_ex.c **** //!                 0x04 -      16x          0.8Ksps        2.4Ksps
1230:Core/Src/tmag5170_ex.c **** //!                 0x05 -      32x          0.4Ksps        1.2Ksps
1231:Core/Src/tmag5170_ex.c **** //****************************************************************************
1232:Core/Src/tmag5170_ex.c **** void setSampleRate( uint8_t CONV_AVG_bits )
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 24


1233:Core/Src/tmag5170_ex.c **** {
1234:Core/Src/tmag5170_ex.c ****     uint16_t input;
1235:Core/Src/tmag5170_ex.c ****     // Set CONV_AVG (0x00E-C) to CONV_AVG_bits
1236:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
1237:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_CONV_AVG_NUM_MASK) ) | (CONV_AVG_bits << 12);
1238:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
1239:Core/Src/tmag5170_ex.c **** }
1240:Core/Src/tmag5170_ex.c **** 
1241:Core/Src/tmag5170_ex.c **** 
1242:Core/Src/tmag5170_ex.c **** 
1243:Core/Src/tmag5170_ex.c **** //****************************************************************************
1244:Core/Src/tmag5170_ex.c **** //! Set Ranges for X, Y, and Z axes
1245:Core/Src/tmag5170_ex.c **** //!
1246:Core/Src/tmag5170_ex.c **** //! Sets the X, Y, and Z_RANGE fields in the SENSOR_CONFIG register to the bits
1247:Core/Src/tmag5170_ex.c **** //! determined by the function inputs.
1248:Core/Src/tmag5170_ex.c **** //!
1249:Core/Src/tmag5170_ex.c **** //! x_range_bits - bits for X_RANGE field (must be no greater than 0x02)
1250:Core/Src/tmag5170_ex.c **** //! y_range_bits - bits for Y_RANGE field (must be no greater than 0x02)
1251:Core/Src/tmag5170_ex.c **** //! z_range_bits - bits for Z_RANGE field (must be no greater than 0x02)
1252:Core/Src/tmag5170_ex.c **** //!
1253:Core/Src/tmag5170_ex.c **** //! According to the TMAG5170 version used, the mT range for the bits are as follows:
1254:Core/Src/tmag5170_ex.c **** //!
1255:Core/Src/tmag5170_ex.c **** //!                 *_range_bits  |   TMAG5170A1   |   TMAG5170A2
1256:Core/Src/tmag5170_ex.c **** //!                    input      | mT range value | mT range value
1257:Core/Src/tmag5170_ex.c **** //!              _________________|________________|________________
1258:Core/Src/tmag5170_ex.c **** //!                    0x00       |      50 mT     |     150 mT
1259:Core/Src/tmag5170_ex.c **** //!                    0x01       |      25 mT     |      75 mT
1260:Core/Src/tmag5170_ex.c **** //!                    0x02       |     100 mT     |     300 mT
1261:Core/Src/tmag5170_ex.c **** //****************************************************************************
1262:Core/Src/tmag5170_ex.c **** void setRanges( uint8_t x_range_bits, uint8_t y_range_bits, uint8_t z_range_bits )
1263:Core/Src/tmag5170_ex.c **** {
1264:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
1265:Core/Src/tmag5170_ex.c ****     // when the DATA_TYPE field (0x028-6) is not set to Normal Read Mode (000b)
1266:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS != DATA_TYPE_RESULTS_NormalMode ) return;
1267:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
1268:Core/Src/tmag5170_ex.c ****     if ( x_range_bits > 0x02 || y_range_bits > 0x02 || z_range_bits > 0x02 ) return;
1269:Core/Src/tmag5170_ex.c **** 
1270:Core/Src/tmag5170_ex.c ****     uint16_t input = normalReadRegister(SENSOR_CONFIG_ADDRESS) & ~(SENSOR_CONFIG_FULL_RANGE_MASK);
1271:Core/Src/tmag5170_ex.c ****     input |= (z_range_bits << 4) | (y_range_bits << 2) | x_range_bits;
1272:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
1273:Core/Src/tmag5170_ex.c **** }
1274:Core/Src/tmag5170_ex.c **** 
1275:Core/Src/tmag5170_ex.c **** 
1276:Core/Src/tmag5170_ex.c **** 
1277:Core/Src/tmag5170_ex.c **** 
1278:Core/Src/tmag5170_ex.c **** 
1279:Core/Src/tmag5170_ex.c **** //****************************************************************************
1280:Core/Src/tmag5170_ex.c **** //****************************************************************************
1281:Core/Src/tmag5170_ex.c **** //
1282:Core/Src/tmag5170_ex.c **** // Get Results/Measurement Functions (Normal Read Mode)
1283:Core/Src/tmag5170_ex.c **** //
1284:Core/Src/tmag5170_ex.c **** //****************************************************************************
1285:Core/Src/tmag5170_ex.c **** //****************************************************************************
1286:Core/Src/tmag5170_ex.c **** 
1287:Core/Src/tmag5170_ex.c **** 
1288:Core/Src/tmag5170_ex.c **** //****************************************************************************
1289:Core/Src/tmag5170_ex.c **** //! Get and return the *_CH_RESULT (or TEMP_RESULT for T) register for an axis/measurement
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 25


1290:Core/Src/tmag5170_ex.c **** //!
1291:Core/Src/tmag5170_ex.c **** //! These functions explicitly return the unsigned 16-bit register of their respective
1292:Core/Src/tmag5170_ex.c **** //! measurement address.
1293:Core/Src/tmag5170_ex.c **** //****************************************************************************
1294:Core/Src/tmag5170_ex.c **** 
1295:Core/Src/tmag5170_ex.c **** uint16_t getXresult() { return normalReadRegister(X_CH_RESULT_ADDRESS); }
1296:Core/Src/tmag5170_ex.c **** uint16_t getYresult() { return normalReadRegister(Y_CH_RESULT_ADDRESS); }
1297:Core/Src/tmag5170_ex.c **** uint16_t getZresult() { return normalReadRegister(Z_CH_RESULT_ADDRESS); }
1298:Core/Src/tmag5170_ex.c **** uint16_t getTEMPresult() { return normalReadRegister(TEMP_RESULT_ADDRESS); }
1299:Core/Src/tmag5170_ex.c **** uint16_t getANGLEresult() { return normalReadRegister(ANGLE_RESULT_ADDRESS); }
1300:Core/Src/tmag5170_ex.c **** uint16_t getMAGresult() { return normalReadRegister(MAGNITUDE_RESULT_ADDRESS); }
1301:Core/Src/tmag5170_ex.c **** // NOTE: These functions returned the unsigned integer corresponding to the register value
1302:Core/Src/tmag5170_ex.c **** //       for easier bit operations. To convert the unsigned using the equations used in the
1303:Core/Src/tmag5170_ex.c **** //       example code, it must be casted to an signed integer.
1304:Core/Src/tmag5170_ex.c **** 
1305:Core/Src/tmag5170_ex.c **** 
1306:Core/Src/tmag5170_ex.c **** 
1307:Core/Src/tmag5170_ex.c **** //****************************************************************************
1308:Core/Src/tmag5170_ex.c **** //! Get Magnetic Results Registers (Normal Read Mode)
1309:Core/Src/tmag5170_ex.c **** //!
1310:Core/Src/tmag5170_ex.c **** //! In 32-bit normal read mode:
1311:Core/Src/tmag5170_ex.c **** //! Takes in a size 3 array of int16_t values and assigns it the the
1312:Core/Src/tmag5170_ex.c **** //! three *_CH_RESULT registers. (order XYZ)
1313:Core/Src/tmag5170_ex.c **** //!
1314:Core/Src/tmag5170_ex.c **** //! INPUT ARRAY MUST BE OF LENGTH 3
1315:Core/Src/tmag5170_ex.c **** //!
1316:Core/Src/tmag5170_ex.c **** //! NOTE: The uint16_t variables returned by the get*result functions are casted
1317:Core/Src/tmag5170_ex.c **** //! into int16_t variables for use with the other provided functions that take
1318:Core/Src/tmag5170_ex.c **** //! signed integers.
1319:Core/Src/tmag5170_ex.c **** //!
1320:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
1321:Core/Src/tmag5170_ex.c **** //****************************************************************************
1322:Core/Src/tmag5170_ex.c **** void getMagResultsRegistersNrml( int16_t meas_arr[] )
1323:Core/Src/tmag5170_ex.c **** {
1324:Core/Src/tmag5170_ex.c ****     meas_arr[0] = (int16_t) getXresult();
1325:Core/Src/tmag5170_ex.c ****     meas_arr[1] = (int16_t) getYresult();
1326:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (int16_t) getZresult();
1327:Core/Src/tmag5170_ex.c **** }
1328:Core/Src/tmag5170_ex.c **** 
1329:Core/Src/tmag5170_ex.c **** 
1330:Core/Src/tmag5170_ex.c **** //****************************************************************************
1331:Core/Src/tmag5170_ex.c **** //! Get X-axis Magnetic Flux Measurement in mT
1332:Core/Src/tmag5170_ex.c **** //!
1333:Core/Src/tmag5170_ex.c **** //! Returns a float containing the mT magnetic flux measurement converted from the
1334:Core/Src/tmag5170_ex.c **** //! X_CH_RESULT register.
1335:Core/Src/tmag5170_ex.c **** //****************************************************************************
1336:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlX()
1337:Core/Src/tmag5170_ex.c **** {
1338:Core/Src/tmag5170_ex.c **** 
1339:Core/Src/tmag5170_ex.c ****     uint16_t range = getXrange();
1340:Core/Src/tmag5170_ex.c ****     int16_t data = getXresult(); // separate variable used to cast to a signed int
1341:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
1342:Core/Src/tmag5170_ex.c **** 
1343:Core/Src/tmag5170_ex.c ****     return (((float) data) / 32768) * range;
1344:Core/Src/tmag5170_ex.c **** }
1345:Core/Src/tmag5170_ex.c **** 
1346:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 26


1347:Core/Src/tmag5170_ex.c **** 
1348:Core/Src/tmag5170_ex.c **** //****************************************************************************
1349:Core/Src/tmag5170_ex.c **** //! Get Y-axis Magnetic Flux Measurement in mT
1350:Core/Src/tmag5170_ex.c **** //!
1351:Core/Src/tmag5170_ex.c **** //! Returns a float containing the mT magnetic flux measurement converted from the
1352:Core/Src/tmag5170_ex.c **** //! Y_CH_RESULT register.
1353:Core/Src/tmag5170_ex.c **** //****************************************************************************
1354:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlY()
1355:Core/Src/tmag5170_ex.c **** {
1356:Core/Src/tmag5170_ex.c **** 
1357:Core/Src/tmag5170_ex.c ****     uint16_t range = getYrange();
1358:Core/Src/tmag5170_ex.c ****     int16_t data = getYresult(); // separate variable used to cast to a signed int
1359:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
1360:Core/Src/tmag5170_ex.c **** 
1361:Core/Src/tmag5170_ex.c ****     return (((float) data) / 32768) * range;
1362:Core/Src/tmag5170_ex.c **** }
1363:Core/Src/tmag5170_ex.c **** 
1364:Core/Src/tmag5170_ex.c **** 
1365:Core/Src/tmag5170_ex.c **** 
1366:Core/Src/tmag5170_ex.c **** //****************************************************************************
1367:Core/Src/tmag5170_ex.c **** //! Get Z-axis Magnetic Flux Measurement in mT
1368:Core/Src/tmag5170_ex.c **** //!
1369:Core/Src/tmag5170_ex.c **** //! Returns a float containing the mT magnetic flux measurement converted from the
1370:Core/Src/tmag5170_ex.c **** //! Z_CH_RESULT register.
1371:Core/Src/tmag5170_ex.c **** //****************************************************************************
1372:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlZ()
1373:Core/Src/tmag5170_ex.c **** {
1374:Core/Src/tmag5170_ex.c **** 
1375:Core/Src/tmag5170_ex.c ****     uint16_t range = getZrange();
1376:Core/Src/tmag5170_ex.c ****     int16_t data = getZresult(); // separate variable used to cast to a signed int
1377:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
1378:Core/Src/tmag5170_ex.c **** 
1379:Core/Src/tmag5170_ex.c ****     return (((float) data) / 32768) * range;
1380:Core/Src/tmag5170_ex.c **** }
1381:Core/Src/tmag5170_ex.c **** 
1382:Core/Src/tmag5170_ex.c **** 
1383:Core/Src/tmag5170_ex.c **** 
1384:Core/Src/tmag5170_ex.c **** //****************************************************************************
1385:Core/Src/tmag5170_ex.c **** //! Get Temperature Measurement in degrees C (Normal Read Mode)
1386:Core/Src/tmag5170_ex.c **** //!
1387:Core/Src/tmag5170_ex.c **** //! Currently the 'Typical' Electrical Characteristics (ECHAR) of the device are set
1388:Core/Src/tmag5170_ex.c **** //! in the header file. If the device has been calibrated and different ECHAR values
1389:Core/Src/tmag5170_ex.c **** //! are found, please edit the ECHAR values in the header file for more accurate
1390:Core/Src/tmag5170_ex.c **** //! temperature measurement. The header file also contains more information on ECHAR values.
1391:Core/Src/tmag5170_ex.c **** //****************************************************************************
1392:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlTEMP()
1393:Core/Src/tmag5170_ex.c **** {
1394:Core/Src/tmag5170_ex.c ****     uint16_t tADC_T = getTEMPresult();
1395:Core/Src/tmag5170_ex.c **** 
1396:Core/Src/tmag5170_ex.c ****     float temp_val = ECHAR_T_SENS_T0 + ( ((((float) tADC_T) - ECHAR_T_ADC_T0)) / ECHAR_T_ADC_RES );
1397:Core/Src/tmag5170_ex.c ****     return temp_val;
1398:Core/Src/tmag5170_ex.c **** }
1399:Core/Src/tmag5170_ex.c **** 
1400:Core/Src/tmag5170_ex.c **** 
1401:Core/Src/tmag5170_ex.c **** 
1402:Core/Src/tmag5170_ex.c **** //****************************************************************************
1403:Core/Src/tmag5170_ex.c **** //! Get Internal Angle Measurement in Degrees
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 27


1404:Core/Src/tmag5170_ex.c **** //!
1405:Core/Src/tmag5170_ex.c **** //! Returns a float containing the degree value converted from the ANGLE_RESULT register.
1406:Core/Src/tmag5170_ex.c **** //! The value corresponds to the calculated angle created by the two magnetic flux axis
1407:Core/Src/tmag5170_ex.c **** //! measurements selected by the ANGLE_EN bits.
1408:Core/Src/tmag5170_ex.c **** //!
1409:Core/Src/tmag5170_ex.c **** //! For the angle to be properly measured, the two axes selected by ANGLE_EN must share the
1410:Core/Src/tmag5170_ex.c **** //! same selected range.
1411:Core/Src/tmag5170_ex.c **** //****************************************************************************
1412:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlANGLE()
1413:Core/Src/tmag5170_ex.c **** {
1414:Core/Src/tmag5170_ex.c ****     uint16_t data = getANGLEresult();
1415:Core/Src/tmag5170_ex.c ****     float angle = ( (float) data / 16  );
1416:Core/Src/tmag5170_ex.c ****     return angle;
1417:Core/Src/tmag5170_ex.c **** }
1418:Core/Src/tmag5170_ex.c **** 
1419:Core/Src/tmag5170_ex.c **** 
1420:Core/Src/tmag5170_ex.c **** 
1421:Core/Src/tmag5170_ex.c **** //****************************************************************************
1422:Core/Src/tmag5170_ex.c **** //! Get Internal Magnitude Measurement in mT
1423:Core/Src/tmag5170_ex.c **** //!
1424:Core/Src/tmag5170_ex.c **** //! Returns a float containing the mT value converted from the MAGNITUDE_RESULT register.
1425:Core/Src/tmag5170_ex.c **** //! The value corresponds to the calculated magnitude created by the two magnetic flux axis
1426:Core/Src/tmag5170_ex.c **** //! measurements selected by the ANGLE_EN bits.
1427:Core/Src/tmag5170_ex.c **** //!
1428:Core/Src/tmag5170_ex.c **** //! For the magnitude to be properly measured, the two axes selected by ANGLE_EN must share the
1429:Core/Src/tmag5170_ex.c **** //! same selected range.
1430:Core/Src/tmag5170_ex.c **** //****************************************************************************
1431:Core/Src/tmag5170_ex.c **** float getMeasurementNrmlMAG()
1432:Core/Src/tmag5170_ex.c **** {
1433:Core/Src/tmag5170_ex.c ****     uint16_t data = getMAGresult();
1434:Core/Src/tmag5170_ex.c ****     // TODO: verify magnitude correlates with expected
1435:Core/Src/tmag5170_ex.c ****     float magnitude = (((float) data)/8192) * getMAGrange() * 4;
1436:Core/Src/tmag5170_ex.c ****     return magnitude;
1437:Core/Src/tmag5170_ex.c **** 
1438:Core/Src/tmag5170_ex.c **** }
1439:Core/Src/tmag5170_ex.c **** 
1440:Core/Src/tmag5170_ex.c **** 
1441:Core/Src/tmag5170_ex.c **** 
1442:Core/Src/tmag5170_ex.c **** //****************************************************************************
1443:Core/Src/tmag5170_ex.c **** //! Get Magnetic Measurements in mT (Normal Read Mode)
1444:Core/Src/tmag5170_ex.c **** //!
1445:Core/Src/tmag5170_ex.c **** //! In 32-bit normal read mode:
1446:Core/Src/tmag5170_ex.c **** //! Takes in a size 3 array of floats and updates its measurements of the
1447:Core/Src/tmag5170_ex.c **** //! three magnetic axes in mT. (order XYZ)
1448:Core/Src/tmag5170_ex.c **** //!
1449:Core/Src/tmag5170_ex.c **** //! INPUT ARRAY MUST BE SIZE 3 (or at least have meas_arr to meas_arr + 2 within scope)
1450:Core/Src/tmag5170_ex.c **** //!
1451:Core/Src/tmag5170_ex.c **** //! DOES NOT WORK IN SPECIAL READ MODE [DATA_TYPE field at 0x028-6 does not equal 000b]
1452:Core/Src/tmag5170_ex.c **** //****************************************************************************
1453:Core/Src/tmag5170_ex.c **** void getMagMeasurementsNrml( float meas_arr[] )
1454:Core/Src/tmag5170_ex.c **** {
1455:Core/Src/tmag5170_ex.c **** 
1456:Core/Src/tmag5170_ex.c ****     uint8_t i;
1457:Core/Src/tmag5170_ex.c **** 
1458:Core/Src/tmag5170_ex.c ****     // Array to store ranges for coordinates in the order XYZ
1459:Core/Src/tmag5170_ex.c ****     uint16_t ranges[3] = {50,50,50}; // The default value for coordinate ranges is 50 mT (A1)
1460:Core/Src/tmag5170_ex.c ****     ranges[0] = getXrange();
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 28


1461:Core/Src/tmag5170_ex.c ****     ranges[1] = getYrange();
1462:Core/Src/tmag5170_ex.c ****     ranges[2] = getZrange();
1463:Core/Src/tmag5170_ex.c **** 
1464:Core/Src/tmag5170_ex.c ****     int16_t data;
1465:Core/Src/tmag5170_ex.c **** 
1466:Core/Src/tmag5170_ex.c ****     for (i=0; i<3; ++i)
1467:Core/Src/tmag5170_ex.c ****     {
1468:Core/Src/tmag5170_ex.c ****         data = normalReadRegister(X_CH_RESULT_ADDRESS + i); // read in
1469:Core/Src/tmag5170_ex.c ****         meas_arr[i] = (((float) data) / 32768) * ranges[i];
1470:Core/Src/tmag5170_ex.c ****     }
1471:Core/Src/tmag5170_ex.c **** }
1472:Core/Src/tmag5170_ex.c **** 
1473:Core/Src/tmag5170_ex.c **** 
1474:Core/Src/tmag5170_ex.c **** 
1475:Core/Src/tmag5170_ex.c **** 
1476:Core/Src/tmag5170_ex.c **** 
1477:Core/Src/tmag5170_ex.c **** //****************************************************************************
1478:Core/Src/tmag5170_ex.c **** //****************************************************************************
1479:Core/Src/tmag5170_ex.c **** //
1480:Core/Src/tmag5170_ex.c **** // Get Range Functions
1481:Core/Src/tmag5170_ex.c **** //
1482:Core/Src/tmag5170_ex.c **** //****************************************************************************
1483:Core/Src/tmag5170_ex.c **** //****************************************************************************
1484:Core/Src/tmag5170_ex.c **** 
1485:Core/Src/tmag5170_ex.c **** 
1486:Core/Src/tmag5170_ex.c **** //****************************************************************************
1487:Core/Src/tmag5170_ex.c **** //! Get and return the integer value of the X_RANGE bits for an axis
1488:Core/Src/tmag5170_ex.c **** //!
1489:Core/Src/tmag5170_ex.c **** //! Returns an unsigned 16-bit integer value of the X axis range in mT.
1490:Core/Src/tmag5170_ex.c **** //****************************************************************************
1491:Core/Src/tmag5170_ex.c **** uint16_t getXrange()
1492:Core/Src/tmag5170_ex.c **** {
1493:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate X_RANGE bits.
1494:Core/Src/tmag5170_ex.c ****     uint16_t config = normalReadRegister(SENSOR_CONFIG_ADDRESS) & SENSOR_CONFIG_X_RANGE_MASK;
1495:Core/Src/tmag5170_ex.c ****     uint16_t range;
1496:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
1497:Core/Src/tmag5170_ex.c ****     {
1498:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A2
1499:Core/Src/tmag5170_ex.c ****         range = 150;
1500:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
1501:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
1502:Core/Src/tmag5170_ex.c ****     }
1503:Core/Src/tmag5170_ex.c ****     else
1504:Core/Src/tmag5170_ex.c ****     {
1505:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A1
1506:Core/Src/tmag5170_ex.c ****         range = 50;
1507:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
1508:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
1509:Core/Src/tmag5170_ex.c ****     }
1510:Core/Src/tmag5170_ex.c ****     return range;
1511:Core/Src/tmag5170_ex.c **** }
1512:Core/Src/tmag5170_ex.c **** 
1513:Core/Src/tmag5170_ex.c **** 
1514:Core/Src/tmag5170_ex.c **** //****************************************************************************
1515:Core/Src/tmag5170_ex.c **** //! Get and return the integer value of the Y_RANGE bits for an axis
1516:Core/Src/tmag5170_ex.c **** //!
1517:Core/Src/tmag5170_ex.c **** //! Returns an unsigned 16-bit integer value of the Y axis range in mT.
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 29


1518:Core/Src/tmag5170_ex.c **** //****************************************************************************
1519:Core/Src/tmag5170_ex.c **** uint16_t getYrange()
1520:Core/Src/tmag5170_ex.c **** {
1521:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate Y_RANGE bits, shifting them to LSB.
1522:Core/Src/tmag5170_ex.c ****     uint16_t config = normalReadRegister(SENSOR_CONFIG_ADDRESS) & SENSOR_CONFIG_Y_RANGE_MASK >> 2;
1523:Core/Src/tmag5170_ex.c ****     uint16_t range;
1524:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
1525:Core/Src/tmag5170_ex.c ****     {
1526:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A2
1527:Core/Src/tmag5170_ex.c ****         range = 150;
1528:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
1529:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
1530:Core/Src/tmag5170_ex.c ****     }
1531:Core/Src/tmag5170_ex.c ****     else
1532:Core/Src/tmag5170_ex.c ****     {
1533:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A1
1534:Core/Src/tmag5170_ex.c ****         range = 50;
1535:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
1536:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
1537:Core/Src/tmag5170_ex.c ****     }
1538:Core/Src/tmag5170_ex.c ****     return range;
1539:Core/Src/tmag5170_ex.c **** }
1540:Core/Src/tmag5170_ex.c **** 
1541:Core/Src/tmag5170_ex.c **** 
1542:Core/Src/tmag5170_ex.c **** //****************************************************************************
1543:Core/Src/tmag5170_ex.c **** //! Get and return the integer value of the Z_RANGE bits for an axis
1544:Core/Src/tmag5170_ex.c **** //!
1545:Core/Src/tmag5170_ex.c **** //! Returns an unsigned 16-bit integer value of the Z axis range in mT.
1546:Core/Src/tmag5170_ex.c **** //****************************************************************************
1547:Core/Src/tmag5170_ex.c **** uint16_t getZrange()
1548:Core/Src/tmag5170_ex.c **** {
1549:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate Z_RANGE bits, shifting them to LSB.
1550:Core/Src/tmag5170_ex.c ****     uint16_t config = normalReadRegister(SENSOR_CONFIG_ADDRESS) & SENSOR_CONFIG_Z_RANGE_MASK >> 4;
1551:Core/Src/tmag5170_ex.c ****     uint16_t range;
1552:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
1553:Core/Src/tmag5170_ex.c ****     {
1554:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A2
1555:Core/Src/tmag5170_ex.c ****         range = 150;
1556:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
1557:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
1558:Core/Src/tmag5170_ex.c ****     }
1559:Core/Src/tmag5170_ex.c ****     else
1560:Core/Src/tmag5170_ex.c ****     {
1561:Core/Src/tmag5170_ex.c ****         // range values for TMAG5170A1
1562:Core/Src/tmag5170_ex.c ****         range = 50;
1563:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
1564:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
1565:Core/Src/tmag5170_ex.c ****     }
1566:Core/Src/tmag5170_ex.c ****     return range;
1567:Core/Src/tmag5170_ex.c **** }
1568:Core/Src/tmag5170_ex.c **** 
1569:Core/Src/tmag5170_ex.c **** 
1570:Core/Src/tmag5170_ex.c **** 
1571:Core/Src/tmag5170_ex.c **** //****************************************************************************
1572:Core/Src/tmag5170_ex.c **** //! Get Range used for Magnitude register mT conversion
1573:Core/Src/tmag5170_ex.c **** //!
1574:Core/Src/tmag5170_ex.c **** //! Returns the range selected by the first ANGLE_EN axis. For proper use of the magnitude register
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 30


1575:Core/Src/tmag5170_ex.c **** //! both of the ANGLE_EN axes must share the same range.
1576:Core/Src/tmag5170_ex.c **** //!
1577:Core/Src/tmag5170_ex.c **** //! If ANGLE_EN is disabled the function will still return the X-axis range.
1578:Core/Src/tmag5170_ex.c **** //****************************************************************************
1579:Core/Src/tmag5170_ex.c **** uint16_t getMAGrange()
1580:Core/Src/tmag5170_ex.c **** {
1581:Core/Src/tmag5170_ex.c ****     uint16_t angle_en = normalReadRegister(SENSOR_CONFIG_ADDRESS) & SENSOR_CONFIG_ANGLE_EN_MASK;
1582:Core/Src/tmag5170_ex.c ****     if ( angle_en == SENSOR_CONFIG_ANGLE_EN_YZ ) return getYrange();
1583:Core/Src/tmag5170_ex.c ****     else return getXrange();
1584:Core/Src/tmag5170_ex.c **** }
1585:Core/Src/tmag5170_ex.c **** 
1586:Core/Src/tmag5170_ex.c **** 
1587:Core/Src/tmag5170_ex.c **** 
1588:Core/Src/tmag5170_ex.c **** //****************************************************************************
1589:Core/Src/tmag5170_ex.c **** //****************************************************************************
1590:Core/Src/tmag5170_ex.c **** //
1591:Core/Src/tmag5170_ex.c **** // Get Device Info Functions
1592:Core/Src/tmag5170_ex.c **** //
1593:Core/Src/tmag5170_ex.c **** //****************************************************************************
1594:Core/Src/tmag5170_ex.c **** //****************************************************************************
1595:Core/Src/tmag5170_ex.c **** 
1596:Core/Src/tmag5170_ex.c **** 
1597:Core/Src/tmag5170_ex.c **** //****************************************************************************
1598:Core/Src/tmag5170_ex.c **** //! Get TMAG5170 Version (A1 or A2)
1599:Core/Src/tmag5170_ex.c **** //!
1600:Core/Src/tmag5170_ex.c **** //! Sends a read command for TEST_CONFIG and returns the VER field bit.
1601:Core/Src/tmag5170_ex.c **** //!      VER == 0b --> TMAG5170A1    |    VER == 1b --> TMAG5170A2
1602:Core/Src/tmag5170_ex.c **** //****************************************************************************
1603:Core/Src/tmag5170_ex.c **** uint8_t getVersion()
1604:Core/Src/tmag5170_ex.c **** { return (normalReadRegister(TEST_CONFIG_ADDRESS) & TEST_CONFIG_VER_MASK) >> 4; }
1605:Core/Src/tmag5170_ex.c **** 
1606:Core/Src/tmag5170_ex.c **** 
1607:Core/Src/tmag5170_ex.c **** //****************************************************************************
1608:Core/Src/tmag5170_ex.c **** //! Check if CRC is enabled
1609:Core/Src/tmag5170_ex.c **** //!
1610:Core/Src/tmag5170_ex.c **** //! Sends a read command for TEST_CONFIG and returns the whether the CRC_DIS field
1611:Core/Src/tmag5170_ex.c **** //! corresponds to an enabled CRC or not. (1b == enabled)
1612:Core/Src/tmag5170_ex.c **** //****************************************************************************
1613:Core/Src/tmag5170_ex.c **** uint8_t isCRCenabled()
1614:Core/Src/tmag5170_ex.c **** {
1615:Core/Src/tmag5170_ex.c ****     return ((normalReadRegister(TEST_CONFIG_ADDRESS) & TEST_CONFIG_CRC_DIS_MASK) >> 2) == 0;
1616:Core/Src/tmag5170_ex.c **** }
1617:Core/Src/tmag5170_ex.c **** 
1618:Core/Src/tmag5170_ex.c **** 
1619:Core/Src/tmag5170_ex.c **** 
1620:Core/Src/tmag5170_ex.c **** 
1621:Core/Src/tmag5170_ex.c **** 
1622:Core/Src/tmag5170_ex.c **** //****************************************************************************
1623:Core/Src/tmag5170_ex.c **** //****************************************************************************
1624:Core/Src/tmag5170_ex.c **** //
1625:Core/Src/tmag5170_ex.c **** // Offset and Gain Correction Functions
1626:Core/Src/tmag5170_ex.c **** //
1627:Core/Src/tmag5170_ex.c **** //****************************************************************************
1628:Core/Src/tmag5170_ex.c **** //****************************************************************************
1629:Core/Src/tmag5170_ex.c **** 
1630:Core/Src/tmag5170_ex.c **** 
1631:Core/Src/tmag5170_ex.c **** //****************************************************************************
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 31


1632:Core/Src/tmag5170_ex.c **** //! Set Magnetic Sensor Offset Correction (7-Bit inputs)
1633:Core/Src/tmag5170_ex.c **** //! Configures the MAG_OFFSET_CONFIG (0x12) according to input values (check datasheet pg. 44)
1634:Core/Src/tmag5170_ex.c **** //!
1635:Core/Src/tmag5170_ex.c **** //! Keep in mind the axes that offset1 and offset2 are applied to depend on ANGLE_EN (0x01F-E)
1636:Core/Src/tmag5170_ex.c **** //!              ANGLE_EN value | offset1 axis | offset2 axis
1637:Core/Src/tmag5170_ex.c **** //!                   0x00            none           none
1638:Core/Src/tmag5170_ex.c **** //!                   0x01              X              Y
1639:Core/Src/tmag5170_ex.c **** //!                   0x02              Y              Z
1640:Core/Src/tmag5170_ex.c **** //!                   0x03              X              Z
1641:Core/Src/tmag5170_ex.c **** //!
1642:Core/Src/tmag5170_ex.c **** //! offset_select - 2-bit setting for OFFSET_SELECTION (0x12F-E) [must be no greater than 0x03]
1643:Core/Src/tmag5170_ex.c **** //! offset1_bits - 7-bit setting for OFFSET_VALUE1 (0x12D-7) [must be no greater than 0x7F]
1644:Core/Src/tmag5170_ex.c **** //! offset2_bits - 7-bit setting for OFFSET_VALUE2 (0x126-0) [must be no greater than 0x7F]
1645:Core/Src/tmag5170_ex.c **** //!
1646:Core/Src/tmag5170_ex.c **** //! Conversion between MAG_OFFSET_CONFIG register and actual offset deltas is on datasheet pgs. 26 
1647:Core/Src/tmag5170_ex.c **** //****************************************************************************
1648:Core/Src/tmag5170_ex.c **** void setMagOffsetIn7Bit( uint8_t offset_select, uint8_t offset1_bits , uint8_t offset2_bits )
1649:Core/Src/tmag5170_ex.c **** {
1650:Core/Src/tmag5170_ex.c ****     if (offset_select > 0x03 || offset1_bits > 0x7F || offset2_bits > 0x7F) return;
1651:Core/Src/tmag5170_ex.c **** 
1652:Core/Src/tmag5170_ex.c ****     uint16_t input;
1653:Core/Src/tmag5170_ex.c ****     // MAG_OFFSET_CONFIG (0x12) has all 16 bits assigned according to the three input variables
1654:Core/Src/tmag5170_ex.c ****     input = offset_select << 14 | offset1_bits << 7 | offset2_bits;
1655:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
1656:Core/Src/tmag5170_ex.c **** }
1657:Core/Src/tmag5170_ex.c **** 
1658:Core/Src/tmag5170_ex.c **** 
1659:Core/Src/tmag5170_ex.c **** 
1660:Core/Src/tmag5170_ex.c **** //****************************************************************************
1661:Core/Src/tmag5170_ex.c **** //! Set Magnetic Sensor Offset Correction (mT inputs)
1662:Core/Src/tmag5170_ex.c **** //! Configures the MAG_OFFSET_CONFIG (0x12) according to input values (check datasheet pg. 44)
1663:Core/Src/tmag5170_ex.c **** //!
1664:Core/Src/tmag5170_ex.c **** //! Keep in mind the axes that offset1 and offset2 are applied to depend on ANGLE_EN (0x01F-E)
1665:Core/Src/tmag5170_ex.c **** //!              ANGLE_EN value | offset1 axis | offset2 axis
1666:Core/Src/tmag5170_ex.c **** //!                   0x00            none           none
1667:Core/Src/tmag5170_ex.c **** //!                   0x01              X              Y
1668:Core/Src/tmag5170_ex.c **** //!                   0x02              Y              Z
1669:Core/Src/tmag5170_ex.c **** //!                   0x03              X              Z
1670:Core/Src/tmag5170_ex.c **** //!
1671:Core/Src/tmag5170_ex.c **** //! offset_select - setting for OFFSET_SELECTION (0x12F-E) [must be no greater than 0x03]
1672:Core/Src/tmag5170_ex.c **** //! offset1_delta - mT value of offset shift for the selected offset1 axis
1673:Core/Src/tmag5170_ex.c **** //! offset2_delta - mT value of offset shift for the selected offset2 axis
1674:Core/Src/tmag5170_ex.c **** //! (an axis with a +2mT error should have a -2mT value entered into its offset variable)
1675:Core/Src/tmag5170_ex.c **** //!
1676:Core/Src/tmag5170_ex.c **** //! Valid offset values for each possible range setting:
1677:Core/Src/tmag5170_ex.c **** //!          SET AXIS RANGE   |  VALID OFFSET VALUES RANGE  (mT)
1678:Core/Src/tmag5170_ex.c **** //!            25 mT (A1)               -0.78 to 0.76
1679:Core/Src/tmag5170_ex.c **** //!            50 mT (A1)               -1.56 to 1.53
1680:Core/Src/tmag5170_ex.c **** //!            75 mT (A2)               -2.34 to 2.30
1681:Core/Src/tmag5170_ex.c **** //!           100 mT (A1)               -3.12 to 3.07
1682:Core/Src/tmag5170_ex.c **** //!           150 mT (A2)               -4.68 to 4.61
1683:Core/Src/tmag5170_ex.c **** //!           300 mT (A2)               -9.37 to 9.22
1684:Core/Src/tmag5170_ex.c **** //!
1685:Core/Src/tmag5170_ex.c **** //! (valid values were rounded to the hundredths place closer to zero to prevent including invalid
1686:Core/Src/tmag5170_ex.c **** //! values in the range, the exact corresponding offset based on the MAG_OFFSET_CONFIG register can
1687:Core/Src/tmag5170_ex.c **** //! calculated using the eqns. provided on datasheet pgs. 26 and 27)
1688:Core/Src/tmag5170_ex.c **** //****************************************************************************
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 32


1689:Core/Src/tmag5170_ex.c **** void setMagOffsetInmT( uint8_t offset_select, float offset1_delta , float offset2_delta )
1690:Core/Src/tmag5170_ex.c **** {
1691:Core/Src/tmag5170_ex.c **** 
1692:Core/Src/tmag5170_ex.c ****     uint16_t delta1_range = 0;
1693:Core/Src/tmag5170_ex.c ****     uint16_t delta2_range = 0;
1694:Core/Src/tmag5170_ex.c ****     switch ( offset_select )
1695:Core/Src/tmag5170_ex.c ****     {
1696:Core/Src/tmag5170_ex.c ****         case 0x01 :
1697:Core/Src/tmag5170_ex.c ****             delta1_range = getXrange();
1698:Core/Src/tmag5170_ex.c ****             delta2_range = getYrange();
1699:Core/Src/tmag5170_ex.c ****         case 0x02 :
1700:Core/Src/tmag5170_ex.c ****             delta1_range = getYrange();
1701:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
1702:Core/Src/tmag5170_ex.c ****         case 0x03 :
1703:Core/Src/tmag5170_ex.c ****             delta1_range = getXrange();
1704:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
1705:Core/Src/tmag5170_ex.c ****     }
1706:Core/Src/tmag5170_ex.c **** 
1707:Core/Src/tmag5170_ex.c ****     // take the rounded inverse of the eqn to get the signed 8-bit int value for
1708:Core/Src/tmag5170_ex.c ****     // the desired offset and then convert that to 7-bits to send to the device
1709:Core/Src/tmag5170_ex.c ****     // (the 7-bit value is put in the 7 LSBs of an 8-bit unsigned int)
1710:Core/Src/tmag5170_ex.c ****     int8_t offset1_value = round( (offset1_delta * 2048) / delta1_range );
1711:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
1712:Core/Src/tmag5170_ex.c **** 
1713:Core/Src/tmag5170_ex.c ****     uint8_t offset1_bits = ( (uint8_t) offset1_value ) & 0x3F ; // assign the 6 LSBs
1714:Core/Src/tmag5170_ex.c ****     offset1_bits = (( (uint8_t) offset1_value ) & 0x80) >> 1; // shift signing bit to 7th LSB
1715:Core/Src/tmag5170_ex.c ****     uint8_t offset2_bits = ( (uint8_t) offset2_value ) & 0x3F ;
1716:Core/Src/tmag5170_ex.c ****     offset2_bits = (( (uint8_t) offset2_value ) & 0x80) >> 1;
1717:Core/Src/tmag5170_ex.c **** 
1718:Core/Src/tmag5170_ex.c ****     setMagOffsetIn7Bit(offset_select, offset1_bits, offset2_bits);
1719:Core/Src/tmag5170_ex.c **** }
1720:Core/Src/tmag5170_ex.c **** 
1721:Core/Src/tmag5170_ex.c **** 
1722:Core/Src/tmag5170_ex.c **** 
1723:Core/Src/tmag5170_ex.c **** //****************************************************************************
1724:Core/Src/tmag5170_ex.c **** //! Set Magnetic Gain Adjustment using 11-bit input
1725:Core/Src/tmag5170_ex.c **** //! Configures the MAG_GAIN_CONFIG (0x11) according to 11-bit input value
1726:Core/Src/tmag5170_ex.c **** //! (check datasheet pg. 43 for conversion)
1727:Core/Src/tmag5170_ex.c **** //!
1728:Core/Src/tmag5170_ex.c **** //! axis - selection of a particular axis for amplitude correction (must be no greater than 0x03)
1729:Core/Src/tmag5170_ex.c **** //!        0x00 - none | 0x01 - X | 0x02 - Y | 0x03 - Z
1730:Core/Src/tmag5170_ex.c **** //! gain_bits - 11-bit gain value to adjust selected axis value (must be no greater than 0x07FF)
1731:Core/Src/tmag5170_ex.c **** //!             gain calculated as (entered_value/1024)
1732:Core/Src/tmag5170_ex.c **** //****************************************************************************
1733:Core/Src/tmag5170_ex.c **** void setMagGainConfigIn11Bit( uint8_t axis, uint16_t gain_bits )
1734:Core/Src/tmag5170_ex.c **** {
1735:Core/Src/tmag5170_ex.c ****     if (axis > 0x03 || gain_bits > 0x07FF) return;
1736:Core/Src/tmag5170_ex.c ****     uint16_t input;
1737:Core/Src/tmag5170_ex.c ****     // MAG_OFFSET_CONFIG (0x11) has all 16 bits assigned according to the three input variables
1738:Core/Src/tmag5170_ex.c ****     input = axis << 14 | gain_bits;
1739:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
1740:Core/Src/tmag5170_ex.c **** }
1741:Core/Src/tmag5170_ex.c **** 
1742:Core/Src/tmag5170_ex.c **** 
1743:Core/Src/tmag5170_ex.c **** 
1744:Core/Src/tmag5170_ex.c **** //****************************************************************************
1745:Core/Src/tmag5170_ex.c **** //! Set Magnetic Gain Adjustment using decimal input
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 33


1746:Core/Src/tmag5170_ex.c **** //! Configures the MAG_GAIN_CONFIG (0x11) according to decimal input values from
1747:Core/Src/tmag5170_ex.c **** //! 0 to 2 (exclusive)
1748:Core/Src/tmag5170_ex.c **** //!
1749:Core/Src/tmag5170_ex.c **** //! axis - selection of a particular axis for amplitude correction (must be no greater than 0x03)
1750:Core/Src/tmag5170_ex.c **** //!        0x00 - none | 0x01 - X | 0x02 - Y | 0x03 - Z
1751:Core/Src/tmag5170_ex.c **** //! gain_value - float input of the desired gain value from 0 to 2 (exclusive) to
1752:Core/Src/tmag5170_ex.c **** //!              be assigned with the selected axis
1753:Core/Src/tmag5170_ex.c **** //****************************************************************************
1754:Core/Src/tmag5170_ex.c **** // takes in a value from 0 to 2 (exclusive) and sets the gain config according to it
1755:Core/Src/tmag5170_ex.c **** void setMagGainConfigInDecimal( uint8_t axis, float gain_value )
1756:Core/Src/tmag5170_ex.c **** {
1757:Core/Src/tmag5170_ex.c ****     if ( gain_value < 0 || gain_value >= 2 ) return;
1758:Core/Src/tmag5170_ex.c ****     uint16_t gain_bits = floor(gain_value * 1024);
1759:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
1760:Core/Src/tmag5170_ex.c **** }
1761:Core/Src/tmag5170_ex.c **** 
1762:Core/Src/tmag5170_ex.c **** 
1763:Core/Src/tmag5170_ex.c **** 
1764:Core/Src/tmag5170_ex.c **** 
1765:Core/Src/tmag5170_ex.c **** 
1766:Core/Src/tmag5170_ex.c **** //****************************************************************************
1767:Core/Src/tmag5170_ex.c **** //! Special 32-bit Data Read Functions (DATA_TYPE != 000b)
1768:Core/Src/tmag5170_ex.c **** //!
1769:Core/Src/tmag5170_ex.c **** //! !! IMPORTANT INFORMATION ON USING THE SPECIAL READ SETTINGS !!
1770:Core/Src/tmag5170_ex.c **** //!
1771:Core/Src/tmag5170_ex.c **** //! When the DATA_TYPE field (0x028-6) is not set to 0x00 (000b) the device
1772:Core/Src/tmag5170_ex.c **** //! changes its register READ response to a special 32-bit dataline that sends
1773:Core/Src/tmag5170_ex.c **** //! the 12 MSBs of two selected measurement values at the cost of not being
1774:Core/Src/tmag5170_ex.c **** //! able to send full registers in response to a READ command.
1775:Core/Src/tmag5170_ex.c **** //!
1776:Core/Src/tmag5170_ex.c **** //! ANY READ COMMAND SENT BY SPI TO THE DEVICE IN SPECIAL READ MODE WILL NOT
1777:Core/Src/tmag5170_ex.c **** //! HAVE THE DESIRED ADDRESS RETURNED!
1778:Core/Src/tmag5170_ex.c **** //!
1779:Core/Src/tmag5170_ex.c **** //! Because of this, the DATA_TYPE field must at least be stored locally by
1780:Core/Src/tmag5170_ex.c **** //! whatever controller used for the device to use Special Read in an effective manner.
1781:Core/Src/tmag5170_ex.c **** //! This example code stores the entire SYSTEM_CONFIG register so that DATA_TYPE
1782:Core/Src/tmag5170_ex.c **** //! can be written back to 0x00 without altering any other SYSTEM_CONFIG settings.
1783:Core/Src/tmag5170_ex.c **** //!
1784:Core/Src/tmag5170_ex.c **** //! The settings for DATA_TYPE and the measurement values that are returned in
1785:Core/Src/tmag5170_ex.c **** //! the special dataline are as follows:
1786:Core/Src/tmag5170_ex.c **** //!
1787:Core/Src/tmag5170_ex.c **** //!              DATA_TYPE value | channel 1 value | channel 2 value
1788:Core/Src/tmag5170_ex.c **** //!                   0x00          default 32-bit register access
1789:Core/Src/tmag5170_ex.c **** //!                   0x01                X                Y
1790:Core/Src/tmag5170_ex.c **** //!                   0x02                X                Z
1791:Core/Src/tmag5170_ex.c **** //!                   0x03                Z                Y
1792:Core/Src/tmag5170_ex.c **** //!                   0x04                X           temperature
1793:Core/Src/tmag5170_ex.c **** //!                   0x05                Y           temperature
1794:Core/Src/tmag5170_ex.c **** //!                   0x06                Z           temperature
1795:Core/Src/tmag5170_ex.c **** //!                   0x07              angle          magnitude
1796:Core/Src/tmag5170_ex.c **** //****************************************************************************
1797:Core/Src/tmag5170_ex.c **** 
1798:Core/Src/tmag5170_ex.c **** //****************************************************************************
1799:Core/Src/tmag5170_ex.c **** //! DATA_TYPE (0x028-6) setter function
1800:Core/Src/tmag5170_ex.c **** //! This function takes in an input from 0x00 to 0x07 to set the DATA_TYPE field to.
1801:Core/Src/tmag5170_ex.c **** //! The associated measurements sent by the special read are shown above.
1802:Core/Src/tmag5170_ex.c **** //!
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 34


1803:Core/Src/tmag5170_ex.c **** //! This function uses SYSTEM_CONFIG_stored variable to change SYSTEM_CONFIG
1804:Core/Src/tmag5170_ex.c **** //! without a read command.
1805:Core/Src/tmag5170_ex.c **** //!
1806:Core/Src/tmag5170_ex.c **** //! THE STARTUP FUNCTION MUST BE USED AT THE START OF AN IMPLEMENTATION TO PREVENT
1807:Core/Src/tmag5170_ex.c **** //! ANY UNWANTED BEHAVIOR ON THE DATA_TYPE WRITE.
1808:Core/Src/tmag5170_ex.c **** //****************************************************************************
1809:Core/Src/tmag5170_ex.c **** void setDATATYPE( uint8_t data_type_bits )
1810:Core/Src/tmag5170_ex.c **** {
1811:Core/Src/tmag5170_ex.c ****     uint16_t input = SYSTEM_CONFIG_stored;
1812:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_DATA_TYPE_MASK);
1813:Core/Src/tmag5170_ex.c ****     input |= data_type_bits << 6;
1814:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
1815:Core/Src/tmag5170_ex.c **** }
1816:Core/Src/tmag5170_ex.c **** 
1817:Core/Src/tmag5170_ex.c **** 
1818:Core/Src/tmag5170_ex.c **** //****************************************************************************
1819:Core/Src/tmag5170_ex.c **** //! Get Special Read Mode (DATA_TYPE != 000b) Values in Specified Units
1820:Core/Src/tmag5170_ex.c **** //!
1821:Core/Src/tmag5170_ex.c **** //! Takes in measurement array of length 3 and converts the received channel
1822:Core/Src/tmag5170_ex.c **** //! measurements according to the DATA_TYPE field value.
1823:Core/Src/tmag5170_ex.c **** //!
1824:Core/Src/tmag5170_ex.c **** //! The DATA_TYPE field value will be put into
1825:Core/Src/tmag5170_ex.c **** //!
1826:Core/Src/tmag5170_ex.c **** //!      DATA_TYPE value | CH1 measurement + unit | CH2 measurement + unit
1827:Core/Src/tmag5170_ex.c **** //!           0x01                 X + mT                   Y + mT
1828:Core/Src/tmag5170_ex.c **** //!           0x02                 X + mT                   Z + mT
1829:Core/Src/tmag5170_ex.c **** //!           0x03                 Z + mT                   Y + mT
1830:Core/Src/tmag5170_ex.c **** //!           0x04                 X + mT           temperature + Celsius
1831:Core/Src/tmag5170_ex.c **** //!           0x05                 Y + mT           temperature + Celsius
1832:Core/Src/tmag5170_ex.c **** //!           0x06                 Z + mT           temperature + Celsius
1833:Core/Src/tmag5170_ex.c **** //!           0x07             angle + degrees        magnitude + mT
1834:Core/Src/tmag5170_ex.c **** //****************************************************************************
1835:Core/Src/tmag5170_ex.c **** void getMeasurementsSpcl( float meas_arr[] )
1836:Core/Src/tmag5170_ex.c **** {
1837:Core/Src/tmag5170_ex.c ****     uint16_t output[3] = { 0 };
1838:Core/Src/tmag5170_ex.c ****     specialRead( output, 0x00 );
1839:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (float) DATA_TYPE_RESULTS;
1840:Core/Src/tmag5170_ex.c **** 
1841:Core/Src/tmag5170_ex.c ****     if ( DATA_TYPE_RESULTS <= DATA_TYPE_RESULTS_SpecialMode_YZ )
1842:Core/Src/tmag5170_ex.c ****     {
1843:Core/Src/tmag5170_ex.c ****         meas_arr[0] = (output[0] >> 11) * -2048;
1844:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
1845:Core/Src/tmag5170_ex.c ****     }
1846:Core/Src/tmag5170_ex.c ****     else if ( DATA_TYPE_RESULTS <= DATA_TYPE_RESULTS_SpecialMode_ZT )
1847:Core/Src/tmag5170_ex.c ****     {
1848:Core/Src/tmag5170_ex.c ****         meas_arr[0] = (output[0] >> 11) * -2048;
1849:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
1850:Core/Src/tmag5170_ex.c ****     }
1851:Core/Src/tmag5170_ex.c **** 
1852:Core/Src/tmag5170_ex.c ****     switch ( DATA_TYPE_RESULTS )
1853:Core/Src/tmag5170_ex.c ****     {
1854:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_XY :
1855:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getXrange());
1856:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
1857:Core/Src/tmag5170_ex.c ****             break;
1858:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_XZ :
1859:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getXrange());
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 35


1860:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
1861:Core/Src/tmag5170_ex.c ****             break;
1862:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_YZ :
1863:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getZrange());
1864:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
1865:Core/Src/tmag5170_ex.c ****             break;
1866:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_XT :
1867:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getXrange());
1868:Core/Src/tmag5170_ex.c ****             break;
1869:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_YT :
1870:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getYrange());
1871:Core/Src/tmag5170_ex.c ****             break;
1872:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_ZT :
1873:Core/Src/tmag5170_ex.c ****             meas_arr[0] *= ((((float) (meas_arr[0] + output[0])) / 2048) * getZrange());
1874:Core/Src/tmag5170_ex.c ****             break;
1875:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_AM :
1876:Core/Src/tmag5170_ex.c ****             meas_arr[0] = (float) output[0] / 8 ;
1877:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
1878:Core/Src/tmag5170_ex.c ****             break;
1879:Core/Src/tmag5170_ex.c ****     }
1880:Core/Src/tmag5170_ex.c **** }
1881:Core/Src/tmag5170_ex.c **** 
1882:Core/Src/tmag5170_ex.c **** 
1883:Core/Src/tmag5170_ex.c **** 
1884:Core/Src/tmag5170_ex.c **** 
1885:Core/Src/tmag5170_ex.c **** 
1886:Core/Src/tmag5170_ex.c **** //****************************************************************************
1887:Core/Src/tmag5170_ex.c **** //****************************************************************************
1888:Core/Src/tmag5170_ex.c **** //
1889:Core/Src/tmag5170_ex.c **** // Supplemental Functions
1890:Core/Src/tmag5170_ex.c **** //
1891:Core/Src/tmag5170_ex.c **** //****************************************************************************
1892:Core/Src/tmag5170_ex.c **** //****************************************************************************
1893:Core/Src/tmag5170_ex.c **** 
1894:Core/Src/tmag5170_ex.c **** 
1895:Core/Src/tmag5170_ex.c **** //****************************************************************************
1896:Core/Src/tmag5170_ex.c **** //! Calculate Angle and Magnitude using CORDIC for two axes
1897:Core/Src/tmag5170_ex.c **** //! Takes in a float array of at least size 2, two magnetic axis measurements, and their
1898:Core/Src/tmag5170_ex.c **** //! shared range and changes indexes 0 and 1 of the array to the calculated angle and
1899:Core/Src/tmag5170_ex.c **** //! magnitude using CORDIC.
1900:Core/Src/tmag5170_ex.c **** //!
1901:Core/Src/tmag5170_ex.c **** //! CORDIC_results[] - float array of at least size 2, will have indexes 0 and 1 replaced
1902:Core/Src/tmag5170_ex.c **** //!                    with the calculated angle and magnitude, respectively
1903:Core/Src/tmag5170_ex.c **** //! numerator - magnetic measurement result pulled from the register of the vertical axis
1904:Core/Src/tmag5170_ex.c **** //! denominator - magnetic measurement result pulled from the register of the horizontal axis
1905:Core/Src/tmag5170_ex.c **** //! range - the range in mT shared by both axes (axes cannot have different set ranges or CORDIC wi
1906:Core/Src/tmag5170_ex.c **** //!         be accurate)
1907:Core/Src/tmag5170_ex.c **** //!
1908:Core/Src/tmag5170_ex.c **** //! For angle measurements to match the in-built CORDIC on the device, match the numerator and deno
1909:Core/Src/tmag5170_ex.c **** //! for the associated ANGLE_EN value below, while also ensuring both axes share the same range (in
1910:Core/Src/tmag5170_ex.c **** //!
1911:Core/Src/tmag5170_ex.c **** //!              ANGLE_EN value | numerator axis | denominator axis
1912:Core/Src/tmag5170_ex.c **** //!                   0x00             none             none
1913:Core/Src/tmag5170_ex.c **** //!                   0x01              Y                X
1914:Core/Src/tmag5170_ex.c **** //!                   0x02              Z                Y
1915:Core/Src/tmag5170_ex.c **** //!                   0x03              Z                X
1916:Core/Src/tmag5170_ex.c **** //!
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 36


1917:Core/Src/tmag5170_ex.c **** //! The returned angle will be interpreted as 0deg on the positive denominator axis and 90deg on th
1918:Core/Src/tmag5170_ex.c **** //!
1919:Core/Src/tmag5170_ex.c **** //! For more information on CORDIC algorithms please watch the "CORDIC algorithm for angle calculat
1920:Core/Src/tmag5170_ex.c **** //! provided by Texas Instruments: https://training.ti.com/cordic-algorithm-angle-calculations
1921:Core/Src/tmag5170_ex.c **** //****************************************************************************
1922:Core/Src/tmag5170_ex.c **** void calcCORDIC(float CORDIC_results[], int16_t numerator, int16_t denominator, uint16_t range,
1923:Core/Src/tmag5170_ex.c ****                         int16_t iteration_length)
1924:Core/Src/tmag5170_ex.c **** {
1925:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
1926:Core/Src/tmag5170_ex.c **** 
1927:Core/Src/tmag5170_ex.c ****     int32_t angle_readings[3];
1928:Core/Src/tmag5170_ex.c ****     int32_t ANGLE_CALC_32;
1929:Core/Src/tmag5170_ex.c ****     int32_t MAG_CALC_CORDIC;
1930:Core/Src/tmag5170_ex.c **** 
1931:Core/Src/tmag5170_ex.c ****     atan2CORDIC(numerator, denominator, iteration_length, angle_readings);
1932:Core/Src/tmag5170_ex.c **** 
1933:Core/Src/tmag5170_ex.c ****     ANGLE_CALC_32 = angle_readings[0];
1934:Core/Src/tmag5170_ex.c ****     MAG_CALC_CORDIC = angle_readings[1];
1935:Core/Src/tmag5170_ex.c **** 
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[0] = (((float) ANGLE_CALC_32)/65536) * 360 / 65536; // angle result
1937:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
1938:Core/Src/tmag5170_ex.c **** }
1939:Core/Src/tmag5170_ex.c **** 
1940:Core/Src/tmag5170_ex.c **** 
1941:Core/Src/tmag5170_ex.c **** //****************************************************************************
1942:Core/Src/tmag5170_ex.c **** //! atan2 + magnitude calculation using CORDIC algorithm
1943:Core/Src/tmag5170_ex.c **** //!
1944:Core/Src/tmag5170_ex.c **** //! Implementation of the CORDIC algorithm without result value conversion for
1945:Core/Src/tmag5170_ex.c **** //! faster use with functions repeatedly using the CORDIC algorithm (see the
1946:Core/Src/tmag5170_ex.c **** //! planeAngles function).
1947:Core/Src/tmag5170_ex.c **** //!
1948:Core/Src/tmag5170_ex.c **** //! numerator - magnetic measurement result pulled from the register of the vertical axis
1949:Core/Src/tmag5170_ex.c **** //! denominator - magnetic measurement result pulled from the register of the horizontal axis
1950:Core/Src/tmag5170_ex.c **** //! iteration_length - the number of "rotations" to be made in the calculation, more generally
1951:Core/Src/tmag5170_ex.c **** //!                    means a more accurate calculation (max amount is 16)
1952:Core/Src/tmag5170_ex.c **** //! results - int32_t array of at lease size 2. results[0] will store the unconverted angle
1953:Core/Src/tmag5170_ex.c **** //!           value calculated by the algorithm. results[1] will store the unconverted
1954:Core/Src/tmag5170_ex.c **** //!           magnitude value. See the calcCORDIC function for how to convert these values
1955:Core/Src/tmag5170_ex.c **** //!           using the lookup tables included.
1956:Core/Src/tmag5170_ex.c **** //!
1957:Core/Src/tmag5170_ex.c **** //! For more information on CORDIC algorithms please watch the "CORDIC algorithm for angle calculat
1958:Core/Src/tmag5170_ex.c **** //! provided by Texas Instruments: https://training.ti.com/cordic-algorithm-angle-calculations
1959:Core/Src/tmag5170_ex.c **** //****************************************************************************
1960:Core/Src/tmag5170_ex.c **** void atan2CORDIC(int16_t numerator, int16_t denominator, int16_t iteration_length, int32_t results[
1961:Core/Src/tmag5170_ex.c **** {
  85              		.loc 1 1961 1 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		.loc 1 1961 1 is_stmt 0 view .LVU8
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 16
  93              		.cfi_offset 4, -16
  94              		.cfi_offset 5, -12
  95              		.cfi_offset 6, -8
  96              		.cfi_offset 14, -4
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 37


1962:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
  97              		.loc 1 1962 5 is_stmt 1 view .LVU9
  98              		.loc 1 1962 31 is_stmt 0 view .LVU10
  99 0002 541E     		subs	r4, r2, #1
 100 0004 A4B2     		uxth	r4, r4
 101              		.loc 1 1962 8 view .LVU11
 102 0006 0F2C     		cmp	r4, #15
 103 0008 3DD8     		bhi	.L7
1963:Core/Src/tmag5170_ex.c **** 
1964:Core/Src/tmag5170_ex.c ****     int i=0;
 104              		.loc 1 1964 5 is_stmt 1 view .LVU12
 105              	.LVL1:
1965:Core/Src/tmag5170_ex.c ****     int32_t num_old, den_old, num, den;
 106              		.loc 1 1965 5 view .LVU13
1966:Core/Src/tmag5170_ex.c ****     uint32_t angle;
 107              		.loc 1 1966 5 view .LVU14
1967:Core/Src/tmag5170_ex.c ****     num = num_old = numerator;
 108              		.loc 1 1967 5 view .LVU15
 109              		.loc 1 1967 19 is_stmt 0 view .LVU16
 110 000a 8446     		mov	ip, r0
 111              	.LVL2:
1968:Core/Src/tmag5170_ex.c ****     den = den_old = denominator;
 112              		.loc 1 1968 5 is_stmt 1 view .LVU17
 113              		.loc 1 1968 19 is_stmt 0 view .LVU18
 114 000c 0846     		mov	r0, r1
 115              	.LVL3:
1969:Core/Src/tmag5170_ex.c **** 
1970:Core/Src/tmag5170_ex.c ****     if (den < 0) angle = 0x80000000;
 116              		.loc 1 1970 5 is_stmt 1 view .LVU19
 117              		.loc 1 1970 8 is_stmt 0 view .LVU20
 118 000e 0029     		cmp	r1, #0
 119 0010 02DB     		blt	.L19
1971:Core/Src/tmag5170_ex.c ****     else angle = 0;
 120              		.loc 1 1971 16 view .LVU21
 121 0012 0024     		movs	r4, #0
 122              	.L9:
1972:Core/Src/tmag5170_ex.c **** 
1973:Core/Src/tmag5170_ex.c ****     for(i = 0 ; i < iteration_length ; i++)
1974:Core/Src/tmag5170_ex.c ****     {
1975:Core/Src/tmag5170_ex.c **** 
1976:Core/Src/tmag5170_ex.c ****         if (((den >= 0) && (num < 0)) ||((den < 0) && (num >= 0)))
1977:Core/Src/tmag5170_ex.c ****         {
1978:Core/Src/tmag5170_ex.c ****             den = den - (num_old >> i);
1979:Core/Src/tmag5170_ex.c ****             num = num + (den_old >> i);
1980:Core/Src/tmag5170_ex.c ****             angle = angle - atanArray32[i];
1981:Core/Src/tmag5170_ex.c ****         }
1982:Core/Src/tmag5170_ex.c ****         else
1983:Core/Src/tmag5170_ex.c ****         {
1984:Core/Src/tmag5170_ex.c ****             den = den + (num_old >> i);
 123              		.loc 1 1984 17 discriminator 1 view .LVU22
 124 0014 0021     		movs	r1, #0
 125              	.LVL4:
 126              		.loc 1 1984 17 discriminator 1 view .LVU23
 127 0016 10E0     		b	.L10
 128              	.LVL5:
 129              	.L19:
1970:Core/Src/tmag5170_ex.c ****     else angle = 0;
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 38


 130              		.loc 1 1970 24 view .LVU24
 131 0018 4FF00044 		mov	r4, #-2147483648
 132 001c FAE7     		b	.L9
 133              	.LVL6:
 134              	.L11:
1976:Core/Src/tmag5170_ex.c ****         {
 135              		.loc 1 1976 39 discriminator 3 view .LVU25
 136 001e 0028     		cmp	r0, #0
 137 0020 1DDB     		blt	.L20
 138              	.L13:
 139              		.loc 1 1984 13 is_stmt 1 view .LVU26
 140              		.loc 1 1984 34 is_stmt 0 view .LVU27
 141 0022 4CFA01FE 		asr	lr, ip, r1
 142              	.LVL7:
1985:Core/Src/tmag5170_ex.c ****             num = num - (den_old >> i);
 143              		.loc 1 1985 13 is_stmt 1 view .LVU28
 144              		.loc 1 1985 34 is_stmt 0 view .LVU29
 145 0026 40FA01F5 		asr	r5, r0, r1
 146              		.loc 1 1985 17 view .LVU30
 147 002a ACEB050C 		sub	ip, ip, r5
 148              	.LVL8:
1986:Core/Src/tmag5170_ex.c ****             angle = angle + atanArray32[i];
 149              		.loc 1 1986 13 is_stmt 1 view .LVU31
 150              		.loc 1 1986 40 is_stmt 0 view .LVU32
 151 002e 174D     		ldr	r5, .L23
 152 0030 55F82150 		ldr	r5, [r5, r1, lsl #2]
 153              		.loc 1 1986 19 view .LVU33
 154 0034 2C44     		add	r4, r4, r5
 155              	.LVL9:
1984:Core/Src/tmag5170_ex.c ****             num = num - (den_old >> i);
 156              		.loc 1 1984 17 view .LVU34
 157 0036 7044     		add	r0, r0, lr
 158              	.LVL10:
 159              	.L14:
1987:Core/Src/tmag5170_ex.c ****         }
1988:Core/Src/tmag5170_ex.c ****         den_old = den;
 160              		.loc 1 1988 9 is_stmt 1 discriminator 2 view .LVU35
1989:Core/Src/tmag5170_ex.c ****         num_old = num;
 161              		.loc 1 1989 9 discriminator 2 view .LVU36
1973:Core/Src/tmag5170_ex.c ****     {
 162              		.loc 1 1973 40 discriminator 2 view .LVU37
1973:Core/Src/tmag5170_ex.c ****     {
 163              		.loc 1 1973 41 is_stmt 0 discriminator 2 view .LVU38
 164 0038 0131     		adds	r1, r1, #1
 165              	.LVL11:
 166              	.L10:
1973:Core/Src/tmag5170_ex.c ****     {
 167              		.loc 1 1973 17 is_stmt 1 discriminator 1 view .LVU39
1973:Core/Src/tmag5170_ex.c ****     {
 168              		.loc 1 1973 5 is_stmt 0 discriminator 1 view .LVU40
 169 003a 8A42     		cmp	r2, r1
 170 003c 13DD     		ble	.L21
1976:Core/Src/tmag5170_ex.c ****         {
 171              		.loc 1 1976 9 is_stmt 1 view .LVU41
1976:Core/Src/tmag5170_ex.c ****         {
 172              		.loc 1 1976 12 is_stmt 0 view .LVU42
 173 003e 0028     		cmp	r0, #0
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 39


 174 0040 EDDB     		blt	.L11
1976:Core/Src/tmag5170_ex.c ****         {
 175              		.loc 1 1976 25 discriminator 1 view .LVU43
 176 0042 BCF1000F 		cmp	ip, #0
 177 0046 EADA     		bge	.L11
 178              	.L12:
1978:Core/Src/tmag5170_ex.c ****             num = num + (den_old >> i);
 179              		.loc 1 1978 13 is_stmt 1 view .LVU44
1978:Core/Src/tmag5170_ex.c ****             num = num + (den_old >> i);
 180              		.loc 1 1978 34 is_stmt 0 view .LVU45
 181 0048 4CFA01F5 		asr	r5, ip, r1
 182              	.LVL12:
1979:Core/Src/tmag5170_ex.c ****             angle = angle - atanArray32[i];
 183              		.loc 1 1979 13 is_stmt 1 view .LVU46
1979:Core/Src/tmag5170_ex.c ****             angle = angle - atanArray32[i];
 184              		.loc 1 1979 34 is_stmt 0 view .LVU47
 185 004c 40FA01F6 		asr	r6, r0, r1
1979:Core/Src/tmag5170_ex.c ****             angle = angle - atanArray32[i];
 186              		.loc 1 1979 17 view .LVU48
 187 0050 B444     		add	ip, ip, r6
 188              	.LVL13:
1980:Core/Src/tmag5170_ex.c ****         }
 189              		.loc 1 1980 13 is_stmt 1 view .LVU49
1980:Core/Src/tmag5170_ex.c ****         }
 190              		.loc 1 1980 40 is_stmt 0 view .LVU50
 191 0052 0E4E     		ldr	r6, .L23
 192 0054 56F82160 		ldr	r6, [r6, r1, lsl #2]
1980:Core/Src/tmag5170_ex.c ****         }
 193              		.loc 1 1980 19 view .LVU51
 194 0058 A41B     		subs	r4, r4, r6
 195              	.LVL14:
1978:Core/Src/tmag5170_ex.c ****             num = num + (den_old >> i);
 196              		.loc 1 1978 17 view .LVU52
 197 005a 401B     		subs	r0, r0, r5
 198              	.LVL15:
1980:Core/Src/tmag5170_ex.c ****         }
 199              		.loc 1 1980 19 view .LVU53
 200 005c ECE7     		b	.L14
 201              	.LVL16:
 202              	.L20:
1976:Core/Src/tmag5170_ex.c ****         {
 203              		.loc 1 1976 52 discriminator 4 view .LVU54
 204 005e BCF1000F 		cmp	ip, #0
 205 0062 F1DA     		bge	.L12
 206 0064 DDE7     		b	.L13
 207              	.L21:
1990:Core/Src/tmag5170_ex.c ****     }
1991:Core/Src/tmag5170_ex.c ****     results[0] = angle;
 208              		.loc 1 1991 5 is_stmt 1 view .LVU55
 209              		.loc 1 1991 16 is_stmt 0 view .LVU56
 210 0066 1C60     		str	r4, [r3]
1992:Core/Src/tmag5170_ex.c ****     if (den < 0) den = -den;
 211              		.loc 1 1992 5 is_stmt 1 view .LVU57
 212              		.loc 1 1992 8 is_stmt 0 view .LVU58
 213 0068 0028     		cmp	r0, #0
 214 006a 0DDB     		blt	.L22
 215              	.LVL17:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 40


 216              	.L16:
1993:Core/Src/tmag5170_ex.c ****     results[1]= (((int64_t)den)*magArray[i-1])>>(15+16);
 217              		.loc 1 1993 5 is_stmt 1 view .LVU59
 218              		.loc 1 1993 19 is_stmt 0 view .LVU60
 219 006c C417     		asrs	r4, r0, #31
 220              	.LVL18:
 221              		.loc 1 1993 43 view .LVU61
 222 006e 0139     		subs	r1, r1, #1
 223              	.LVL19:
 224              		.loc 1 1993 41 view .LVU62
 225 0070 074A     		ldr	r2, .L23+4
 226              	.LVL20:
 227              		.loc 1 1993 41 view .LVU63
 228 0072 52F82110 		ldr	r1, [r2, r1, lsl #2]
 229              	.LVL21:
 230              		.loc 1 1993 32 view .LVU64
 231 0076 A0FB0120 		umull	r2, r0, r0, r1
 232              	.LVL22:
 233              		.loc 1 1993 32 view .LVU65
 234 007a 01FB0400 		mla	r0, r1, r4, r0
 235              		.loc 1 1993 47 view .LVU66
 236 007e D20F     		lsrs	r2, r2, #31
 237 0080 42EA4002 		orr	r2, r2, r0, lsl #1
 238              		.loc 1 1993 15 view .LVU67
 239 0084 5A60     		str	r2, [r3, #4]
 240              	.LVL23:
 241              	.L7:
1994:Core/Src/tmag5170_ex.c **** }
 242              		.loc 1 1994 1 view .LVU68
 243 0086 70BD     		pop	{r4, r5, r6, pc}
 244              	.LVL24:
 245              	.L22:
1992:Core/Src/tmag5170_ex.c ****     if (den < 0) den = -den;
 246              		.loc 1 1992 18 is_stmt 1 discriminator 1 view .LVU69
1992:Core/Src/tmag5170_ex.c ****     if (den < 0) den = -den;
 247              		.loc 1 1992 22 is_stmt 0 discriminator 1 view .LVU70
 248 0088 4042     		rsbs	r0, r0, #0
 249              	.LVL25:
1992:Core/Src/tmag5170_ex.c ****     if (den < 0) den = -den;
 250              		.loc 1 1992 22 discriminator 1 view .LVU71
 251 008a EFE7     		b	.L16
 252              	.L24:
 253              		.align	2
 254              	.L23:
 255 008c 00000000 		.word	.LANCHOR1
 256 0090 00000000 		.word	.LANCHOR2
 257              		.cfi_endproc
 258              	.LFE67:
 260              		.section	.text.calcCORDIC,"ax",%progbits
 261              		.align	1
 262              		.global	calcCORDIC
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	calcCORDIC:
 268              	.LVL26:
 269              	.LFB66:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 41


1924:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
 270              		.loc 1 1924 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 4, pretend = 0, frame = 24
 273              		@ frame_needed = 0, uses_anonymous_args = 0
1924:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
 274              		.loc 1 1924 1 is_stmt 0 view .LVU73
 275 0000 10B5     		push	{r4, lr}
 276              	.LCFI1:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 280 0002 86B0     		sub	sp, sp, #24
 281              	.LCFI2:
 282              		.cfi_def_cfa_offset 32
 283 0004 0446     		mov	r4, r0
 284 0006 0846     		mov	r0, r1
 285              	.LVL27:
1924:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
 286              		.loc 1 1924 1 view .LVU74
 287 0008 1146     		mov	r1, r2
 288              	.LVL28:
1924:Core/Src/tmag5170_ex.c ****     if (iteration_length > 16 || iteration_length < 1) return;
 289              		.loc 1 1924 1 view .LVU75
 290 000a 0193     		str	r3, [sp, #4]
 291 000c BDF92020 		ldrsh	r2, [sp, #32]
 292              	.LVL29:
1925:Core/Src/tmag5170_ex.c **** 
 293              		.loc 1 1925 5 is_stmt 1 view .LVU76
1925:Core/Src/tmag5170_ex.c **** 
 294              		.loc 1 1925 31 is_stmt 0 view .LVU77
 295 0010 531E     		subs	r3, r2, #1
 296              	.LVL30:
1925:Core/Src/tmag5170_ex.c **** 
 297              		.loc 1 1925 31 view .LVU78
 298 0012 9BB2     		uxth	r3, r3
1925:Core/Src/tmag5170_ex.c **** 
 299              		.loc 1 1925 8 view .LVU79
 300 0014 0F2B     		cmp	r3, #15
 301 0016 01D9     		bls	.L29
 302              	.L25:
1938:Core/Src/tmag5170_ex.c **** 
 303              		.loc 1 1938 1 view .LVU80
 304 0018 06B0     		add	sp, sp, #24
 305              	.LCFI3:
 306              		.cfi_remember_state
 307              		.cfi_def_cfa_offset 8
 308              		@ sp needed
 309 001a 10BD     		pop	{r4, pc}
 310              	.LVL31:
 311              	.L29:
 312              	.LCFI4:
 313              		.cfi_restore_state
1927:Core/Src/tmag5170_ex.c ****     int32_t ANGLE_CALC_32;
 314              		.loc 1 1927 5 is_stmt 1 view .LVU81
1928:Core/Src/tmag5170_ex.c ****     int32_t MAG_CALC_CORDIC;
 315              		.loc 1 1928 5 view .LVU82
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 42


1929:Core/Src/tmag5170_ex.c **** 
 316              		.loc 1 1929 5 view .LVU83
1931:Core/Src/tmag5170_ex.c **** 
 317              		.loc 1 1931 5 view .LVU84
 318 001c 03AB     		add	r3, sp, #12
 319 001e FFF7FEFF 		bl	atan2CORDIC
 320              	.LVL32:
1933:Core/Src/tmag5170_ex.c ****     MAG_CALC_CORDIC = angle_readings[1];
 321              		.loc 1 1933 5 view .LVU85
1934:Core/Src/tmag5170_ex.c **** 
 322              		.loc 1 1934 5 view .LVU86
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 323              		.loc 1 1936 5 view .LVU87
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 324              		.loc 1 1936 27 is_stmt 0 view .LVU88
 325 0022 DDED037A 		vldr.32	s15, [sp, #12]	@ int
 326 0026 F8EEE77A 		vcvt.f32.s32	s15, s15
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 327              		.loc 1 1936 49 view .LVU89
 328 002a 9FED0E7A 		vldr.32	s14, .L30
 329 002e 67EE877A 		vmul.f32	s15, s15, s14
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 330              		.loc 1 1936 57 view .LVU90
 331 0032 DFED0D6A 		vldr.32	s13, .L30+4
 332 0036 67EEA67A 		vmul.f32	s15, s15, s13
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 333              		.loc 1 1936 63 view .LVU91
 334 003a 67EE877A 		vmul.f32	s15, s15, s14
1936:Core/Src/tmag5170_ex.c ****     CORDIC_results[1] = ((float) MAG_CALC_CORDIC) * range / 32768; // mag result
 335              		.loc 1 1936 23 view .LVU92
 336 003e C4ED007A 		vstr.32	s15, [r4]
 337              	.LVL33:
1937:Core/Src/tmag5170_ex.c **** }
 338              		.loc 1 1937 5 is_stmt 1 view .LVU93
1937:Core/Src/tmag5170_ex.c **** }
 339              		.loc 1 1937 26 is_stmt 0 view .LVU94
 340 0042 DDED047A 		vldr.32	s15, [sp, #16]	@ int
 341              	.LVL34:
1937:Core/Src/tmag5170_ex.c **** }
 342              		.loc 1 1937 26 view .LVU95
 343 0046 B8EEE77A 		vcvt.f32.s32	s14, s15
1937:Core/Src/tmag5170_ex.c **** }
 344              		.loc 1 1937 51 view .LVU96
 345 004a DDED017A 		vldr.32	s15, [sp, #4]	@ int
 346              	.LVL35:
1937:Core/Src/tmag5170_ex.c **** }
 347              		.loc 1 1937 51 view .LVU97
 348 004e F8EEE77A 		vcvt.f32.s32	s15, s15
 349 0052 67EE877A 		vmul.f32	s15, s15, s14
1937:Core/Src/tmag5170_ex.c **** }
 350              		.loc 1 1937 59 view .LVU98
 351 0056 9FED057A 		vldr.32	s14, .L30+8
 352 005a 67EE877A 		vmul.f32	s15, s15, s14
1937:Core/Src/tmag5170_ex.c **** }
 353              		.loc 1 1937 23 view .LVU99
 354 005e C4ED017A 		vstr.32	s15, [r4, #4]
 355 0062 D9E7     		b	.L25
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 43


 356              	.L31:
 357              		.align	2
 358              	.L30:
 359 0064 00008037 		.word	931135488
 360 0068 0000B443 		.word	1135869952
 361 006c 00000038 		.word	939524096
 362              		.cfi_endproc
 363              	.LFE66:
 365              		.section	.text.planeAngles,"ax",%progbits
 366              		.align	1
 367              		.global	planeAngles
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 372              	planeAngles:
 373              	.LVL36:
 374              	.LFB68:
1995:Core/Src/tmag5170_ex.c **** 
1996:Core/Src/tmag5170_ex.c **** 
1997:Core/Src/tmag5170_ex.c **** 
1998:Core/Src/tmag5170_ex.c **** //****************************************************************************
1999:Core/Src/tmag5170_ex.c **** //! Plane Angle Calculations
2000:Core/Src/tmag5170_ex.c **** //!
2001:Core/Src/tmag5170_ex.c **** //! Takes in the result registers of three axes (assuming all share the same range)
2002:Core/Src/tmag5170_ex.c **** //! and an output array of at lease size 3.
2003:Core/Src/tmag5170_ex.c **** //!
2004:Core/Src/tmag5170_ex.c **** //! results[0] will correspond to the YZ plane angle value.
2005:Core/Src/tmag5170_ex.c **** //! results[1] will correspond to the XZ plane angle value.
2006:Core/Src/tmag5170_ex.c **** //! results[2] will correspond to the XY plane angle value (if enabled).
2007:Core/Src/tmag5170_ex.c **** //****************************************************************************
2008:Core/Src/tmag5170_ex.c **** void planeAngles(int16_t axisX, int16_t axisY, int16_t axisZ,  int32_t results[])
2009:Core/Src/tmag5170_ex.c **** {
 375              		.loc 1 2009 1 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 8
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		.loc 1 2009 1 is_stmt 0 view .LVU101
 380 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 381              	.LCFI5:
 382              		.cfi_def_cfa_offset 20
 383              		.cfi_offset 4, -20
 384              		.cfi_offset 5, -16
 385              		.cfi_offset 6, -12
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 0002 83B0     		sub	sp, sp, #12
 389              	.LCFI6:
 390              		.cfi_def_cfa_offset 32
 391 0004 1C46     		mov	r4, r3
2010:Core/Src/tmag5170_ex.c ****     axisX >>= 1;
 392              		.loc 1 2010 5 is_stmt 1 view .LVU102
 393              		.loc 1 2010 11 is_stmt 0 view .LVU103
 394 0006 4710     		asrs	r7, r0, #1
 395              	.LVL37:
2011:Core/Src/tmag5170_ex.c ****     axisY >>= 1;
 396              		.loc 1 2011 5 is_stmt 1 view .LVU104
 397              		.loc 1 2011 11 is_stmt 0 view .LVU105
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 44


 398 0008 4D10     		asrs	r5, r1, #1
 399              	.LVL38:
2012:Core/Src/tmag5170_ex.c ****     axisZ >>= 1;
 400              		.loc 1 2012 5 is_stmt 1 view .LVU106
 401              		.loc 1 2012 11 is_stmt 0 view .LVU107
 402 000a 5610     		asrs	r6, r2, #1
 403              	.LVL39:
2013:Core/Src/tmag5170_ex.c ****     int32_t angle_mag_readings[2];
 404              		.loc 1 2013 5 is_stmt 1 view .LVU108
2014:Core/Src/tmag5170_ex.c ****     uint32_t xz_magnitude, yz_magnitude;
 405              		.loc 1 2014 5 view .LVU109
2015:Core/Src/tmag5170_ex.c **** 
2016:Core/Src/tmag5170_ex.c **** 
2017:Core/Src/tmag5170_ex.c ****     atan2CORDIC(axisZ, axisY, 10, angle_mag_readings);
 406              		.loc 1 2017 5 view .LVU110
 407 000c 6B46     		mov	r3, sp
 408              	.LVL40:
 409              		.loc 1 2017 5 is_stmt 0 view .LVU111
 410 000e 0A22     		movs	r2, #10
 411 0010 2946     		mov	r1, r5
 412 0012 3046     		mov	r0, r6
 413 0014 FFF7FEFF 		bl	atan2CORDIC
 414              	.LVL41:
2018:Core/Src/tmag5170_ex.c ****     yz_magnitude=angle_mag_readings[1];
 415              		.loc 1 2018 5 is_stmt 1 view .LVU112
2019:Core/Src/tmag5170_ex.c ****     atan2CORDIC(yz_magnitude, axisX, 10, angle_mag_readings);
 416              		.loc 1 2019 5 view .LVU113
 417 0018 6B46     		mov	r3, sp
 418 001a 0A22     		movs	r2, #10
 419 001c 3946     		mov	r1, r7
 420 001e BDF90400 		ldrsh	r0, [sp, #4]
 421 0022 FFF7FEFF 		bl	atan2CORDIC
 422              	.LVL42:
2020:Core/Src/tmag5170_ex.c ****     results[0]=angle_mag_readings[0];
 423              		.loc 1 2020 5 view .LVU114
 424              		.loc 1 2020 34 is_stmt 0 view .LVU115
 425 0026 009B     		ldr	r3, [sp]
 426              		.loc 1 2020 15 view .LVU116
 427 0028 2360     		str	r3, [r4]
2021:Core/Src/tmag5170_ex.c **** 
2022:Core/Src/tmag5170_ex.c ****     atan2CORDIC(axisZ, axisX, 10, angle_mag_readings);
 428              		.loc 1 2022 5 is_stmt 1 view .LVU117
 429 002a 6B46     		mov	r3, sp
 430 002c 0A22     		movs	r2, #10
 431 002e 3946     		mov	r1, r7
 432 0030 3046     		mov	r0, r6
 433 0032 FFF7FEFF 		bl	atan2CORDIC
 434              	.LVL43:
2023:Core/Src/tmag5170_ex.c ****     xz_magnitude=angle_mag_readings[1];
 435              		.loc 1 2023 5 view .LVU118
2024:Core/Src/tmag5170_ex.c ****     atan2CORDIC(xz_magnitude, axisY, 10, angle_mag_readings);
 436              		.loc 1 2024 5 view .LVU119
 437 0036 6B46     		mov	r3, sp
 438 0038 0A22     		movs	r2, #10
 439 003a 2946     		mov	r1, r5
 440 003c BDF90400 		ldrsh	r0, [sp, #4]
 441 0040 FFF7FEFF 		bl	atan2CORDIC
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 45


 442              	.LVL44:
2025:Core/Src/tmag5170_ex.c ****     results[1]=angle_mag_readings[0];
 443              		.loc 1 2025 5 view .LVU120
 444              		.loc 1 2025 34 is_stmt 0 view .LVU121
 445 0044 009B     		ldr	r3, [sp]
 446              		.loc 1 2025 15 view .LVU122
 447 0046 6360     		str	r3, [r4, #4]
2026:Core/Src/tmag5170_ex.c **** 
2027:Core/Src/tmag5170_ex.c **** //#define CALCULATE_XY_PLANE_ANGLE
2028:Core/Src/tmag5170_ex.c **** #ifdef CALCULATE_XY_PLANE_ANGLE
2029:Core/Src/tmag5170_ex.c ****     uint32_t xy_magnitude;
2030:Core/Src/tmag5170_ex.c ****     atan2CORDIC(axisX, axisY, 10, angle_mag_readings);
2031:Core/Src/tmag5170_ex.c ****     xy_magnitude=angle_mag_readings[1];
2032:Core/Src/tmag5170_ex.c ****     atan2CORDIC(xy_magnitude, axisZ, 10, angle_mag_readings);
2033:Core/Src/tmag5170_ex.c ****     results[2]=angle_mag_readings[0];
2034:Core/Src/tmag5170_ex.c **** #endif
2035:Core/Src/tmag5170_ex.c **** }
 448              		.loc 1 2035 1 view .LVU123
 449 0048 03B0     		add	sp, sp, #12
 450              	.LCFI7:
 451              		.cfi_def_cfa_offset 20
 452              		@ sp needed
 453 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 454              		.loc 1 2035 1 view .LVU124
 455              		.cfi_endproc
 456              	.LFE68:
 458              		.section	.text.convertToCylindrical,"ax",%progbits
 459              		.align	1
 460              		.global	convertToCylindrical
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 465              	convertToCylindrical:
 466              	.LVL45:
 467              	.LFB70:
2036:Core/Src/tmag5170_ex.c **** 
2037:Core/Src/tmag5170_ex.c **** 
2038:Core/Src/tmag5170_ex.c **** //****************************************************************************
2039:Core/Src/tmag5170_ex.c **** //! Conversion to Spherical Coordinates
2040:Core/Src/tmag5170_ex.c **** //!
2041:Core/Src/tmag5170_ex.c **** //! Takes in the result registers of three axes (assuming all share the same range)
2042:Core/Src/tmag5170_ex.c **** //! and an output array of at lease size 3. The three axis measurements are converted
2043:Core/Src/tmag5170_ex.c **** //! into spherical coordinates with phi on the axis1 + axis2 plane.
2044:Core/Src/tmag5170_ex.c **** //!
2045:Core/Src/tmag5170_ex.c **** //! results[0] will correspond to the radius value.
2046:Core/Src/tmag5170_ex.c **** //! results[1] will correspond to the phi angle value on the axis1 + axis2 plane.
2047:Core/Src/tmag5170_ex.c **** //! results[2] will correspond to the theta angle value.
2048:Core/Src/tmag5170_ex.c **** //****************************************************************************
2049:Core/Src/tmag5170_ex.c **** void convertToSpherical(int16_t axis1, int16_t axis2, int16_t axis3,  int32_t results[])
2050:Core/Src/tmag5170_ex.c **** {
2051:Core/Src/tmag5170_ex.c ****     int32_t angle_mag_readings[2];
2052:Core/Src/tmag5170_ex.c ****     uint32_t xy_magnitude;
2053:Core/Src/tmag5170_ex.c **** 
2054:Core/Src/tmag5170_ex.c **** 
2055:Core/Src/tmag5170_ex.c ****     results[0]= mag3D(axis1, axis2, axis3);
2056:Core/Src/tmag5170_ex.c **** 
2057:Core/Src/tmag5170_ex.c ****     atan2CORDIC(axis2, axis1, 10, angle_mag_readings);
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 46


2058:Core/Src/tmag5170_ex.c ****     results[1]=angle_mag_readings[0];
2059:Core/Src/tmag5170_ex.c ****     xy_magnitude=angle_mag_readings[1];
2060:Core/Src/tmag5170_ex.c **** 
2061:Core/Src/tmag5170_ex.c ****     atan2CORDIC(xy_magnitude, axis3, 10, angle_mag_readings);
2062:Core/Src/tmag5170_ex.c ****     results[2]=angle_mag_readings[0];
2063:Core/Src/tmag5170_ex.c **** 
2064:Core/Src/tmag5170_ex.c **** }
2065:Core/Src/tmag5170_ex.c **** 
2066:Core/Src/tmag5170_ex.c **** 
2067:Core/Src/tmag5170_ex.c **** //****************************************************************************
2068:Core/Src/tmag5170_ex.c **** //! Conversion to Cylindrical Coordinates
2069:Core/Src/tmag5170_ex.c **** //!
2070:Core/Src/tmag5170_ex.c **** //! Takes in the result registers of three axes (assuming all share the same range)
2071:Core/Src/tmag5170_ex.c **** //! and an output array of at lease size 3. The three axis measurements are converted
2072:Core/Src/tmag5170_ex.c **** //! into cylindrical coordinates with the cylinder oriented along axis3.
2073:Core/Src/tmag5170_ex.c **** //!
2074:Core/Src/tmag5170_ex.c **** //! results[0] will correspond to the radius value.
2075:Core/Src/tmag5170_ex.c **** //! results[1] will correspond to the theta angle value of the axis1 + axis2 plane.
2076:Core/Src/tmag5170_ex.c **** //! results[2] will correspond to the z value.
2077:Core/Src/tmag5170_ex.c **** //****************************************************************************
2078:Core/Src/tmag5170_ex.c **** void convertToCylindrical(int16_t axis1, int16_t axis2, int16_t axis3,  int32_t results[])
2079:Core/Src/tmag5170_ex.c **** {
 468              		.loc 1 2079 1 is_stmt 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 8
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              		.loc 1 2079 1 is_stmt 0 view .LVU126
 473 0000 30B5     		push	{r4, r5, lr}
 474              	.LCFI8:
 475              		.cfi_def_cfa_offset 12
 476              		.cfi_offset 4, -12
 477              		.cfi_offset 5, -8
 478              		.cfi_offset 14, -4
 479 0002 83B0     		sub	sp, sp, #12
 480              	.LCFI9:
 481              		.cfi_def_cfa_offset 24
 482 0004 8446     		mov	ip, r0
 483 0006 0846     		mov	r0, r1
 484              	.LVL46:
 485              		.loc 1 2079 1 view .LVU127
 486 0008 1546     		mov	r5, r2
 487 000a 1C46     		mov	r4, r3
2080:Core/Src/tmag5170_ex.c ****     int32_t angle_mag_readings[2];
 488              		.loc 1 2080 5 is_stmt 1 view .LVU128
2081:Core/Src/tmag5170_ex.c **** 
2082:Core/Src/tmag5170_ex.c ****     atan2CORDIC(axis2, axis1, 10, angle_mag_readings);
 489              		.loc 1 2082 5 view .LVU129
 490 000c 6B46     		mov	r3, sp
 491              	.LVL47:
 492              		.loc 1 2082 5 is_stmt 0 view .LVU130
 493 000e 0A22     		movs	r2, #10
 494              	.LVL48:
 495              		.loc 1 2082 5 view .LVU131
 496 0010 6146     		mov	r1, ip
 497              	.LVL49:
 498              		.loc 1 2082 5 view .LVU132
 499 0012 FFF7FEFF 		bl	atan2CORDIC
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 47


 500              	.LVL50:
2083:Core/Src/tmag5170_ex.c ****     results[0]=angle_mag_readings[1];
 501              		.loc 1 2083 5 is_stmt 1 view .LVU133
 502              		.loc 1 2083 34 is_stmt 0 view .LVU134
 503 0016 019B     		ldr	r3, [sp, #4]
 504              		.loc 1 2083 15 view .LVU135
 505 0018 2360     		str	r3, [r4]
2084:Core/Src/tmag5170_ex.c ****     results[1]=angle_mag_readings[0];
 506              		.loc 1 2084 5 is_stmt 1 view .LVU136
 507              		.loc 1 2084 34 is_stmt 0 view .LVU137
 508 001a 009B     		ldr	r3, [sp]
 509              		.loc 1 2084 15 view .LVU138
 510 001c 6360     		str	r3, [r4, #4]
2085:Core/Src/tmag5170_ex.c ****     results[2]=axis3;
 511              		.loc 1 2085 5 is_stmt 1 view .LVU139
 512              		.loc 1 2085 15 is_stmt 0 view .LVU140
 513 001e A560     		str	r5, [r4, #8]
2086:Core/Src/tmag5170_ex.c **** }
 514              		.loc 1 2086 1 view .LVU141
 515 0020 03B0     		add	sp, sp, #12
 516              	.LCFI10:
 517              		.cfi_def_cfa_offset 12
 518              		@ sp needed
 519 0022 30BD     		pop	{r4, r5, pc}
 520              		.loc 1 2086 1 view .LVU142
 521              		.cfi_endproc
 522              	.LFE70:
 524              		.section	.text.piecewiseLinearizationFloat,"ax",%progbits
 525              		.align	1
 526              		.global	piecewiseLinearizationFloat
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 531              	piecewiseLinearizationFloat:
 532              	.LVL51:
 533              	.LFB73:
2087:Core/Src/tmag5170_ex.c **** 
2088:Core/Src/tmag5170_ex.c **** 
2089:Core/Src/tmag5170_ex.c **** //****************************************************************************
2090:Core/Src/tmag5170_ex.c **** //! 3-axis Magnitude Calculation
2091:Core/Src/tmag5170_ex.c **** //!
2092:Core/Src/tmag5170_ex.c **** //! Takes in three result registers and returns the magnitude of a vector created
2093:Core/Src/tmag5170_ex.c **** //! by those three input values.
2094:Core/Src/tmag5170_ex.c **** //****************************************************************************
2095:Core/Src/tmag5170_ex.c **** uint32_t mag3D(int16_t axis1, int16_t axis2, int16_t axis3)
2096:Core/Src/tmag5170_ex.c **** {
2097:Core/Src/tmag5170_ex.c ****     uint32_t temp1, temp2,temp3;
2098:Core/Src/tmag5170_ex.c **** 
2099:Core/Src/tmag5170_ex.c ****     temp3= axis3>>1;
2100:Core/Src/tmag5170_ex.c ****     temp3=temp3*temp3;
2101:Core/Src/tmag5170_ex.c **** 
2102:Core/Src/tmag5170_ex.c ****     temp2=axis2>>1;
2103:Core/Src/tmag5170_ex.c ****     temp2= temp2*temp2;
2104:Core/Src/tmag5170_ex.c **** 
2105:Core/Src/tmag5170_ex.c ****     temp1= axis1>>1;
2106:Core/Src/tmag5170_ex.c ****     temp1=temp1*temp1;
2107:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 48


2108:Core/Src/tmag5170_ex.c **** 
2109:Core/Src/tmag5170_ex.c ****     temp1=temp3+temp2+temp1;
2110:Core/Src/tmag5170_ex.c ****     temp1=isqrt32(temp1)>>16;
2111:Core/Src/tmag5170_ex.c ****     return temp1<<1;
2112:Core/Src/tmag5170_ex.c **** }
2113:Core/Src/tmag5170_ex.c **** 
2114:Core/Src/tmag5170_ex.c **** 
2115:Core/Src/tmag5170_ex.c **** 
2116:Core/Src/tmag5170_ex.c **** 
2117:Core/Src/tmag5170_ex.c **** //****************************************************************************
2118:Core/Src/tmag5170_ex.c **** //! Piecewise Linearization Function - Axis Measurements (Registers)
2119:Core/Src/tmag5170_ex.c **** //! Takes in known measurements with their associated errors and uses a linearization of them
2120:Core/Src/tmag5170_ex.c **** //! to calculate an estimation of an unknown measured value with error absent.
2121:Core/Src/tmag5170_ex.c **** //!
2122:Core/Src/tmag5170_ex.c **** //! knownValue[] - sorted array of measured register values with their error known (MUST BE SORTED 
2123:Core/Src/tmag5170_ex.c **** //! knownError[] - array of known error values (in mT) for the corresponding knownValue[] indices
2124:Core/Src/tmag5170_ex.c **** //! known_length - length of the knownValue[] and knownError[] arrays
2125:Core/Src/tmag5170_ex.c **** //! measValue - the measured register value with unknown error the linearization will be applied to
2126:Core/Src/tmag5170_ex.c **** //! range - range of the axis the registers to be linearized are taken from
2127:Core/Src/tmag5170_ex.c **** //****************************************************************************
2128:Core/Src/tmag5170_ex.c **** float piecewiseLinearizationRegister( int16_t knownValue[], float knownError[], uint16_t known_leng
2129:Core/Src/tmag5170_ex.c **** {
2130:Core/Src/tmag5170_ex.c **** 
2131:Core/Src/tmag5170_ex.c ****     uint16_t top_index;
2132:Core/Src/tmag5170_ex.c **** 
2133:Core/Src/tmag5170_ex.c ****     for ( top_index = 1; top_index < known_length - 1 ; top_index++ )
2134:Core/Src/tmag5170_ex.c ****     {
2135:Core/Src/tmag5170_ex.c ****         if ( measValue < knownValue[top_index] ) break;
2136:Core/Src/tmag5170_ex.c ****     }
2137:Core/Src/tmag5170_ex.c **** 
2138:Core/Src/tmag5170_ex.c ****     float coord_diff, error_diff, slope, estimated_error, linztn_value;
2139:Core/Src/tmag5170_ex.c ****     float bottomValue_f = resultRegisterTomT(knownValue[top_index - 1], range);
2140:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
2141:Core/Src/tmag5170_ex.c **** 
2142:Core/Src/tmag5170_ex.c ****     coord_diff = ((float) (knownValue[top_index] - knownValue[top_index - 1]) / 32768) * range;
2143:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
2144:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
2145:Core/Src/tmag5170_ex.c **** 
2146:Core/Src/tmag5170_ex.c ****     estimated_error = ( measValue_f - bottomValue_f )*slope + knownError[top_index - 1];
2147:Core/Src/tmag5170_ex.c ****     return measValue_f - estimated_error;
2148:Core/Src/tmag5170_ex.c **** }
2149:Core/Src/tmag5170_ex.c **** 
2150:Core/Src/tmag5170_ex.c **** 
2151:Core/Src/tmag5170_ex.c **** 
2152:Core/Src/tmag5170_ex.c **** //****************************************************************************
2153:Core/Src/tmag5170_ex.c **** //! Piecewise Linearization Function - Axis Measurements (mT values)
2154:Core/Src/tmag5170_ex.c **** //! Takes in known measurements with their associated errors and uses a linearization of them
2155:Core/Src/tmag5170_ex.c **** //! to calculate an estimation of an unknown measured value with error absent.
2156:Core/Src/tmag5170_ex.c **** //!
2157:Core/Src/tmag5170_ex.c **** //! knownValue[] - sorted array of measured mT values with their error known (MUST BE SORTED LOW to
2158:Core/Src/tmag5170_ex.c **** //! knownError[] - array of known error values (in mT) for the corresponding knownValue[] indices
2159:Core/Src/tmag5170_ex.c **** //! known_length - length of the knownValue[] and knownError[] arrays
2160:Core/Src/tmag5170_ex.c **** //! measValue - the measured mT value with unknown error the linearization will be applied to.
2161:Core/Src/tmag5170_ex.c **** //! range - range of the axis the registers to be linearized are taken from
2162:Core/Src/tmag5170_ex.c **** //****************************************************************************
2163:Core/Src/tmag5170_ex.c **** float piecewiseLinearizationFloat( float knownValue[], float knownError[], uint16_t known_length, f
2164:Core/Src/tmag5170_ex.c **** {
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 49


 534              		.loc 1 2164 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 538              		@ link register save eliminated.
2165:Core/Src/tmag5170_ex.c ****     uint16_t top_index;
 539              		.loc 1 2165 5 view .LVU144
2166:Core/Src/tmag5170_ex.c ****     float coord_diff, error_diff;
 540              		.loc 1 2166 5 view .LVU145
2167:Core/Src/tmag5170_ex.c ****     float slope, estimated_error;
 541              		.loc 1 2167 5 view .LVU146
2168:Core/Src/tmag5170_ex.c **** 
2169:Core/Src/tmag5170_ex.c ****     for ( top_index = 1; top_index < known_length - 1 ; top_index++ )
 542              		.loc 1 2169 5 view .LVU147
 543              		.loc 1 2169 21 is_stmt 0 view .LVU148
 544 0000 0123     		movs	r3, #1
 545              		.loc 1 2169 5 view .LVU149
 546 0002 01E0     		b	.L37
 547              	.LVL52:
 548              	.L40:
 549              		.loc 1 2169 57 is_stmt 1 discriminator 2 view .LVU150
 550              		.loc 1 2169 66 is_stmt 0 discriminator 2 view .LVU151
 551 0004 0133     		adds	r3, r3, #1
 552              	.LVL53:
 553              		.loc 1 2169 66 discriminator 2 view .LVU152
 554 0006 9BB2     		uxth	r3, r3
 555              	.LVL54:
 556              	.L37:
 557              		.loc 1 2169 26 is_stmt 1 discriminator 1 view .LVU153
 558              		.loc 1 2169 51 is_stmt 0 discriminator 1 view .LVU154
 559 0008 02F1FF3C 		add	ip, r2, #-1
 560              		.loc 1 2169 5 discriminator 1 view .LVU155
 561 000c 6345     		cmp	r3, ip
 562 000e 08DA     		bge	.L38
2170:Core/Src/tmag5170_ex.c ****     {
2171:Core/Src/tmag5170_ex.c ****         if ( measValue < knownValue[top_index] ) break;
 563              		.loc 1 2171 9 is_stmt 1 view .LVU156
 564              		.loc 1 2171 36 is_stmt 0 view .LVU157
 565 0010 00EB830C 		add	ip, r0, r3, lsl #2
 566 0014 DCED007A 		vldr.32	s15, [ip]
 567              		.loc 1 2171 12 view .LVU158
 568 0018 F4EEC07A 		vcmpe.f32	s15, s0
 569 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 570 0020 F0DD     		ble	.L40
 571              	.L38:
2172:Core/Src/tmag5170_ex.c ****     }
2173:Core/Src/tmag5170_ex.c **** 
2174:Core/Src/tmag5170_ex.c ****     coord_diff = knownValue[top_index] - knownValue[top_index - 1];
 572              		.loc 1 2174 5 is_stmt 1 view .LVU159
 573              		.loc 1 2174 28 is_stmt 0 view .LVU160
 574 0022 00EB8302 		add	r2, r0, r3, lsl #2
 575              	.LVL55:
 576              		.loc 1 2174 28 view .LVU161
 577 0026 D2ED006A 		vldr.32	s13, [r2]
 578              		.loc 1 2174 52 view .LVU162
 579 002a 03F18042 		add	r2, r3, #1073741824
 580 002e 013A     		subs	r2, r2, #1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 50


 581 0030 00EB8200 		add	r0, r0, r2, lsl #2
 582              	.LVL56:
 583              		.loc 1 2174 52 view .LVU163
 584 0034 D0ED007A 		vldr.32	s15, [r0]
 585              		.loc 1 2174 16 view .LVU164
 586 0038 76EEE76A 		vsub.f32	s13, s13, s15
 587              	.LVL57:
2175:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 588              		.loc 1 2175 5 is_stmt 1 view .LVU165
 589              		.loc 1 2175 28 is_stmt 0 view .LVU166
 590 003c 01EB8303 		add	r3, r1, r3, lsl #2
 591              	.LVL58:
 592              		.loc 1 2175 28 view .LVU167
 593 0040 93ED006A 		vldr.32	s12, [r3]
 594              		.loc 1 2175 52 view .LVU168
 595 0044 01EB8201 		add	r1, r1, r2, lsl #2
 596              	.LVL59:
 597              		.loc 1 2175 52 view .LVU169
 598 0048 91ED007A 		vldr.32	s14, [r1]
 599              		.loc 1 2175 16 view .LVU170
 600 004c 36EE476A 		vsub.f32	s12, s12, s14
 601              	.LVL60:
2176:Core/Src/tmag5170_ex.c ****     slope =  error_diff / coord_diff;
 602              		.loc 1 2176 5 is_stmt 1 view .LVU171
 603              		.loc 1 2176 11 is_stmt 0 view .LVU172
 604 0050 C6EE265A 		vdiv.f32	s11, s12, s13
 605              	.LVL61:
2177:Core/Src/tmag5170_ex.c ****     estimated_error = ( measValue - knownValue[top_index - 1] )*slope + knownError[top_index - 1];
 606              		.loc 1 2177 5 is_stmt 1 view .LVU173
 607              		.loc 1 2177 35 is_stmt 0 view .LVU174
 608 0054 70EE677A 		vsub.f32	s15, s0, s15
 609              		.loc 1 2177 64 view .LVU175
 610 0058 67EEA57A 		vmul.f32	s15, s15, s11
 611              		.loc 1 2177 21 view .LVU176
 612 005c 77EE277A 		vadd.f32	s15, s14, s15
 613              	.LVL62:
2178:Core/Src/tmag5170_ex.c **** 
2179:Core/Src/tmag5170_ex.c ****     return measValue - estimated_error;
 614              		.loc 1 2179 5 is_stmt 1 view .LVU177
2180:Core/Src/tmag5170_ex.c **** }
 615              		.loc 1 2180 1 is_stmt 0 view .LVU178
 616 0060 30EE670A 		vsub.f32	s0, s0, s15
 617              	.LVL63:
 618              		.loc 1 2180 1 view .LVU179
 619 0064 7047     		bx	lr
 620              		.cfi_endproc
 621              	.LFE73:
 623              		.section	.text.piecewiseLinearizationAngleFloat,"ax",%progbits
 624              		.align	1
 625              		.global	piecewiseLinearizationAngleFloat
 626              		.syntax unified
 627              		.thumb
 628              		.thumb_func
 630              	piecewiseLinearizationAngleFloat:
 631              	.LVL64:
 632              	.LFB75:
2181:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 51


2182:Core/Src/tmag5170_ex.c **** 
2183:Core/Src/tmag5170_ex.c **** 
2184:Core/Src/tmag5170_ex.c **** //****************************************************************************
2185:Core/Src/tmag5170_ex.c **** //! Piecewise Linearization Function - Angle Measurements (Register values)
2186:Core/Src/tmag5170_ex.c **** //! Takes in known angle measurements with their associated errors and uses a linearization of them
2187:Core/Src/tmag5170_ex.c **** //! to calculate an estimation of an unknown measured angle with error absent.
2188:Core/Src/tmag5170_ex.c **** //!
2189:Core/Src/tmag5170_ex.c **** //! knownValue[] - sorted array of measured angle register values with their error known (MUST BE S
2190:Core/Src/tmag5170_ex.c **** //! knownError[] - array of known error values (in degrees) for the corresponding knownValue[] indi
2191:Core/Src/tmag5170_ex.c **** //! known_length - length of the knownValue[] and knownError[] arrays
2192:Core/Src/tmag5170_ex.c **** //! measValue - the measured angle register value with unknown error the linearization will be appl
2193:Core/Src/tmag5170_ex.c **** //****************************************************************************
2194:Core/Src/tmag5170_ex.c **** float piecewiseLinearizationAngle( uint16_t knownAngle[], float knownError[], uint16_t known_length
2195:Core/Src/tmag5170_ex.c **** {
2196:Core/Src/tmag5170_ex.c **** 
2197:Core/Src/tmag5170_ex.c ****     uint16_t top_index = known_length;
2198:Core/Src/tmag5170_ex.c ****     uint16_t bottom_index;
2199:Core/Src/tmag5170_ex.c ****     float slope, coord_diff, error_diff, estimated_error, linztn_angle;
2200:Core/Src/tmag5170_ex.c **** 
2201:Core/Src/tmag5170_ex.c ****     if ( measAngle >= knownAngle[0] )
2202:Core/Src/tmag5170_ex.c ****     {
2203:Core/Src/tmag5170_ex.c ****         for ( top_index = 1; top_index < known_length ; top_index++ )
2204:Core/Src/tmag5170_ex.c ****         {
2205:Core/Src/tmag5170_ex.c ****             if ( measAngle < knownAngle[top_index] ) break;
2206:Core/Src/tmag5170_ex.c ****         }
2207:Core/Src/tmag5170_ex.c ****     }
2208:Core/Src/tmag5170_ex.c ****     bottom_index = top_index - 1;
2209:Core/Src/tmag5170_ex.c ****     if ( top_index == known_length )
2210:Core/Src/tmag5170_ex.c ****     {
2211:Core/Src/tmag5170_ex.c ****         top_index = 0;
2212:Core/Src/tmag5170_ex.c ****         coord_diff = angleRegisterToDeg((knownAngle[top_index] + 0x1680) - knownAngle[bottom_index]
2213:Core/Src/tmag5170_ex.c ****     }
2214:Core/Src/tmag5170_ex.c ****     else
2215:Core/Src/tmag5170_ex.c ****     {
2216:Core/Src/tmag5170_ex.c ****         coord_diff = angleRegisterToDeg(knownAngle[top_index] - knownAngle[bottom_index]);
2217:Core/Src/tmag5170_ex.c ****     }
2218:Core/Src/tmag5170_ex.c **** 
2219:Core/Src/tmag5170_ex.c ****     float bottomAngle_f = angleRegisterToDeg(knownAngle[bottom_index]);
2220:Core/Src/tmag5170_ex.c ****     float measAngle_f = angleRegisterToDeg(measAngle);
2221:Core/Src/tmag5170_ex.c **** 
2222:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[bottom_index];
2223:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
2224:Core/Src/tmag5170_ex.c ****     estimated_error = ( measAngle_f - bottomAngle_f )*slope + knownError[bottom_index];
2225:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle_f - estimated_error;
2226:Core/Src/tmag5170_ex.c ****     if ( linztn_angle >= 360 ) linztn_angle -= 360;
2227:Core/Src/tmag5170_ex.c **** 
2228:Core/Src/tmag5170_ex.c ****     return linztn_angle;
2229:Core/Src/tmag5170_ex.c **** }
2230:Core/Src/tmag5170_ex.c **** 
2231:Core/Src/tmag5170_ex.c **** 
2232:Core/Src/tmag5170_ex.c **** 
2233:Core/Src/tmag5170_ex.c **** //****************************************************************************
2234:Core/Src/tmag5170_ex.c **** //! Piecewise Linearization Function - Angle Measurements (mT values)
2235:Core/Src/tmag5170_ex.c **** //! Takes in known angle measurements with their associated errors and uses a linearization of them
2236:Core/Src/tmag5170_ex.c **** //! to calculate an estimation of an unknown measured angle value with error absent.
2237:Core/Src/tmag5170_ex.c **** //!
2238:Core/Src/tmag5170_ex.c **** //! knownValue[] - sorted array of measured degree values with their error known (MUST BE SORTED LO
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 52


2239:Core/Src/tmag5170_ex.c **** //! knownError[] - array of known error values (in degrees) for the corresponding knownValue[] indi
2240:Core/Src/tmag5170_ex.c **** //! known_length - length of the knownValue[] and knownError[] arrays
2241:Core/Src/tmag5170_ex.c **** //! measValue - the measured degree value with unknown error the linearization will be applied to.
2242:Core/Src/tmag5170_ex.c **** //****************************************************************************
2243:Core/Src/tmag5170_ex.c **** float piecewiseLinearizationAngleFloat( float knownAngle[], float knownError[], uint16_t known_leng
2244:Core/Src/tmag5170_ex.c **** {
 633              		.loc 1 2244 1 is_stmt 1 view -0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637              		@ link register save eliminated.
2245:Core/Src/tmag5170_ex.c **** 
2246:Core/Src/tmag5170_ex.c ****     uint16_t top_index = known_length;
 638              		.loc 1 2246 5 view .LVU181
2247:Core/Src/tmag5170_ex.c ****     uint16_t bottom_index;
 639              		.loc 1 2247 5 view .LVU182
2248:Core/Src/tmag5170_ex.c ****     float slope, coord_diff, error_diff, estimated_error, linztn_angle;
 640              		.loc 1 2248 5 view .LVU183
2249:Core/Src/tmag5170_ex.c **** 
2250:Core/Src/tmag5170_ex.c ****     if ( measAngle >= knownAngle[0] )
 641              		.loc 1 2250 5 view .LVU184
 642              		.loc 1 2250 33 is_stmt 0 view .LVU185
 643 0000 90ED007A 		vldr.32	s14, [r0]
 644              		.loc 1 2250 8 view .LVU186
 645 0004 B4EEC07A 		vcmpe.f32	s14, s0
 646 0008 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 647 000c 40D9     		bls	.L49
2246:Core/Src/tmag5170_ex.c ****     uint16_t bottom_index;
 648              		.loc 1 2246 14 view .LVU187
 649 000e 1346     		mov	r3, r2
 650              	.LVL65:
 651              	.L43:
2251:Core/Src/tmag5170_ex.c ****     {
2252:Core/Src/tmag5170_ex.c ****         for ( top_index = 1; top_index < known_length ; top_index++ )
2253:Core/Src/tmag5170_ex.c ****         {
2254:Core/Src/tmag5170_ex.c ****             if ( measAngle < knownAngle[top_index] ) break;
2255:Core/Src/tmag5170_ex.c ****         }
2256:Core/Src/tmag5170_ex.c ****     }
2257:Core/Src/tmag5170_ex.c ****     bottom_index = top_index - 1;
 652              		.loc 1 2257 5 is_stmt 1 view .LVU188
 653              		.loc 1 2257 18 is_stmt 0 view .LVU189
 654 0010 03F1FF3C 		add	ip, r3, #-1
 655 0014 1FFA8CFC 		uxth	ip, ip
 656              	.LVL66:
2258:Core/Src/tmag5170_ex.c ****     if ( top_index == known_length )
 657              		.loc 1 2258 5 is_stmt 1 view .LVU190
 658              		.loc 1 2258 8 is_stmt 0 view .LVU191
 659 0018 9342     		cmp	r3, r2
 660 001a 3BD0     		beq	.L51
2259:Core/Src/tmag5170_ex.c ****     {
2260:Core/Src/tmag5170_ex.c ****         top_index = 0;
2261:Core/Src/tmag5170_ex.c ****         coord_diff = (knownAngle[top_index] + 360) - knownAngle[bottom_index];
2262:Core/Src/tmag5170_ex.c ****     }
2263:Core/Src/tmag5170_ex.c ****     else
2264:Core/Src/tmag5170_ex.c ****     {
2265:Core/Src/tmag5170_ex.c ****         coord_diff = knownAngle[top_index] - knownAngle[bottom_index];
 661              		.loc 1 2265 9 is_stmt 1 view .LVU192
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 53


 662              		.loc 1 2265 32 is_stmt 0 view .LVU193
 663 001c 00EB8302 		add	r2, r0, r3, lsl #2
 664              	.LVL67:
 665              		.loc 1 2265 32 view .LVU194
 666 0020 92ED007A 		vldr.32	s14, [r2]
 667              		.loc 1 2265 56 view .LVU195
 668 0024 00EB8C02 		add	r2, r0, ip, lsl #2
 669 0028 D2ED007A 		vldr.32	s15, [r2]
 670              		.loc 1 2265 20 view .LVU196
 671 002c 37EE677A 		vsub.f32	s14, s14, s15
 672              	.LVL68:
 673              	.L46:
2266:Core/Src/tmag5170_ex.c ****     }
2267:Core/Src/tmag5170_ex.c **** 
2268:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[bottom_index];
 674              		.loc 1 2268 5 is_stmt 1 view .LVU197
 675              		.loc 1 2268 28 is_stmt 0 view .LVU198
 676 0030 01EB8303 		add	r3, r1, r3, lsl #2
 677              	.LVL69:
 678              		.loc 1 2268 28 view .LVU199
 679 0034 93ED006A 		vldr.32	s12, [r3]
 680              		.loc 1 2268 52 view .LVU200
 681 0038 01EB8C01 		add	r1, r1, ip, lsl #2
 682              	.LVL70:
 683              		.loc 1 2268 52 view .LVU201
 684 003c D1ED006A 		vldr.32	s13, [r1]
 685              		.loc 1 2268 16 view .LVU202
 686 0040 36EE666A 		vsub.f32	s12, s12, s13
 687              	.LVL71:
2269:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 688              		.loc 1 2269 5 is_stmt 1 view .LVU203
 689              		.loc 1 2269 11 is_stmt 0 view .LVU204
 690 0044 C6EE075A 		vdiv.f32	s11, s12, s14
 691              	.LVL72:
2270:Core/Src/tmag5170_ex.c ****     estimated_error = ( measAngle - knownAngle[bottom_index] )*slope + knownError[bottom_index];
 692              		.loc 1 2270 5 is_stmt 1 view .LVU205
 693              		.loc 1 2270 47 is_stmt 0 view .LVU206
 694 0048 00EB8C00 		add	r0, r0, ip, lsl #2
 695              	.LVL73:
 696              		.loc 1 2270 47 view .LVU207
 697 004c D0ED007A 		vldr.32	s15, [r0]
 698              		.loc 1 2270 35 view .LVU208
 699 0050 70EE677A 		vsub.f32	s15, s0, s15
 700              		.loc 1 2270 63 view .LVU209
 701 0054 67EEA57A 		vmul.f32	s15, s15, s11
 702              		.loc 1 2270 21 view .LVU210
 703 0058 76EEA77A 		vadd.f32	s15, s13, s15
 704              	.LVL74:
2271:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle - estimated_error;
 705              		.loc 1 2271 5 is_stmt 1 view .LVU211
 706              		.loc 1 2271 18 is_stmt 0 view .LVU212
 707 005c 30EE670A 		vsub.f32	s0, s0, s15
 708              	.LVL75:
2272:Core/Src/tmag5170_ex.c ****     if ( linztn_angle >= 360 ) linztn_angle -= 360;
 709              		.loc 1 2272 5 is_stmt 1 view .LVU213
 710              		.loc 1 2272 8 is_stmt 0 view .LVU214
 711 0060 DFED127A 		vldr.32	s15, .L53
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 54


 712              	.LVL76:
 713              		.loc 1 2272 8 view .LVU215
 714 0064 B4EEE70A 		vcmpe.f32	s0, s15
 715 0068 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 716 006c 01DB     		blt	.L41
 717              		.loc 1 2272 32 is_stmt 1 discriminator 1 view .LVU216
 718              		.loc 1 2272 45 is_stmt 0 discriminator 1 view .LVU217
 719 006e 30EE670A 		vsub.f32	s0, s0, s15
 720              	.LVL77:
2273:Core/Src/tmag5170_ex.c **** 
2274:Core/Src/tmag5170_ex.c ****     return linztn_angle;
 721              		.loc 1 2274 5 is_stmt 1 discriminator 1 view .LVU218
 722              	.L41:
2275:Core/Src/tmag5170_ex.c **** }
 723              		.loc 1 2275 1 is_stmt 0 view .LVU219
 724 0072 7047     		bx	lr
 725              	.LVL78:
 726              	.L52:
2252:Core/Src/tmag5170_ex.c ****         {
 727              		.loc 1 2252 57 is_stmt 1 discriminator 2 view .LVU220
2252:Core/Src/tmag5170_ex.c ****         {
 728              		.loc 1 2252 66 is_stmt 0 discriminator 2 view .LVU221
 729 0074 0133     		adds	r3, r3, #1
 730              	.LVL79:
2252:Core/Src/tmag5170_ex.c ****         {
 731              		.loc 1 2252 66 discriminator 2 view .LVU222
 732 0076 9BB2     		uxth	r3, r3
 733              	.LVL80:
 734              	.L42:
2252:Core/Src/tmag5170_ex.c ****         {
 735              		.loc 1 2252 30 is_stmt 1 discriminator 1 view .LVU223
2252:Core/Src/tmag5170_ex.c ****         {
 736              		.loc 1 2252 9 is_stmt 0 discriminator 1 view .LVU224
 737 0078 9342     		cmp	r3, r2
 738 007a C9D2     		bcs	.L43
2254:Core/Src/tmag5170_ex.c ****         }
 739              		.loc 1 2254 13 is_stmt 1 view .LVU225
2254:Core/Src/tmag5170_ex.c ****         }
 740              		.loc 1 2254 40 is_stmt 0 view .LVU226
 741 007c 00EB830C 		add	ip, r0, r3, lsl #2
 742 0080 DCED007A 		vldr.32	s15, [ip]
2254:Core/Src/tmag5170_ex.c ****         }
 743              		.loc 1 2254 16 view .LVU227
 744 0084 F4EEC07A 		vcmpe.f32	s15, s0
 745 0088 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 746 008c F2DD     		ble	.L52
 747 008e BFE7     		b	.L43
 748              	.LVL81:
 749              	.L49:
2252:Core/Src/tmag5170_ex.c ****         {
 750              		.loc 1 2252 25 view .LVU228
 751 0090 0123     		movs	r3, #1
 752 0092 F1E7     		b	.L42
 753              	.LVL82:
 754              	.L51:
2260:Core/Src/tmag5170_ex.c ****         coord_diff = (knownAngle[top_index] + 360) - knownAngle[bottom_index];
 755              		.loc 1 2260 9 is_stmt 1 view .LVU229
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 55


2261:Core/Src/tmag5170_ex.c ****     }
 756              		.loc 1 2261 9 view .LVU230
2261:Core/Src/tmag5170_ex.c ****     }
 757              		.loc 1 2261 45 is_stmt 0 view .LVU231
 758 0094 DFED057A 		vldr.32	s15, .L53
 759 0098 37EE277A 		vadd.f32	s14, s14, s15
2261:Core/Src/tmag5170_ex.c ****     }
 760              		.loc 1 2261 64 view .LVU232
 761 009c 00EB8C03 		add	r3, r0, ip, lsl #2
 762 00a0 D3ED007A 		vldr.32	s15, [r3]
2261:Core/Src/tmag5170_ex.c ****     }
 763              		.loc 1 2261 20 view .LVU233
 764 00a4 37EE677A 		vsub.f32	s14, s14, s15
 765              	.LVL83:
2260:Core/Src/tmag5170_ex.c ****         coord_diff = (knownAngle[top_index] + 360) - knownAngle[bottom_index];
 766              		.loc 1 2260 19 view .LVU234
 767 00a8 0023     		movs	r3, #0
 768 00aa C1E7     		b	.L46
 769              	.L54:
 770              		.align	2
 771              	.L53:
 772 00ac 0000B443 		.word	1135869952
 773              		.cfi_endproc
 774              	.LFE75:
 776              		.section	.text.isqrt32,"ax",%progbits
 777              		.align	1
 778              		.global	isqrt32
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	isqrt32:
 784              	.LVL84:
 785              	.LFB76:
2276:Core/Src/tmag5170_ex.c **** 
2277:Core/Src/tmag5170_ex.c **** 
2278:Core/Src/tmag5170_ex.c **** 
2279:Core/Src/tmag5170_ex.c **** 
2280:Core/Src/tmag5170_ex.c **** 
2281:Core/Src/tmag5170_ex.c **** //****************************************************************************
2282:Core/Src/tmag5170_ex.c **** //****************************************************************************
2283:Core/Src/tmag5170_ex.c **** //
2284:Core/Src/tmag5170_ex.c **** // Helper Functions
2285:Core/Src/tmag5170_ex.c **** //
2286:Core/Src/tmag5170_ex.c **** //****************************************************************************
2287:Core/Src/tmag5170_ex.c **** //****************************************************************************
2288:Core/Src/tmag5170_ex.c **** 
2289:Core/Src/tmag5170_ex.c **** 
2290:Core/Src/tmag5170_ex.c **** //****************************************************************************
2291:Core/Src/tmag5170_ex.c **** //! 32-bit Square Root Function
2292:Core/Src/tmag5170_ex.c **** //!
2293:Core/Src/tmag5170_ex.c **** //! Takes the square of the input integer h and returns a 32-bit value that can
2294:Core/Src/tmag5170_ex.c **** //! be converted to the floating point value by dividing it by 65536.
2295:Core/Src/tmag5170_ex.c **** //****************************************************************************
2296:Core/Src/tmag5170_ex.c **** uint32_t isqrt32(uint32_t h)
2297:Core/Src/tmag5170_ex.c **** {
 786              		.loc 1 2297 1 is_stmt 1 view -0
 787              		.cfi_startproc
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 56


 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791              		.loc 1 2297 1 is_stmt 0 view .LVU236
 792 0000 0246     		mov	r2, r0
2298:Core/Src/tmag5170_ex.c ****     uint32_t x;
 793              		.loc 1 2298 5 is_stmt 1 view .LVU237
2299:Core/Src/tmag5170_ex.c ****     uint32_t y;
 794              		.loc 1 2299 5 view .LVU238
2300:Core/Src/tmag5170_ex.c ****     int i;
 795              		.loc 1 2300 5 view .LVU239
2301:Core/Src/tmag5170_ex.c ****     x = y = 0;
 796              		.loc 1 2301 5 view .LVU240
 797              	.LVL85:
2302:Core/Src/tmag5170_ex.c ****     for (i = 0;  i < 32;  i++)
 798              		.loc 1 2302 5 view .LVU241
 799              		.loc 1 2302 12 is_stmt 0 view .LVU242
 800 0002 0021     		movs	r1, #0
2301:Core/Src/tmag5170_ex.c ****     x = y = 0;
 801              		.loc 1 2301 11 view .LVU243
 802 0004 0B46     		mov	r3, r1
2301:Core/Src/tmag5170_ex.c ****     x = y = 0;
 803              		.loc 1 2301 7 view .LVU244
 804 0006 0846     		mov	r0, r1
 805              	.LVL86:
 806              		.loc 1 2302 5 view .LVU245
 807 0008 0AE0     		b	.L56
 808              	.LVL87:
 809              	.L57:
2303:Core/Src/tmag5170_ex.c ****     {
2304:Core/Src/tmag5170_ex.c ****         x = (x << 1) | 1;
2305:Core/Src/tmag5170_ex.c ****         if (y < x) x -= 2;
2306:Core/Src/tmag5170_ex.c ****         else y -= x;
 810              		.loc 1 2306 14 is_stmt 1 view .LVU246
 811              		.loc 1 2306 16 is_stmt 0 view .LVU247
 812 000a 1B1A     		subs	r3, r3, r0
 813              	.LVL88:
 814              	.L58:
2307:Core/Src/tmag5170_ex.c ****         x++;
 815              		.loc 1 2307 9 is_stmt 1 view .LVU248
 816              		.loc 1 2307 10 is_stmt 0 view .LVU249
 817 000c 0130     		adds	r0, r0, #1
 818              	.LVL89:
2308:Core/Src/tmag5170_ex.c ****         y <<= 1;
 819              		.loc 1 2308 9 is_stmt 1 view .LVU250
 820              		.loc 1 2308 11 is_stmt 0 view .LVU251
 821 000e 5B00     		lsls	r3, r3, #1
 822              	.LVL90:
2309:Core/Src/tmag5170_ex.c ****         if ((h & 0x80000000)) y |= 1;
 823              		.loc 1 2309 9 is_stmt 1 view .LVU252
 824              		.loc 1 2309 12 is_stmt 0 view .LVU253
 825 0010 002A     		cmp	r2, #0
 826 0012 0EDB     		blt	.L62
 827              	.L59:
2310:Core/Src/tmag5170_ex.c ****         h <<= 1;
 828              		.loc 1 2310 9 is_stmt 1 view .LVU254
 829              	.LVL91:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 57


2311:Core/Src/tmag5170_ex.c ****         y <<= 1;
 830              		.loc 1 2311 9 view .LVU255
 831              		.loc 1 2311 11 is_stmt 0 view .LVU256
 832 0014 5B00     		lsls	r3, r3, #1
 833              	.LVL92:
2312:Core/Src/tmag5170_ex.c ****         if ((h & 0x80000000)) y |= 1;
 834              		.loc 1 2312 9 is_stmt 1 view .LVU257
 835              		.loc 1 2312 12 is_stmt 0 view .LVU258
 836 0016 12F0804F 		tst	r2, #1073741824
 837 001a 0DD1     		bne	.L63
 838              	.L60:
2313:Core/Src/tmag5170_ex.c ****         h <<= 1;
 839              		.loc 1 2313 9 is_stmt 1 discriminator 2 view .LVU259
 840              		.loc 1 2313 11 is_stmt 0 discriminator 2 view .LVU260
 841 001c 9200     		lsls	r2, r2, #2
 842              	.LVL93:
2302:Core/Src/tmag5170_ex.c ****     {
 843              		.loc 1 2302 27 is_stmt 1 discriminator 2 view .LVU261
2302:Core/Src/tmag5170_ex.c ****     {
 844              		.loc 1 2302 28 is_stmt 0 discriminator 2 view .LVU262
 845 001e 0131     		adds	r1, r1, #1
 846              	.LVL94:
 847              	.L56:
2302:Core/Src/tmag5170_ex.c ****     {
 848              		.loc 1 2302 18 is_stmt 1 discriminator 1 view .LVU263
2302:Core/Src/tmag5170_ex.c ****     {
 849              		.loc 1 2302 5 is_stmt 0 discriminator 1 view .LVU264
 850 0020 1F29     		cmp	r1, #31
 851 0022 0CDC     		bgt	.L64
2304:Core/Src/tmag5170_ex.c ****         if (y < x) x -= 2;
 852              		.loc 1 2304 9 is_stmt 1 view .LVU265
2304:Core/Src/tmag5170_ex.c ****         if (y < x) x -= 2;
 853              		.loc 1 2304 16 is_stmt 0 view .LVU266
 854 0024 4000     		lsls	r0, r0, #1
 855              	.LVL95:
2304:Core/Src/tmag5170_ex.c ****         if (y < x) x -= 2;
 856              		.loc 1 2304 11 view .LVU267
 857 0026 40F00100 		orr	r0, r0, #1
 858              	.LVL96:
2305:Core/Src/tmag5170_ex.c ****         else y -= x;
 859              		.loc 1 2305 9 is_stmt 1 view .LVU268
2305:Core/Src/tmag5170_ex.c ****         else y -= x;
 860              		.loc 1 2305 12 is_stmt 0 view .LVU269
 861 002a 8342     		cmp	r3, r0
 862 002c EDD2     		bcs	.L57
2305:Core/Src/tmag5170_ex.c ****         else y -= x;
 863              		.loc 1 2305 20 is_stmt 1 discriminator 1 view .LVU270
2305:Core/Src/tmag5170_ex.c ****         else y -= x;
 864              		.loc 1 2305 22 is_stmt 0 discriminator 1 view .LVU271
 865 002e 0238     		subs	r0, r0, #2
 866              	.LVL97:
2305:Core/Src/tmag5170_ex.c ****         else y -= x;
 867              		.loc 1 2305 22 discriminator 1 view .LVU272
 868 0030 ECE7     		b	.L58
 869              	.L62:
2309:Core/Src/tmag5170_ex.c ****         h <<= 1;
 870              		.loc 1 2309 31 is_stmt 1 discriminator 1 view .LVU273
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 58


2309:Core/Src/tmag5170_ex.c ****         h <<= 1;
 871              		.loc 1 2309 33 is_stmt 0 discriminator 1 view .LVU274
 872 0032 43F00103 		orr	r3, r3, #1
 873              	.LVL98:
2309:Core/Src/tmag5170_ex.c ****         h <<= 1;
 874              		.loc 1 2309 33 discriminator 1 view .LVU275
 875 0036 EDE7     		b	.L59
 876              	.LVL99:
 877              	.L63:
2312:Core/Src/tmag5170_ex.c ****         h <<= 1;
 878              		.loc 1 2312 31 is_stmt 1 discriminator 1 view .LVU276
2312:Core/Src/tmag5170_ex.c ****         h <<= 1;
 879              		.loc 1 2312 33 is_stmt 0 discriminator 1 view .LVU277
 880 0038 43F00103 		orr	r3, r3, #1
 881              	.LVL100:
2312:Core/Src/tmag5170_ex.c ****         h <<= 1;
 882              		.loc 1 2312 33 discriminator 1 view .LVU278
 883 003c EEE7     		b	.L60
 884              	.LVL101:
 885              	.L64:
2314:Core/Src/tmag5170_ex.c ****     }
2315:Core/Src/tmag5170_ex.c ****     return  x;
 886              		.loc 1 2315 5 is_stmt 1 view .LVU279
2316:Core/Src/tmag5170_ex.c **** }
 887              		.loc 1 2316 1 is_stmt 0 view .LVU280
 888 003e 7047     		bx	lr
 889              		.cfi_endproc
 890              	.LFE76:
 892              		.section	.text.mag3D,"ax",%progbits
 893              		.align	1
 894              		.global	mag3D
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 899              	mag3D:
 900              	.LVL102:
 901              	.LFB71:
2096:Core/Src/tmag5170_ex.c ****     uint32_t temp1, temp2,temp3;
 902              		.loc 1 2096 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
2096:Core/Src/tmag5170_ex.c ****     uint32_t temp1, temp2,temp3;
 906              		.loc 1 2096 1 is_stmt 0 view .LVU282
 907 0000 08B5     		push	{r3, lr}
 908              	.LCFI11:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 3, -8
 911              		.cfi_offset 14, -4
2097:Core/Src/tmag5170_ex.c **** 
 912              		.loc 1 2097 5 is_stmt 1 view .LVU283
2099:Core/Src/tmag5170_ex.c ****     temp3=temp3*temp3;
 913              		.loc 1 2099 5 view .LVU284
2099:Core/Src/tmag5170_ex.c ****     temp3=temp3*temp3;
 914              		.loc 1 2099 17 is_stmt 0 view .LVU285
 915 0002 5210     		asrs	r2, r2, #1
 916              	.LVL103:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 59


2100:Core/Src/tmag5170_ex.c **** 
 917              		.loc 1 2100 5 is_stmt 1 view .LVU286
2102:Core/Src/tmag5170_ex.c ****     temp2= temp2*temp2;
 918              		.loc 1 2102 5 view .LVU287
2102:Core/Src/tmag5170_ex.c ****     temp2= temp2*temp2;
 919              		.loc 1 2102 16 is_stmt 0 view .LVU288
 920 0004 4910     		asrs	r1, r1, #1
 921              	.LVL104:
2103:Core/Src/tmag5170_ex.c **** 
 922              		.loc 1 2103 5 is_stmt 1 view .LVU289
2103:Core/Src/tmag5170_ex.c **** 
 923              		.loc 1 2103 10 is_stmt 0 view .LVU290
 924 0006 01FB01F1 		mul	r1, r1, r1
 925              	.LVL105:
2105:Core/Src/tmag5170_ex.c ****     temp1=temp1*temp1;
 926              		.loc 1 2105 5 is_stmt 1 view .LVU291
2105:Core/Src/tmag5170_ex.c ****     temp1=temp1*temp1;
 927              		.loc 1 2105 17 is_stmt 0 view .LVU292
 928 000a 4010     		asrs	r0, r0, #1
 929              	.LVL106:
2106:Core/Src/tmag5170_ex.c **** 
 930              		.loc 1 2106 5 is_stmt 1 view .LVU293
2109:Core/Src/tmag5170_ex.c ****     temp1=isqrt32(temp1)>>16;
 931              		.loc 1 2109 5 view .LVU294
2109:Core/Src/tmag5170_ex.c ****     temp1=isqrt32(temp1)>>16;
 932              		.loc 1 2109 16 is_stmt 0 view .LVU295
 933 000c 02FB0212 		mla	r2, r2, r2, r1
 934              	.LVL107:
2110:Core/Src/tmag5170_ex.c ****     return temp1<<1;
 935              		.loc 1 2110 5 is_stmt 1 view .LVU296
2110:Core/Src/tmag5170_ex.c ****     return temp1<<1;
 936              		.loc 1 2110 11 is_stmt 0 view .LVU297
 937 0010 00FB0020 		mla	r0, r0, r0, r2
 938              	.LVL108:
2110:Core/Src/tmag5170_ex.c ****     return temp1<<1;
 939              		.loc 1 2110 11 view .LVU298
 940 0014 FFF7FEFF 		bl	isqrt32
 941              	.LVL109:
2110:Core/Src/tmag5170_ex.c ****     return temp1<<1;
 942              		.loc 1 2110 10 view .LVU299
 943 0018 000C     		lsrs	r0, r0, #16
 944              	.LVL110:
2111:Core/Src/tmag5170_ex.c **** }
 945              		.loc 1 2111 5 is_stmt 1 view .LVU300
2112:Core/Src/tmag5170_ex.c **** 
 946              		.loc 1 2112 1 is_stmt 0 view .LVU301
 947 001a 4000     		lsls	r0, r0, #1
 948              	.LVL111:
2112:Core/Src/tmag5170_ex.c **** 
 949              		.loc 1 2112 1 view .LVU302
 950 001c 08BD     		pop	{r3, pc}
 951              		.cfi_endproc
 952              	.LFE71:
 954              		.section	.text.convertToSpherical,"ax",%progbits
 955              		.align	1
 956              		.global	convertToSpherical
 957              		.syntax unified
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 60


 958              		.thumb
 959              		.thumb_func
 961              	convertToSpherical:
 962              	.LVL112:
 963              	.LFB69:
2050:Core/Src/tmag5170_ex.c ****     int32_t angle_mag_readings[2];
 964              		.loc 1 2050 1 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 8
 967              		@ frame_needed = 0, uses_anonymous_args = 0
2050:Core/Src/tmag5170_ex.c ****     int32_t angle_mag_readings[2];
 968              		.loc 1 2050 1 is_stmt 0 view .LVU304
 969 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 970              	.LCFI12:
 971              		.cfi_def_cfa_offset 20
 972              		.cfi_offset 4, -20
 973              		.cfi_offset 5, -16
 974              		.cfi_offset 6, -12
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 83B0     		sub	sp, sp, #12
 978              	.LCFI13:
 979              		.cfi_def_cfa_offset 32
 980 0004 0746     		mov	r7, r0
 981 0006 0E46     		mov	r6, r1
 982 0008 1546     		mov	r5, r2
 983 000a 1C46     		mov	r4, r3
2051:Core/Src/tmag5170_ex.c ****     uint32_t xy_magnitude;
 984              		.loc 1 2051 5 is_stmt 1 view .LVU305
2052:Core/Src/tmag5170_ex.c **** 
 985              		.loc 1 2052 5 view .LVU306
2055:Core/Src/tmag5170_ex.c **** 
 986              		.loc 1 2055 5 view .LVU307
2055:Core/Src/tmag5170_ex.c **** 
 987              		.loc 1 2055 17 is_stmt 0 view .LVU308
 988 000c FFF7FEFF 		bl	mag3D
 989              	.LVL113:
2055:Core/Src/tmag5170_ex.c **** 
 990              		.loc 1 2055 15 view .LVU309
 991 0010 2060     		str	r0, [r4]
2057:Core/Src/tmag5170_ex.c ****     results[1]=angle_mag_readings[0];
 992              		.loc 1 2057 5 is_stmt 1 view .LVU310
 993 0012 6B46     		mov	r3, sp
 994 0014 0A22     		movs	r2, #10
 995 0016 3946     		mov	r1, r7
 996 0018 3046     		mov	r0, r6
 997 001a FFF7FEFF 		bl	atan2CORDIC
 998              	.LVL114:
2058:Core/Src/tmag5170_ex.c ****     xy_magnitude=angle_mag_readings[1];
 999              		.loc 1 2058 5 view .LVU311
2058:Core/Src/tmag5170_ex.c ****     xy_magnitude=angle_mag_readings[1];
 1000              		.loc 1 2058 34 is_stmt 0 view .LVU312
 1001 001e 009B     		ldr	r3, [sp]
2058:Core/Src/tmag5170_ex.c ****     xy_magnitude=angle_mag_readings[1];
 1002              		.loc 1 2058 15 view .LVU313
 1003 0020 6360     		str	r3, [r4, #4]
2059:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 61


 1004              		.loc 1 2059 5 is_stmt 1 view .LVU314
 1005              	.LVL115:
2061:Core/Src/tmag5170_ex.c ****     results[2]=angle_mag_readings[0];
 1006              		.loc 1 2061 5 view .LVU315
 1007 0022 6B46     		mov	r3, sp
 1008 0024 0A22     		movs	r2, #10
 1009 0026 2946     		mov	r1, r5
 1010 0028 BDF90400 		ldrsh	r0, [sp, #4]
 1011 002c FFF7FEFF 		bl	atan2CORDIC
 1012              	.LVL116:
2062:Core/Src/tmag5170_ex.c **** 
 1013              		.loc 1 2062 5 view .LVU316
2062:Core/Src/tmag5170_ex.c **** 
 1014              		.loc 1 2062 34 is_stmt 0 view .LVU317
 1015 0030 009B     		ldr	r3, [sp]
2062:Core/Src/tmag5170_ex.c **** 
 1016              		.loc 1 2062 15 view .LVU318
 1017 0032 A360     		str	r3, [r4, #8]
2064:Core/Src/tmag5170_ex.c **** 
 1018              		.loc 1 2064 1 view .LVU319
 1019 0034 03B0     		add	sp, sp, #12
 1020              	.LCFI14:
 1021              		.cfi_def_cfa_offset 20
 1022              		@ sp needed
 1023 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
2064:Core/Src/tmag5170_ex.c **** 
 1024              		.loc 1 2064 1 view .LVU320
 1025              		.cfi_endproc
 1026              	.LFE69:
 1028              		.section	.text.resultRegisterTomT,"ax",%progbits
 1029              		.align	1
 1030              		.global	resultRegisterTomT
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1035              	resultRegisterTomT:
 1036              	.LVL117:
 1037              	.LFB77:
2317:Core/Src/tmag5170_ex.c **** 
2318:Core/Src/tmag5170_ex.c **** //****************************************************************************
2319:Core/Src/tmag5170_ex.c **** //! Convert Axis Measurement Result Register to mT value
2320:Core/Src/tmag5170_ex.c **** //!
2321:Core/Src/tmag5170_ex.c **** //! Takes in the register of one of the magnetic axis results and the range for
2322:Core/Src/tmag5170_ex.c **** //! that specific axis and calculates the mT value the register represents.
2323:Core/Src/tmag5170_ex.c **** //****************************************************************************
2324:Core/Src/tmag5170_ex.c **** float resultRegisterTomT( int16_t register_bits, uint16_t range )
2325:Core/Src/tmag5170_ex.c **** {
 1038              		.loc 1 2325 1 is_stmt 1 view -0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 0
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 1042              		@ link register save eliminated.
 1043              		.loc 1 2325 1 is_stmt 0 view .LVU322
 1044 0000 07EE900A 		vmov	s15, r0	@ int
 1045 0004 00EE101A 		vmov	s0, r1	@ int
2326:Core/Src/tmag5170_ex.c ****     return (((float) register_bits) / 32768) * range;
 1046              		.loc 1 2326 5 is_stmt 1 view .LVU323
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 62


 1047              		.loc 1 2326 14 is_stmt 0 view .LVU324
 1048 0008 F8EEE77A 		vcvt.f32.s32	s15, s15
 1049              		.loc 1 2326 37 view .LVU325
 1050 000c 9FED047A 		vldr.32	s14, .L70
 1051 0010 67EE877A 		vmul.f32	s15, s15, s14
 1052              		.loc 1 2326 46 view .LVU326
 1053 0014 B8EEC00A 		vcvt.f32.s32	s0, s0
2327:Core/Src/tmag5170_ex.c **** }
 1054              		.loc 1 2327 1 view .LVU327
 1055 0018 20EE270A 		vmul.f32	s0, s0, s15
 1056 001c 7047     		bx	lr
 1057              	.L71:
 1058 001e 00BF     		.align	2
 1059              	.L70:
 1060 0020 00000038 		.word	939524096
 1061              		.cfi_endproc
 1062              	.LFE77:
 1064              		.section	.text.piecewiseLinearizationRegister,"ax",%progbits
 1065              		.align	1
 1066              		.global	piecewiseLinearizationRegister
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	piecewiseLinearizationRegister:
 1072              	.LVL118:
 1073              	.LFB72:
2129:Core/Src/tmag5170_ex.c **** 
 1074              		.loc 1 2129 1 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 4, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
2129:Core/Src/tmag5170_ex.c **** 
 1078              		.loc 1 2129 1 is_stmt 0 view .LVU329
 1079 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1080              	.LCFI15:
 1081              		.cfi_def_cfa_offset 32
 1082              		.cfi_offset 3, -32
 1083              		.cfi_offset 4, -28
 1084              		.cfi_offset 5, -24
 1085              		.cfi_offset 6, -20
 1086              		.cfi_offset 7, -16
 1087              		.cfi_offset 8, -12
 1088              		.cfi_offset 9, -8
 1089              		.cfi_offset 14, -4
 1090 0004 2DED028B 		vpush.64	{d8}
 1091              	.LCFI16:
 1092              		.cfi_def_cfa_offset 40
 1093              		.cfi_offset 80, -40
 1094              		.cfi_offset 81, -36
 1095 0008 0546     		mov	r5, r0
 1096 000a 0F46     		mov	r7, r1
 1097 000c 1E46     		mov	r6, r3
 1098 000e BDF82880 		ldrh	r8, [sp, #40]
2131:Core/Src/tmag5170_ex.c **** 
 1099              		.loc 1 2131 5 is_stmt 1 view .LVU330
2133:Core/Src/tmag5170_ex.c ****     {
 1100              		.loc 1 2133 5 view .LVU331
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 63


 1101              	.LVL119:
2133:Core/Src/tmag5170_ex.c ****     {
 1102              		.loc 1 2133 21 is_stmt 0 view .LVU332
 1103 0012 0124     		movs	r4, #1
2133:Core/Src/tmag5170_ex.c ****     {
 1104              		.loc 1 2133 5 view .LVU333
 1105 0014 01E0     		b	.L73
 1106              	.LVL120:
 1107              	.L77:
2133:Core/Src/tmag5170_ex.c ****     {
 1108              		.loc 1 2133 57 is_stmt 1 discriminator 2 view .LVU334
2133:Core/Src/tmag5170_ex.c ****     {
 1109              		.loc 1 2133 66 is_stmt 0 discriminator 2 view .LVU335
 1110 0016 0134     		adds	r4, r4, #1
 1111              	.LVL121:
2133:Core/Src/tmag5170_ex.c ****     {
 1112              		.loc 1 2133 66 discriminator 2 view .LVU336
 1113 0018 A4B2     		uxth	r4, r4
 1114              	.LVL122:
 1115              	.L73:
2133:Core/Src/tmag5170_ex.c ****     {
 1116              		.loc 1 2133 26 is_stmt 1 discriminator 1 view .LVU337
2133:Core/Src/tmag5170_ex.c ****     {
 1117              		.loc 1 2133 51 is_stmt 0 discriminator 1 view .LVU338
 1118 001a 02F1FF3C 		add	ip, r2, #-1
2133:Core/Src/tmag5170_ex.c ****     {
 1119              		.loc 1 2133 5 discriminator 1 view .LVU339
 1120 001e 6445     		cmp	r4, ip
 1121 0020 03DA     		bge	.L74
2135:Core/Src/tmag5170_ex.c ****     }
 1122              		.loc 1 2135 9 is_stmt 1 view .LVU340
2135:Core/Src/tmag5170_ex.c ****     }
 1123              		.loc 1 2135 36 is_stmt 0 view .LVU341
 1124 0022 35F914C0 		ldrsh	ip, [r5, r4, lsl #1]
2135:Core/Src/tmag5170_ex.c ****     }
 1125              		.loc 1 2135 12 view .LVU342
 1126 0026 B445     		cmp	ip, r6
 1127 0028 F5DD     		ble	.L77
 1128              	.L74:
2138:Core/Src/tmag5170_ex.c ****     float bottomValue_f = resultRegisterTomT(knownValue[top_index - 1], range);
 1129              		.loc 1 2138 5 is_stmt 1 view .LVU343
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1130              		.loc 1 2139 5 view .LVU344
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1131              		.loc 1 2139 56 is_stmt 0 view .LVU345
 1132 002a 04F10043 		add	r3, r4, #-2147483648
 1133              	.LVL123:
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1134              		.loc 1 2139 56 view .LVU346
 1135 002e 013B     		subs	r3, r3, #1
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1136              		.loc 1 2139 27 view .LVU347
 1137 0030 35F91390 		ldrsh	r9, [r5, r3, lsl #1]
 1138 0034 4146     		mov	r1, r8
 1139              	.LVL124:
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1140              		.loc 1 2139 27 view .LVU348
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 64


 1141 0036 4846     		mov	r0, r9
 1142              	.LVL125:
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1143              		.loc 1 2139 27 view .LVU349
 1144 0038 FFF7FEFF 		bl	resultRegisterTomT
 1145              	.LVL126:
2139:Core/Src/tmag5170_ex.c ****     float measValue_f = resultRegisterTomT(measValue, range);
 1146              		.loc 1 2139 27 view .LVU350
 1147 003c B0EE408A 		vmov.f32	s16, s0
 1148              	.LVL127:
2140:Core/Src/tmag5170_ex.c **** 
 1149              		.loc 1 2140 5 is_stmt 1 view .LVU351
2140:Core/Src/tmag5170_ex.c **** 
 1150              		.loc 1 2140 25 is_stmt 0 view .LVU352
 1151 0040 4146     		mov	r1, r8
 1152 0042 3046     		mov	r0, r6
 1153 0044 FFF7FEFF 		bl	resultRegisterTomT
 1154              	.LVL128:
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1155              		.loc 1 2142 5 is_stmt 1 view .LVU353
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1156              		.loc 1 2142 38 is_stmt 0 view .LVU354
 1157 0048 35F91430 		ldrsh	r3, [r5, r4, lsl #1]
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1158              		.loc 1 2142 50 view .LVU355
 1159 004c A3EB0903 		sub	r3, r3, r9
 1160 0050 07EE903A 		vmov	s15, r3	@ int
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1161              		.loc 1 2142 19 view .LVU356
 1162 0054 F8EEE77A 		vcvt.f32.s32	s15, s15
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1163              		.loc 1 2142 79 view .LVU357
 1164 0058 9FED127A 		vldr.32	s14, .L78
 1165 005c 67EE877A 		vmul.f32	s15, s15, s14
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1166              		.loc 1 2142 88 view .LVU358
 1167 0060 07EE108A 		vmov	s14, r8	@ int
 1168 0064 B8EEC77A 		vcvt.f32.s32	s14, s14
2142:Core/Src/tmag5170_ex.c ****     error_diff = knownError[top_index] - knownError[top_index - 1];
 1169              		.loc 1 2142 16 view .LVU359
 1170 0068 67EE877A 		vmul.f32	s15, s15, s14
 1171              	.LVL129:
2143:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1172              		.loc 1 2143 5 is_stmt 1 view .LVU360
2143:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1173              		.loc 1 2143 28 is_stmt 0 view .LVU361
 1174 006c 07EB8403 		add	r3, r7, r4, lsl #2
 1175 0070 D3ED006A 		vldr.32	s13, [r3]
2143:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1176              		.loc 1 2143 52 view .LVU362
 1177 0074 04F18044 		add	r4, r4, #1073741824
 1178              	.LVL130:
2143:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1179              		.loc 1 2143 52 view .LVU363
 1180 0078 013C     		subs	r4, r4, #1
 1181 007a 07EB8404 		add	r4, r7, r4, lsl #2
 1182 007e 94ED007A 		vldr.32	s14, [r4]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 65


2143:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1183              		.loc 1 2143 16 view .LVU364
 1184 0082 76EEC76A 		vsub.f32	s13, s13, s14
 1185              	.LVL131:
2144:Core/Src/tmag5170_ex.c **** 
 1186              		.loc 1 2144 5 is_stmt 1 view .LVU365
2144:Core/Src/tmag5170_ex.c **** 
 1187              		.loc 1 2144 11 is_stmt 0 view .LVU366
 1188 0086 86EEA76A 		vdiv.f32	s12, s13, s15
 1189              	.LVL132:
2146:Core/Src/tmag5170_ex.c ****     return measValue_f - estimated_error;
 1190              		.loc 1 2146 5 is_stmt 1 view .LVU367
2146:Core/Src/tmag5170_ex.c ****     return measValue_f - estimated_error;
 1191              		.loc 1 2146 37 is_stmt 0 view .LVU368
 1192 008a 30EE488A 		vsub.f32	s16, s0, s16
 1193              	.LVL133:
2146:Core/Src/tmag5170_ex.c ****     return measValue_f - estimated_error;
 1194              		.loc 1 2146 54 view .LVU369
 1195 008e 28EE068A 		vmul.f32	s16, s16, s12
2146:Core/Src/tmag5170_ex.c ****     return measValue_f - estimated_error;
 1196              		.loc 1 2146 21 view .LVU370
 1197 0092 37EE088A 		vadd.f32	s16, s14, s16
 1198              	.LVL134:
2147:Core/Src/tmag5170_ex.c **** }
 1199              		.loc 1 2147 5 is_stmt 1 view .LVU371
2148:Core/Src/tmag5170_ex.c **** 
 1200              		.loc 1 2148 1 is_stmt 0 view .LVU372
 1201 0096 30EE480A 		vsub.f32	s0, s0, s16
 1202              	.LVL135:
2148:Core/Src/tmag5170_ex.c **** 
 1203              		.loc 1 2148 1 view .LVU373
 1204 009a BDEC028B 		vldm	sp!, {d8}
 1205              	.LCFI17:
 1206              		.cfi_restore 80
 1207              		.cfi_restore 81
 1208              		.cfi_def_cfa_offset 32
 1209              	.LVL136:
2148:Core/Src/tmag5170_ex.c **** 
 1210              		.loc 1 2148 1 view .LVU374
 1211 009e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1212              	.LVL137:
 1213              	.L79:
2148:Core/Src/tmag5170_ex.c **** 
 1214              		.loc 1 2148 1 view .LVU375
 1215 00a2 00BF     		.align	2
 1216              	.L78:
 1217 00a4 00000038 		.word	939524096
 1218              		.cfi_endproc
 1219              	.LFE72:
 1221              		.section	.text.angleRegisterToDeg,"ax",%progbits
 1222              		.align	1
 1223              		.global	angleRegisterToDeg
 1224              		.syntax unified
 1225              		.thumb
 1226              		.thumb_func
 1228              	angleRegisterToDeg:
 1229              	.LVL138:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 66


 1230              	.LFB78:
2328:Core/Src/tmag5170_ex.c **** 
2329:Core/Src/tmag5170_ex.c **** 
2330:Core/Src/tmag5170_ex.c **** 
2331:Core/Src/tmag5170_ex.c **** //****************************************************************************
2332:Core/Src/tmag5170_ex.c **** //! Convert Angle Result Register to degree value
2333:Core/Src/tmag5170_ex.c **** //!
2334:Core/Src/tmag5170_ex.c **** //! Takes in the bits of the angle result register and converts it to a
2335:Core/Src/tmag5170_ex.c **** //! degree value.
2336:Core/Src/tmag5170_ex.c **** //****************************************************************************
2337:Core/Src/tmag5170_ex.c **** float angleRegisterToDeg( uint16_t register_bits )
2338:Core/Src/tmag5170_ex.c **** {
 1231              		.loc 1 2338 1 is_stmt 1 view -0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              		@ link register save eliminated.
 1236              		.loc 1 2338 1 is_stmt 0 view .LVU377
 1237 0000 07EE900A 		vmov	s15, r0	@ int
2339:Core/Src/tmag5170_ex.c ****     return ( (float) register_bits / 16 );
 1238              		.loc 1 2339 5 is_stmt 1 view .LVU378
 1239              		.loc 1 2339 14 is_stmt 0 view .LVU379
 1240 0004 F8EE677A 		vcvt.f32.u32	s15, s15
2340:Core/Src/tmag5170_ex.c **** }
 1241              		.loc 1 2340 1 view .LVU380
 1242 0008 9FED020A 		vldr.32	s0, .L81
 1243 000c 27EE800A 		vmul.f32	s0, s15, s0
 1244 0010 7047     		bx	lr
 1245              	.L82:
 1246 0012 00BF     		.align	2
 1247              	.L81:
 1248 0014 0000803D 		.word	1031798784
 1249              		.cfi_endproc
 1250              	.LFE78:
 1252              		.section	.text.piecewiseLinearizationAngle,"ax",%progbits
 1253              		.align	1
 1254              		.global	piecewiseLinearizationAngle
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1259              	piecewiseLinearizationAngle:
 1260              	.LVL139:
 1261              	.LFB74:
2195:Core/Src/tmag5170_ex.c **** 
 1262              		.loc 1 2195 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
2195:Core/Src/tmag5170_ex.c **** 
 1266              		.loc 1 2195 1 is_stmt 0 view .LVU382
 1267 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1268              	.LCFI18:
 1269              		.cfi_def_cfa_offset 24
 1270              		.cfi_offset 4, -24
 1271              		.cfi_offset 5, -20
 1272              		.cfi_offset 6, -16
 1273              		.cfi_offset 7, -12
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 67


 1274              		.cfi_offset 8, -8
 1275              		.cfi_offset 14, -4
 1276 0004 2DED028B 		vpush.64	{d8}
 1277              	.LCFI19:
 1278              		.cfi_def_cfa_offset 32
 1279              		.cfi_offset 80, -32
 1280              		.cfi_offset 81, -28
 1281 0008 0546     		mov	r5, r0
 1282 000a 0E46     		mov	r6, r1
 1283 000c 1F46     		mov	r7, r3
2197:Core/Src/tmag5170_ex.c ****     uint16_t bottom_index;
 1284              		.loc 1 2197 5 is_stmt 1 view .LVU383
 1285              	.LVL140:
2198:Core/Src/tmag5170_ex.c ****     float slope, coord_diff, error_diff, estimated_error, linztn_angle;
 1286              		.loc 1 2198 5 view .LVU384
2199:Core/Src/tmag5170_ex.c **** 
 1287              		.loc 1 2199 5 view .LVU385
2201:Core/Src/tmag5170_ex.c ****     {
 1288              		.loc 1 2201 5 view .LVU386
2201:Core/Src/tmag5170_ex.c ****     {
 1289              		.loc 1 2201 33 is_stmt 0 view .LVU387
 1290 000e 0388     		ldrh	r3, [r0]
 1291              	.LVL141:
2201:Core/Src/tmag5170_ex.c ****     {
 1292              		.loc 1 2201 8 view .LVU388
 1293 0010 BB42     		cmp	r3, r7
 1294 0012 43D9     		bls	.L91
2197:Core/Src/tmag5170_ex.c ****     uint16_t bottom_index;
 1295              		.loc 1 2197 14 view .LVU389
 1296 0014 1446     		mov	r4, r2
 1297              	.LVL142:
 1298              	.L85:
2208:Core/Src/tmag5170_ex.c ****     if ( top_index == known_length )
 1299              		.loc 1 2208 5 is_stmt 1 view .LVU390
2208:Core/Src/tmag5170_ex.c ****     if ( top_index == known_length )
 1300              		.loc 1 2208 18 is_stmt 0 view .LVU391
 1301 0016 04F1FF38 		add	r8, r4, #-1
 1302 001a 1FFA88F8 		uxth	r8, r8
 1303              	.LVL143:
2209:Core/Src/tmag5170_ex.c ****     {
 1304              		.loc 1 2209 5 is_stmt 1 view .LVU392
2209:Core/Src/tmag5170_ex.c ****     {
 1305              		.loc 1 2209 8 is_stmt 0 view .LVU393
 1306 001e 9442     		cmp	r4, r2
 1307 0020 3ED0     		beq	.L94
2216:Core/Src/tmag5170_ex.c ****     }
 1308              		.loc 1 2216 9 is_stmt 1 view .LVU394
2216:Core/Src/tmag5170_ex.c ****     }
 1309              		.loc 1 2216 51 is_stmt 0 view .LVU395
 1310 0022 35F81400 		ldrh	r0, [r5, r4, lsl #1]
 1311              	.LVL144:
2216:Core/Src/tmag5170_ex.c ****     }
 1312              		.loc 1 2216 75 view .LVU396
 1313 0026 35F81830 		ldrh	r3, [r5, r8, lsl #1]
2216:Core/Src/tmag5170_ex.c ****     }
 1314              		.loc 1 2216 22 view .LVU397
 1315 002a C01A     		subs	r0, r0, r3
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 68


 1316 002c 80B2     		uxth	r0, r0
 1317 002e FFF7FEFF 		bl	angleRegisterToDeg
 1318              	.LVL145:
2216:Core/Src/tmag5170_ex.c ****     }
 1319              		.loc 1 2216 22 view .LVU398
 1320 0032 F0EE408A 		vmov.f32	s17, s0
 1321              	.LVL146:
 1322              	.L88:
2219:Core/Src/tmag5170_ex.c ****     float measAngle_f = angleRegisterToDeg(measAngle);
 1323              		.loc 1 2219 5 is_stmt 1 view .LVU399
2219:Core/Src/tmag5170_ex.c ****     float measAngle_f = angleRegisterToDeg(measAngle);
 1324              		.loc 1 2219 27 is_stmt 0 view .LVU400
 1325 0036 35F81800 		ldrh	r0, [r5, r8, lsl #1]
 1326 003a FFF7FEFF 		bl	angleRegisterToDeg
 1327              	.LVL147:
2219:Core/Src/tmag5170_ex.c ****     float measAngle_f = angleRegisterToDeg(measAngle);
 1328              		.loc 1 2219 27 view .LVU401
 1329 003e B0EE408A 		vmov.f32	s16, s0
 1330              	.LVL148:
2220:Core/Src/tmag5170_ex.c **** 
 1331              		.loc 1 2220 5 is_stmt 1 view .LVU402
2220:Core/Src/tmag5170_ex.c **** 
 1332              		.loc 1 2220 25 is_stmt 0 view .LVU403
 1333 0042 3846     		mov	r0, r7
 1334 0044 FFF7FEFF 		bl	angleRegisterToDeg
 1335              	.LVL149:
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1336              		.loc 1 2222 5 is_stmt 1 view .LVU404
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1337              		.loc 1 2222 28 is_stmt 0 view .LVU405
 1338 0048 06EB8404 		add	r4, r6, r4, lsl #2
 1339              	.LVL150:
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1340              		.loc 1 2222 28 view .LVU406
 1341 004c 94ED007A 		vldr.32	s14, [r4]
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1342              		.loc 1 2222 52 view .LVU407
 1343 0050 06EB8806 		add	r6, r6, r8, lsl #2
 1344              	.LVL151:
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1345              		.loc 1 2222 52 view .LVU408
 1346 0054 D6ED007A 		vldr.32	s15, [r6]
2222:Core/Src/tmag5170_ex.c ****     slope = error_diff / coord_diff;
 1347              		.loc 1 2222 16 view .LVU409
 1348 0058 37EE677A 		vsub.f32	s14, s14, s15
 1349              	.LVL152:
2223:Core/Src/tmag5170_ex.c ****     estimated_error = ( measAngle_f - bottomAngle_f )*slope + knownError[bottom_index];
 1350              		.loc 1 2223 5 is_stmt 1 view .LVU410
2223:Core/Src/tmag5170_ex.c ****     estimated_error = ( measAngle_f - bottomAngle_f )*slope + knownError[bottom_index];
 1351              		.loc 1 2223 11 is_stmt 0 view .LVU411
 1352 005c C7EE286A 		vdiv.f32	s13, s14, s17
 1353              	.LVL153:
2224:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle_f - estimated_error;
 1354              		.loc 1 2224 5 is_stmt 1 view .LVU412
2224:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle_f - estimated_error;
 1355              		.loc 1 2224 37 is_stmt 0 view .LVU413
 1356 0060 30EE488A 		vsub.f32	s16, s0, s16
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 69


 1357              	.LVL154:
2224:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle_f - estimated_error;
 1358              		.loc 1 2224 54 view .LVU414
 1359 0064 28EE268A 		vmul.f32	s16, s16, s13
2224:Core/Src/tmag5170_ex.c ****     linztn_angle = measAngle_f - estimated_error;
 1360              		.loc 1 2224 21 view .LVU415
 1361 0068 37EE888A 		vadd.f32	s16, s15, s16
 1362              	.LVL155:
2225:Core/Src/tmag5170_ex.c ****     if ( linztn_angle >= 360 ) linztn_angle -= 360;
 1363              		.loc 1 2225 5 is_stmt 1 view .LVU416
2225:Core/Src/tmag5170_ex.c ****     if ( linztn_angle >= 360 ) linztn_angle -= 360;
 1364              		.loc 1 2225 18 is_stmt 0 view .LVU417
 1365 006c 30EE480A 		vsub.f32	s0, s0, s16
 1366              	.LVL156:
2226:Core/Src/tmag5170_ex.c **** 
 1367              		.loc 1 2226 5 is_stmt 1 view .LVU418
2226:Core/Src/tmag5170_ex.c **** 
 1368              		.loc 1 2226 8 is_stmt 0 view .LVU419
 1369 0070 DFED127A 		vldr.32	s15, .L96
 1370 0074 B4EEE70A 		vcmpe.f32	s0, s15
 1371 0078 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1372 007c 01DB     		blt	.L83
2226:Core/Src/tmag5170_ex.c **** 
 1373              		.loc 1 2226 32 is_stmt 1 discriminator 1 view .LVU420
2226:Core/Src/tmag5170_ex.c **** 
 1374              		.loc 1 2226 45 is_stmt 0 discriminator 1 view .LVU421
 1375 007e 30EE670A 		vsub.f32	s0, s0, s15
 1376              	.LVL157:
2228:Core/Src/tmag5170_ex.c **** }
 1377              		.loc 1 2228 5 is_stmt 1 discriminator 1 view .LVU422
 1378              	.L83:
2229:Core/Src/tmag5170_ex.c **** 
 1379              		.loc 1 2229 1 is_stmt 0 view .LVU423
 1380 0082 BDEC028B 		vldm	sp!, {d8}
 1381              	.LCFI20:
 1382              		.cfi_remember_state
 1383              		.cfi_restore 80
 1384              		.cfi_restore 81
 1385              		.cfi_def_cfa_offset 24
 1386              	.LVL158:
2229:Core/Src/tmag5170_ex.c **** 
 1387              		.loc 1 2229 1 view .LVU424
 1388 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1389              	.LVL159:
 1390              	.L95:
 1391              	.LCFI21:
 1392              		.cfi_restore_state
2203:Core/Src/tmag5170_ex.c ****         {
 1393              		.loc 1 2203 57 is_stmt 1 discriminator 2 view .LVU425
2203:Core/Src/tmag5170_ex.c ****         {
 1394              		.loc 1 2203 66 is_stmt 0 discriminator 2 view .LVU426
 1395 008a 0134     		adds	r4, r4, #1
 1396              	.LVL160:
2203:Core/Src/tmag5170_ex.c ****         {
 1397              		.loc 1 2203 66 discriminator 2 view .LVU427
 1398 008c A4B2     		uxth	r4, r4
 1399              	.LVL161:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 70


 1400              	.L84:
2203:Core/Src/tmag5170_ex.c ****         {
 1401              		.loc 1 2203 30 is_stmt 1 discriminator 1 view .LVU428
2203:Core/Src/tmag5170_ex.c ****         {
 1402              		.loc 1 2203 9 is_stmt 0 discriminator 1 view .LVU429
 1403 008e 9442     		cmp	r4, r2
 1404 0090 C1D2     		bcs	.L85
2205:Core/Src/tmag5170_ex.c ****         }
 1405              		.loc 1 2205 13 is_stmt 1 view .LVU430
2205:Core/Src/tmag5170_ex.c ****         }
 1406              		.loc 1 2205 40 is_stmt 0 view .LVU431
 1407 0092 35F814C0 		ldrh	ip, [r5, r4, lsl #1]
2205:Core/Src/tmag5170_ex.c ****         }
 1408              		.loc 1 2205 16 view .LVU432
 1409 0096 BC45     		cmp	ip, r7
 1410 0098 F7D9     		bls	.L95
 1411 009a BCE7     		b	.L85
 1412              	.LVL162:
 1413              	.L91:
2203:Core/Src/tmag5170_ex.c ****         {
 1414              		.loc 1 2203 25 view .LVU433
 1415 009c 0124     		movs	r4, #1
 1416 009e F6E7     		b	.L84
 1417              	.LVL163:
 1418              	.L94:
2211:Core/Src/tmag5170_ex.c ****         coord_diff = angleRegisterToDeg((knownAngle[top_index] + 0x1680) - knownAngle[bottom_index]
 1419              		.loc 1 2211 9 is_stmt 1 view .LVU434
2212:Core/Src/tmag5170_ex.c ****     }
 1420              		.loc 1 2212 9 view .LVU435
2212:Core/Src/tmag5170_ex.c ****     }
 1421              		.loc 1 2212 86 is_stmt 0 view .LVU436
 1422 00a0 35F81800 		ldrh	r0, [r5, r8, lsl #1]
 1423              	.LVL164:
2212:Core/Src/tmag5170_ex.c ****     }
 1424              		.loc 1 2212 74 view .LVU437
 1425 00a4 181A     		subs	r0, r3, r0
 1426 00a6 80B2     		uxth	r0, r0
2212:Core/Src/tmag5170_ex.c ****     }
 1427              		.loc 1 2212 22 view .LVU438
 1428 00a8 00F5B450 		add	r0, r0, #5760
 1429 00ac 80B2     		uxth	r0, r0
 1430 00ae FFF7FEFF 		bl	angleRegisterToDeg
 1431              	.LVL165:
2212:Core/Src/tmag5170_ex.c ****     }
 1432              		.loc 1 2212 22 view .LVU439
 1433 00b2 F0EE408A 		vmov.f32	s17, s0
 1434              	.LVL166:
2211:Core/Src/tmag5170_ex.c ****         coord_diff = angleRegisterToDeg((knownAngle[top_index] + 0x1680) - knownAngle[bottom_index]
 1435              		.loc 1 2211 19 view .LVU440
 1436 00b6 0024     		movs	r4, #0
 1437 00b8 BDE7     		b	.L88
 1438              	.L97:
 1439 00ba 00BF     		.align	2
 1440              	.L96:
 1441 00bc 0000B443 		.word	1135869952
 1442              		.cfi_endproc
 1443              	.LFE74:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 71


 1445              		.section	.text.calculateCRC,"ax",%progbits
 1446              		.align	1
 1447              		.global	calculateCRC
 1448              		.syntax unified
 1449              		.thumb
 1450              		.thumb_func
 1452              	calculateCRC:
 1453              	.LVL167:
 1454              	.LFB79:
2341:Core/Src/tmag5170_ex.c **** 
2342:Core/Src/tmag5170_ex.c **** //****************************************************************************
2343:Core/Src/tmag5170_ex.c **** //! Calculate CRC for SPI data frame
2344:Core/Src/tmag5170_ex.c **** //!
2345:Core/Src/tmag5170_ex.c **** //! Takes in an array containing a SPI data frame (MSB to LSB) with the CRC bits
2346:Core/Src/tmag5170_ex.c **** //! all set to ZERO and calculates and returns the CRC for that data frame.
2347:Core/Src/tmag5170_ex.c **** //****************************************************************************
2348:Core/Src/tmag5170_ex.c **** uint8_t calculateCRC( uint8_t data[] )
2349:Core/Src/tmag5170_ex.c **** {
 1455              		.loc 1 2349 1 is_stmt 1 view -0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 80
 1458              		@ frame_needed = 0, uses_anonymous_args = 0
 1459              		.loc 1 2349 1 is_stmt 0 view .LVU442
 1460 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1461              	.LCFI22:
 1462              		.cfi_def_cfa_offset 36
 1463              		.cfi_offset 4, -36
 1464              		.cfi_offset 5, -32
 1465              		.cfi_offset 6, -28
 1466              		.cfi_offset 7, -24
 1467              		.cfi_offset 8, -20
 1468              		.cfi_offset 9, -16
 1469              		.cfi_offset 10, -12
 1470              		.cfi_offset 11, -8
 1471              		.cfi_offset 14, -4
 1472 0004 95B0     		sub	sp, sp, #84
 1473              	.LCFI23:
 1474              		.cfi_def_cfa_offset 120
2350:Core/Src/tmag5170_ex.c ****     int i = 0;
 1475              		.loc 1 2350 5 is_stmt 1 view .LVU443
 1476              	.LVL168:
2351:Core/Src/tmag5170_ex.c ****     uint8_t crc = 0x00;
 1477              		.loc 1 2351 5 view .LVU444
2352:Core/Src/tmag5170_ex.c ****     uint32_t n;
 1478              		.loc 1 2352 5 view .LVU445
2353:Core/Src/tmag5170_ex.c **** 
2354:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte array
2355:Core/Src/tmag5170_ex.c ****     uint8_t d[32] = { 0 };
 1479              		.loc 1 2355 5 view .LVU446
 1480              		.loc 1 2355 13 is_stmt 0 view .LVU447
 1481 0006 0022     		movs	r2, #0
 1482 0008 0C92     		str	r2, [sp, #48]
 1483 000a 0D92     		str	r2, [sp, #52]
 1484 000c 0E92     		str	r2, [sp, #56]
 1485 000e 0F92     		str	r2, [sp, #60]
 1486 0010 1092     		str	r2, [sp, #64]
 1487 0012 1192     		str	r2, [sp, #68]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 72


 1488 0014 1292     		str	r2, [sp, #72]
 1489 0016 1392     		str	r2, [sp, #76]
2356:Core/Src/tmag5170_ex.c **** 
2357:Core/Src/tmag5170_ex.c ****     n = (data[0] << 24)|(data[1] << 16)|(data[2] << 8)|(data[3]);
 1490              		.loc 1 2357 5 is_stmt 1 view .LVU448
 1491              		.loc 1 2357 14 is_stmt 0 view .LVU449
 1492 0018 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 1493              		.loc 1 2357 30 view .LVU450
 1494 001a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1495              		.loc 1 2357 34 view .LVU451
 1496 001c 1B04     		lsls	r3, r3, #16
 1497              		.loc 1 2357 24 view .LVU452
 1498 001e 43EA0163 		orr	r3, r3, r1, lsl #24
 1499              		.loc 1 2357 46 view .LVU453
 1500 0022 8178     		ldrb	r1, [r0, #2]	@ zero_extendqisi2
 1501              		.loc 1 2357 40 view .LVU454
 1502 0024 43EA0123 		orr	r3, r3, r1, lsl #8
 1503              		.loc 1 2357 61 view .LVU455
 1504 0028 C178     		ldrb	r1, [r0, #3]	@ zero_extendqisi2
 1505              		.loc 1 2357 55 view .LVU456
 1506 002a 0B43     		orrs	r3, r3, r1
 1507              	.LVL169:
2358:Core/Src/tmag5170_ex.c **** 
2359:Core/Src/tmag5170_ex.c ****     while (n>0)
 1508              		.loc 1 2359 5 is_stmt 1 view .LVU457
 1509              		.loc 1 2359 11 is_stmt 0 view .LVU458
 1510 002c 08E0     		b	.L99
 1511              	.LVL170:
 1512              	.L100:
2360:Core/Src/tmag5170_ex.c ****     {
2361:Core/Src/tmag5170_ex.c ****         d[i] = n&1;
 1513              		.loc 1 2361 9 is_stmt 1 view .LVU459
 1514              		.loc 1 2361 17 is_stmt 0 view .LVU460
 1515 002e 03F00100 		and	r0, r3, #1
 1516              		.loc 1 2361 14 view .LVU461
 1517 0032 02F15001 		add	r1, r2, #80
 1518 0036 6944     		add	r1, sp, r1
 1519 0038 01F8200C 		strb	r0, [r1, #-32]
2362:Core/Src/tmag5170_ex.c ****         n = n>>1;
 1520              		.loc 1 2362 9 is_stmt 1 view .LVU462
 1521              		.loc 1 2362 11 is_stmt 0 view .LVU463
 1522 003c 5B08     		lsrs	r3, r3, #1
 1523              	.LVL171:
2363:Core/Src/tmag5170_ex.c ****         i++;
 1524              		.loc 1 2363 9 is_stmt 1 view .LVU464
 1525              		.loc 1 2363 10 is_stmt 0 view .LVU465
 1526 003e 0132     		adds	r2, r2, #1
 1527              	.LVL172:
 1528              	.L99:
2359:Core/Src/tmag5170_ex.c ****     {
 1529              		.loc 1 2359 11 is_stmt 1 view .LVU466
 1530 0040 002B     		cmp	r3, #0
 1531 0042 F4D1     		bne	.L100
2364:Core/Src/tmag5170_ex.c ****     }
2365:Core/Src/tmag5170_ex.c **** 
2366:Core/Src/tmag5170_ex.c ****     crc |= d[30] ^ d[26] ^ d[25] ^ d[24] ^ d[23] ^ d[21] ^ d[19] ^ d[18] ^ d[15] ^ d[11] ^ d[10] ^ 
 1532              		.loc 1 2366 5 view .LVU467
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 73


 1533              		.loc 1 2366 13 is_stmt 0 view .LVU468
 1534 0044 9DF84EB0 		ldrb	fp, [sp, #78]	@ zero_extendqisi2
 1535              		.loc 1 2366 21 view .LVU469
 1536 0048 9DF84A20 		ldrb	r2, [sp, #74]	@ zero_extendqisi2
 1537              	.LVL173:
 1538              		.loc 1 2366 29 view .LVU470
 1539 004c 9DF84950 		ldrb	r5, [sp, #73]	@ zero_extendqisi2
 1540              		.loc 1 2366 37 view .LVU471
 1541 0050 9DF84810 		ldrb	r1, [sp, #72]	@ zero_extendqisi2
 1542              		.loc 1 2366 45 view .LVU472
 1543 0054 9DF84730 		ldrb	r3, [sp, #71]	@ zero_extendqisi2
 1544              	.LVL174:
 1545              		.loc 1 2366 45 view .LVU473
 1546 0058 0093     		str	r3, [sp]
 1547              		.loc 1 2366 53 view .LVU474
 1548 005a 9DF845C0 		ldrb	ip, [sp, #69]	@ zero_extendqisi2
 1549              		.loc 1 2366 61 view .LVU475
 1550 005e 9DF84330 		ldrb	r3, [sp, #67]	@ zero_extendqisi2
 1551 0062 0393     		str	r3, [sp, #12]
 1552              		.loc 1 2366 69 view .LVU476
 1553 0064 9DF84200 		ldrb	r0, [sp, #66]	@ zero_extendqisi2
 1554              		.loc 1 2366 77 view .LVU477
 1555 0068 9DF83FA0 		ldrb	r10, [sp, #63]	@ zero_extendqisi2
 1556              		.loc 1 2366 85 view .LVU478
 1557 006c 9DF83B30 		ldrb	r3, [sp, #59]	@ zero_extendqisi2
 1558              		.loc 1 2366 93 view .LVU479
 1559 0070 9DF83A60 		ldrb	r6, [sp, #58]	@ zero_extendqisi2
 1560 0074 0496     		str	r6, [sp, #16]
 1561              		.loc 1 2366 101 view .LVU480
 1562 0076 9DF83980 		ldrb	r8, [sp, #57]	@ zero_extendqisi2
 1563              		.loc 1 2366 108 view .LVU481
 1564 007a 9DF838E0 		ldrb	lr, [sp, #56]	@ zero_extendqisi2
 1565              		.loc 1 2366 115 view .LVU482
 1566 007e 9DF83660 		ldrb	r6, [sp, #54]	@ zero_extendqisi2
 1567              		.loc 1 2366 122 view .LVU483
 1568 0082 9DF83470 		ldrb	r7, [sp, #52]	@ zero_extendqisi2
 1569              		.loc 1 2366 129 view .LVU484
 1570 0086 9DF83340 		ldrb	r4, [sp, #51]	@ zero_extendqisi2
 1571 008a 0194     		str	r4, [sp, #4]
 1572              		.loc 1 2366 136 view .LVU485
 1573 008c 9DF83090 		ldrb	r9, [sp, #48]	@ zero_extendqisi2
 1574              		.loc 1 2366 9 view .LVU486
 1575 0090 8BEA0202 		eor	r2, fp, r2
 1576 0094 0995     		str	r5, [sp, #36]
 1577 0096 6A40     		eors	r2, r2, r5
 1578 0098 0C46     		mov	r4, r1
 1579 009a 4A40     		eors	r2, r2, r1
 1580 009c 0099     		ldr	r1, [sp]
 1581 009e 4A40     		eors	r2, r2, r1
 1582 00a0 8CEA0202 		eor	r2, ip, r2
 1583 00a4 0399     		ldr	r1, [sp, #12]
 1584 00a6 4A40     		eors	r2, r2, r1
 1585 00a8 0546     		mov	r5, r0
 1586 00aa 4240     		eors	r2, r2, r0
 1587 00ac 8AEA0202 		eor	r2, r10, r2
 1588 00b0 5340     		eors	r3, r3, r2
 1589 00b2 049A     		ldr	r2, [sp, #16]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 74


 1590 00b4 5340     		eors	r3, r3, r2
 1591 00b6 88EA0303 		eor	r3, r8, r3
 1592 00ba 8EEA0303 		eor	r3, lr, r3
 1593 00be 0596     		str	r6, [sp, #20]
 1594 00c0 7340     		eors	r3, r3, r6
 1595 00c2 0A97     		str	r7, [sp, #40]
 1596 00c4 7B40     		eors	r3, r3, r7
 1597 00c6 019A     		ldr	r2, [sp, #4]
 1598 00c8 5340     		eors	r3, r3, r2
 1599 00ca 89EA0303 		eor	r3, r9, r3
 1600 00ce 83F00103 		eor	r3, r3, #1
 1601              	.LVL175:
2367:Core/Src/tmag5170_ex.c ****     crc |= (d[31] ^ d[30] ^ d[27] ^ d[23] ^ d[22] ^ d[21] ^ d[20] ^ d[18] ^ d[16] ^ d[15] ^ d[12] ^
 1602              		.loc 1 2367 5 is_stmt 1 view .LVU487
 1603              		.loc 1 2367 14 is_stmt 0 view .LVU488
 1604 00d2 9DF84F00 		ldrb	r0, [sp, #79]	@ zero_extendqisi2
 1605              		.loc 1 2367 30 view .LVU489
 1606 00d6 9DF84B10 		ldrb	r1, [sp, #75]	@ zero_extendqisi2
 1607              		.loc 1 2367 46 view .LVU490
 1608 00da 9DF84660 		ldrb	r6, [sp, #70]	@ zero_extendqisi2
 1609              		.loc 1 2367 62 view .LVU491
 1610 00de 9DF84420 		ldrb	r2, [sp, #68]	@ zero_extendqisi2
 1611 00e2 0692     		str	r2, [sp, #24]
 1612              		.loc 1 2367 78 view .LVU492
 1613 00e4 9DF84070 		ldrb	r7, [sp, #64]	@ zero_extendqisi2
 1614 00e8 0B97     		str	r7, [sp, #44]
 1615              		.loc 1 2367 94 view .LVU493
 1616 00ea 9DF83C20 		ldrb	r2, [sp, #60]	@ zero_extendqisi2
 1617              		.loc 1 2367 109 view .LVU494
 1618 00ee 9DF83770 		ldrb	r7, [sp, #55]	@ zero_extendqisi2
 1619 00f2 0297     		str	r7, [sp, #8]
 1620              		.loc 1 2367 123 view .LVU495
 1621 00f4 9DF83570 		ldrb	r7, [sp, #53]	@ zero_extendqisi2
 1622 00f8 0797     		str	r7, [sp, #28]
 1623              		.loc 1 2367 137 view .LVU496
 1624 00fa 9DF83170 		ldrb	r7, [sp, #49]	@ zero_extendqisi2
 1625 00fe 0897     		str	r7, [sp, #32]
 1626              		.loc 1 2367 152 view .LVU497
 1627 0100 8BEA000B 		eor	fp, fp, r0
 1628 0104 81EA0B01 		eor	r1, r1, fp
 1629 0108 009F     		ldr	r7, [sp]
 1630 010a 7940     		eors	r1, r1, r7
 1631 010c 7140     		eors	r1, r1, r6
 1632 010e 8CEA0101 		eor	r1, ip, r1
 1633 0112 069F     		ldr	r7, [sp, #24]
 1634 0114 7940     		eors	r1, r1, r7
 1635 0116 AB46     		mov	fp, r5
 1636 0118 6940     		eors	r1, r1, r5
 1637 011a 0B9F     		ldr	r7, [sp, #44]
 1638 011c 7940     		eors	r1, r1, r7
 1639 011e 8AEA0101 		eor	r1, r10, r1
 1640 0122 4A40     		eors	r2, r2, r1
 1641 0124 8EEA0202 		eor	r2, lr, r2
 1642 0128 0299     		ldr	r1, [sp, #8]
 1643 012a 4A40     		eors	r2, r2, r1
 1644 012c 0599     		ldr	r1, [sp, #20]
 1645 012e 4A40     		eors	r2, r2, r1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 75


 1646 0130 0799     		ldr	r1, [sp, #28]
 1647 0132 4A40     		eors	r2, r2, r1
 1648 0134 019D     		ldr	r5, [sp, #4]
 1649 0136 6A40     		eors	r2, r2, r5
 1650 0138 0899     		ldr	r1, [sp, #32]
 1651 013a 4A40     		eors	r2, r2, r1
 1652 013c 89EA0202 		eor	r2, r9, r2
 1653              		.loc 1 2367 9 view .LVU498
 1654 0140 43EA4203 		orr	r3, r3, r2, lsl #1
 1655              	.LVL176:
 1656              		.loc 1 2367 9 view .LVU499
 1657 0144 5BB2     		sxtb	r3, r3
 1658              	.LVL177:
2368:Core/Src/tmag5170_ex.c ****     crc |= (d[31] ^ d[28] ^ d[24] ^ d[23] ^ d[22] ^ d[21] ^ d[19] ^ d[17] ^ d[16] ^ d[13] ^ d[9] ^ 
 1659              		.loc 1 2368 5 is_stmt 1 view .LVU500
 1660              		.loc 1 2368 22 is_stmt 0 view .LVU501
 1661 0146 9DF84C90 		ldrb	r9, [sp, #76]	@ zero_extendqisi2
 1662              		.loc 1 2368 70 view .LVU502
 1663 014a 9DF841A0 		ldrb	r10, [sp, #65]	@ zero_extendqisi2
 1664              		.loc 1 2368 86 view .LVU503
 1665 014e 9DF83D20 		ldrb	r2, [sp, #61]	@ zero_extendqisi2
 1666              		.loc 1 2368 129 view .LVU504
 1667 0152 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1668              		.loc 1 2368 144 view .LVU505
 1669 0156 80EA0900 		eor	r0, r0, r9
 1670 015a 6040     		eors	r0, r0, r4
 1671 015c 009D     		ldr	r5, [sp]
 1672 015e 6840     		eors	r0, r0, r5
 1673 0160 7040     		eors	r0, r0, r6
 1674 0162 8CEA0000 		eor	r0, ip, r0
 1675 0166 039D     		ldr	r5, [sp, #12]
 1676 0168 6840     		eors	r0, r0, r5
 1677 016a 8AEA0000 		eor	r0, r10, r0
 1678 016e 7840     		eors	r0, r0, r7
 1679 0170 4240     		eors	r2, r2, r0
 1680 0172 88EA0202 		eor	r2, r8, r2
 1681 0176 8EEA0202 		eor	r2, lr, r2
 1682 017a 0298     		ldr	r0, [sp, #8]
 1683 017c 4240     		eors	r2, r2, r0
 1684 017e 0598     		ldr	r0, [sp, #20]
 1685 0180 4240     		eors	r2, r2, r0
 1686 0182 0A98     		ldr	r0, [sp, #40]
 1687 0184 4240     		eors	r2, r2, r0
 1688 0186 4A40     		eors	r2, r2, r1
 1689 0188 0898     		ldr	r0, [sp, #32]
 1690 018a 4240     		eors	r2, r2, r0
 1691              		.loc 1 2368 9 view .LVU506
 1692 018c 43EA8203 		orr	r3, r3, r2, lsl #2
 1693              	.LVL178:
 1694              		.loc 1 2368 9 view .LVU507
 1695 0190 5BB2     		sxtb	r3, r3
 1696              	.LVL179:
2369:Core/Src/tmag5170_ex.c ****     crc |= (d[29] ^ d[25] ^ d[24] ^ d[23] ^ d[22] ^ d[20] ^ d[18] ^ d[17] ^ d[14] ^ d[10] ^ d[9] ^ 
 1697              		.loc 1 2369 5 is_stmt 1 view .LVU508
 1698              		.loc 1 2369 14 is_stmt 0 view .LVU509
 1699 0192 9DF84D00 		ldrb	r0, [sp, #77]	@ zero_extendqisi2
 1700              		.loc 1 2369 78 view .LVU510
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 76


 1701 0196 9DF83E20 		ldrb	r2, [sp, #62]	@ zero_extendqisi2
 1702              		.loc 1 2369 133 view .LVU511
 1703 019a 099D     		ldr	r5, [sp, #36]
 1704 019c 6840     		eors	r0, r0, r5
 1705 019e 6040     		eors	r0, r0, r4
 1706 01a0 009C     		ldr	r4, [sp]
 1707 01a2 6040     		eors	r0, r0, r4
 1708 01a4 7040     		eors	r0, r0, r6
 1709 01a6 069F     		ldr	r7, [sp, #24]
 1710 01a8 7840     		eors	r0, r0, r7
 1711 01aa 5D46     		mov	r5, fp
 1712 01ac 6840     		eors	r0, r0, r5
 1713 01ae 8AEA0000 		eor	r0, r10, r0
 1714 01b2 4240     		eors	r2, r2, r0
 1715 01b4 049E     		ldr	r6, [sp, #16]
 1716 01b6 7240     		eors	r2, r2, r6
 1717 01b8 88EA0202 		eor	r2, r8, r2
 1718 01bc 8EEA020E 		eor	lr, lr, r2
 1719 01c0 029A     		ldr	r2, [sp, #8]
 1720 01c2 82EA0E0E 		eor	lr, r2, lr
 1721 01c6 079F     		ldr	r7, [sp, #28]
 1722 01c8 87EA0E0E 		eor	lr, r7, lr
 1723 01cc 019A     		ldr	r2, [sp, #4]
 1724 01ce 82EA0E0E 		eor	lr, r2, lr
 1725 01d2 81EA0E01 		eor	r1, r1, lr
 1726 01d6 81F00101 		eor	r1, r1, #1
 1727              		.loc 1 2369 9 view .LVU512
 1728 01da 43EAC100 		orr	r0, r3, r1, lsl #3
 1729              	.LVL180:
2370:Core/Src/tmag5170_ex.c **** 
2371:Core/Src/tmag5170_ex.c ****     return crc;
 1730              		.loc 1 2371 5 is_stmt 1 view .LVU513
2372:Core/Src/tmag5170_ex.c **** }
 1731              		.loc 1 2372 1 is_stmt 0 view .LVU514
 1732 01de C0B2     		uxtb	r0, r0
 1733              		.loc 1 2372 1 view .LVU515
 1734 01e0 15B0     		add	sp, sp, #84
 1735              	.LCFI24:
 1736              		.cfi_def_cfa_offset 36
 1737              		@ sp needed
 1738 01e2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1739              		.cfi_endproc
 1740              	.LFE79:
 1742              		.section	.text.verifyCRC,"ax",%progbits
 1743              		.align	1
 1744              		.global	verifyCRC
 1745              		.syntax unified
 1746              		.thumb
 1747              		.thumb_func
 1749              	verifyCRC:
 1750              	.LVL181:
 1751              	.LFB80:
2373:Core/Src/tmag5170_ex.c **** 
2374:Core/Src/tmag5170_ex.c **** 
2375:Core/Src/tmag5170_ex.c **** //****************************************************************************
2376:Core/Src/tmag5170_ex.c **** //! Verify CRC in SPI data frame
2377:Core/Src/tmag5170_ex.c **** //!
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 77


2378:Core/Src/tmag5170_ex.c **** //! Takes in an array containing a SPI data frame (MSB to LSB) and checks if the
2379:Core/Src/tmag5170_ex.c **** //! CRC bits (according to their locations for the TMAG5170) are correct according
2380:Core/Src/tmag5170_ex.c **** //! to the CRC calculation algorithm.
2381:Core/Src/tmag5170_ex.c **** //****************************************************************************
2382:Core/Src/tmag5170_ex.c **** uint8_t verifyCRC( uint8_t data[] )
2383:Core/Src/tmag5170_ex.c **** {
 1752              		.loc 1 2383 1 is_stmt 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756              		.loc 1 2383 1 is_stmt 0 view .LVU517
 1757 0000 70B5     		push	{r4, r5, r6, lr}
 1758              	.LCFI25:
 1759              		.cfi_def_cfa_offset 16
 1760              		.cfi_offset 4, -16
 1761              		.cfi_offset 5, -12
 1762              		.cfi_offset 6, -8
 1763              		.cfi_offset 14, -4
 1764 0002 0446     		mov	r4, r0
2384:Core/Src/tmag5170_ex.c ****     uint8_t crc_received = data[3] & 0x0F;
 1765              		.loc 1 2384 5 is_stmt 1 view .LVU518
 1766              		.loc 1 2384 32 is_stmt 0 view .LVU519
 1767 0004 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 1768              		.loc 1 2384 13 view .LVU520
 1769 0006 05F00F06 		and	r6, r5, #15
 1770              	.LVL182:
2385:Core/Src/tmag5170_ex.c ****     data[3] &= ~(0x0F); // the CRC bits of the data must be 0000b to calculate its CRC correctly
 1771              		.loc 1 2385 5 is_stmt 1 view .LVU521
 1772              		.loc 1 2385 13 is_stmt 0 view .LVU522
 1773 000a 25F00F03 		bic	r3, r5, #15
 1774 000e C370     		strb	r3, [r0, #3]
2386:Core/Src/tmag5170_ex.c ****     uint8_t crc_calc = calculateCRC(data);
 1775              		.loc 1 2386 5 is_stmt 1 view .LVU523
 1776              		.loc 1 2386 24 is_stmt 0 view .LVU524
 1777 0010 FFF7FEFF 		bl	calculateCRC
 1778              	.LVL183:
2387:Core/Src/tmag5170_ex.c ****     data[3] |= crc_received; // the previously removed CRC bits are reinserted
 1779              		.loc 1 2387 5 is_stmt 1 view .LVU525
 1780              		.loc 1 2387 13 is_stmt 0 view .LVU526
 1781 0014 E570     		strb	r5, [r4, #3]
2388:Core/Src/tmag5170_ex.c **** 
2389:Core/Src/tmag5170_ex.c ****     return crc_received == crc_calc;
 1782              		.loc 1 2389 5 is_stmt 1 view .LVU527
2390:Core/Src/tmag5170_ex.c **** }
 1783              		.loc 1 2390 1 is_stmt 0 view .LVU528
 1784 0016 8642     		cmp	r6, r0
 1785 0018 14BF     		ite	ne
 1786 001a 0020     		movne	r0, #0
 1787              	.LVL184:
 1788              		.loc 1 2390 1 view .LVU529
 1789 001c 0120     		moveq	r0, #1
 1790 001e 70BD     		pop	{r4, r5, r6, pc}
 1791              		.loc 1 2390 1 view .LVU530
 1792              		.cfi_endproc
 1793              	.LFE80:
 1795              		.section	.text.sendAndReceiveFrame,"ax",%progbits
 1796              		.align	1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 78


 1797              		.global	sendAndReceiveFrame
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1802              	sendAndReceiveFrame:
 1803              	.LVL185:
 1804              	.LFB4:
 176:Core/Src/tmag5170_ex.c **** 
 1805              		.loc 1 176 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 176:Core/Src/tmag5170_ex.c **** 
 1809              		.loc 1 176 1 is_stmt 0 view .LVU532
 1810 0000 38B5     		push	{r3, r4, r5, lr}
 1811              	.LCFI26:
 1812              		.cfi_def_cfa_offset 16
 1813              		.cfi_offset 3, -16
 1814              		.cfi_offset 4, -12
 1815              		.cfi_offset 5, -8
 1816              		.cfi_offset 14, -4
 1817 0002 0446     		mov	r4, r0
 1818 0004 0D46     		mov	r5, r1
 193:Core/Src/tmag5170_ex.c ****     dataTx[3] = dataTx[3] | crc;
 1819              		.loc 1 193 5 is_stmt 1 view .LVU533
 193:Core/Src/tmag5170_ex.c ****     dataTx[3] = dataTx[3] | crc;
 1820              		.loc 1 193 19 is_stmt 0 view .LVU534
 1821 0006 FFF7FEFF 		bl	calculateCRC
 1822              	.LVL186:
 194:Core/Src/tmag5170_ex.c **** 
 1823              		.loc 1 194 5 is_stmt 1 view .LVU535
 194:Core/Src/tmag5170_ex.c **** 
 1824              		.loc 1 194 23 is_stmt 0 view .LVU536
 1825 000a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
 194:Core/Src/tmag5170_ex.c **** 
 1826              		.loc 1 194 15 view .LVU537
 1827 000c 0343     		orrs	r3, r3, r0
 1828 000e E370     		strb	r3, [r4, #3]
 196:Core/Src/tmag5170_ex.c **** 
 1829              		.loc 1 196 5 is_stmt 1 view .LVU538
 1830 0010 0422     		movs	r2, #4
 1831 0012 2946     		mov	r1, r5
 1832 0014 2046     		mov	r0, r4
 1833              	.LVL187:
 196:Core/Src/tmag5170_ex.c **** 
 1834              		.loc 1 196 5 is_stmt 0 view .LVU539
 1835 0016 FFF7FEFF 		bl	spiSendReceiveArrays
 1836              	.LVL188:
 202:Core/Src/tmag5170_ex.c ****     {
 1837              		.loc 1 202 5 is_stmt 1 view .LVU540
 202:Core/Src/tmag5170_ex.c ****     {
 1838              		.loc 1 202 9 is_stmt 0 view .LVU541
 1839 001a 2846     		mov	r0, r5
 1840 001c FFF7FEFF 		bl	verifyCRC
 1841              	.LVL189:
 202:Core/Src/tmag5170_ex.c ****     {
 1842              		.loc 1 202 8 view .LVU542
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 79


 1843 0020 58B1     		cbz	r0, .L104
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1844              		.loc 1 234 5 is_stmt 1 view .LVU543
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1845              		.loc 1 234 16 is_stmt 0 view .LVU544
 1846 0022 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1847              		.loc 1 234 8 view .LVU545
 1848 0024 022B     		cmp	r3, #2
 1849 0026 09D0     		beq	.L108
 1850              	.L106:
 235:Core/Src/tmag5170_ex.c ****                                        // stored variable doesn't have them changed
 1851              		.loc 1 235 5 is_stmt 1 view .LVU546
 235:Core/Src/tmag5170_ex.c ****                                        // stored variable doesn't have them changed
 1852              		.loc 1 235 26 is_stmt 0 view .LVU547
 1853 0028 084A     		ldr	r2, .L109
 1854 002a 1388     		ldrh	r3, [r2]
 1855 002c 23F40163 		bic	r3, r3, #2064
 1856 0030 23F00803 		bic	r3, r3, #8
 1857 0034 9B04     		lsls	r3, r3, #18
 1858 0036 9B0C     		lsrs	r3, r3, #18
 1859 0038 1380     		strh	r3, [r2]	@ movhi
 1860              	.L104:
 238:Core/Src/tmag5170_ex.c **** 
 1861              		.loc 1 238 1 view .LVU548
 1862 003a 38BD     		pop	{r3, r4, r5, pc}
 1863              	.LVL190:
 1864              	.L108:
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1865              		.loc 1 234 47 is_stmt 1 discriminator 1 view .LVU549
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1866              		.loc 1 234 77 is_stmt 0 discriminator 1 view .LVU550
 1867 003c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1868              		.loc 1 234 95 discriminator 1 view .LVU551
 1869 003e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1870              		.loc 1 234 87 discriminator 1 view .LVU552
 1871 0040 43EA0223 		orr	r3, r3, r2, lsl #8
 234:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored &= ~(0xC818); // Reserved bits cannot be 1, this ensures the
 1872              		.loc 1 234 68 discriminator 1 view .LVU553
 1873 0044 014A     		ldr	r2, .L109
 1874 0046 1380     		strh	r3, [r2]	@ movhi
 1875 0048 EEE7     		b	.L106
 1876              	.L110:
 1877 004a 00BF     		.align	2
 1878              	.L109:
 1879 004c 00000000 		.word	.LANCHOR0
 1880              		.cfi_endproc
 1881              	.LFE4:
 1883              		.section	.rodata.writeToRegister.str1.4,"aMS",%progbits,1
 1884              		.align	2
 1885              	.LC1:
 1886 0000 61646472 		.ascii	"address < NUM_REGISTERS\000"
 1886      65737320 
 1886      3C204E55 
 1886      4D5F5245 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 80


 1886      47495354 
 1887              		.align	2
 1888              	.LC2:
 1889 0018 436F7265 		.ascii	"Core/Src/tmag5170_ex.c\000"
 1889      2F537263 
 1889      2F746D61 
 1889      67353137 
 1889      305F6578 
 1890              		.section	.text.writeToRegister,"ax",%progbits
 1891              		.align	1
 1892              		.global	writeToRegister
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1897              	writeToRegister:
 1898              	.LVL191:
 1899              	.LFB5:
 257:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 1900              		.loc 1 257 1 is_stmt 1 view -0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 8
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 257:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 1904              		.loc 1 257 1 is_stmt 0 view .LVU555
 1905 0000 00B5     		push	{lr}
 1906              	.LCFI27:
 1907              		.cfi_def_cfa_offset 4
 1908              		.cfi_offset 14, -4
 1909 0002 83B0     		sub	sp, sp, #12
 1910              	.LCFI28:
 1911              		.cfi_def_cfa_offset 16
 259:Core/Src/tmag5170_ex.c **** 
 1912              		.loc 1 259 5 is_stmt 1 view .LVU556
 1913 0004 1328     		cmp	r0, #19
 1914 0006 10D8     		bhi	.L114
 262:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 1915              		.loc 1 262 5 view .LVU557
 262:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 1916              		.loc 1 262 13 is_stmt 0 view .LVU558
 1917 0008 0023     		movs	r3, #0
 1918 000a 0193     		str	r3, [sp, #4]
 263:Core/Src/tmag5170_ex.c **** 
 1919              		.loc 1 263 5 is_stmt 1 view .LVU559
 263:Core/Src/tmag5170_ex.c **** 
 1920              		.loc 1 263 13 is_stmt 0 view .LVU560
 1921 000c 0093     		str	r3, [sp]
 266:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 1922              		.loc 1 266 5 is_stmt 1 view .LVU561
 266:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 1923              		.loc 1 266 15 is_stmt 0 view .LVU562
 1924 000e 8DF80400 		strb	r0, [sp, #4]
 267:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 1925              		.loc 1 267 5 is_stmt 1 view .LVU563
 267:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 1926              		.loc 1 267 15 is_stmt 0 view .LVU564
 1927 0012 0B0A     		lsrs	r3, r1, #8
 1928 0014 8DF80530 		strb	r3, [sp, #5]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 81


 268:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x00;
 1929              		.loc 1 268 5 is_stmt 1 view .LVU565
 268:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x00;
 1930              		.loc 1 268 15 is_stmt 0 view .LVU566
 1931 0018 8DF80610 		strb	r1, [sp, #6]
 269:Core/Src/tmag5170_ex.c **** 
 1932              		.loc 1 269 5 is_stmt 1 view .LVU567
 271:Core/Src/tmag5170_ex.c **** }
 1933              		.loc 1 271 5 view .LVU568
 1934 001c 6946     		mov	r1, sp
 1935              	.LVL192:
 271:Core/Src/tmag5170_ex.c **** }
 1936              		.loc 1 271 5 is_stmt 0 view .LVU569
 1937 001e 01A8     		add	r0, sp, #4
 1938              	.LVL193:
 271:Core/Src/tmag5170_ex.c **** }
 1939              		.loc 1 271 5 view .LVU570
 1940 0020 FFF7FEFF 		bl	sendAndReceiveFrame
 1941              	.LVL194:
 272:Core/Src/tmag5170_ex.c **** 
 1942              		.loc 1 272 1 view .LVU571
 1943 0024 03B0     		add	sp, sp, #12
 1944              	.LCFI29:
 1945              		.cfi_remember_state
 1946              		.cfi_def_cfa_offset 4
 1947              		@ sp needed
 1948 0026 5DF804FB 		ldr	pc, [sp], #4
 1949              	.LVL195:
 1950              	.L114:
 1951              	.LCFI30:
 1952              		.cfi_restore_state
 259:Core/Src/tmag5170_ex.c **** 
 1953              		.loc 1 259 5 discriminator 1 view .LVU572
 1954 002a 034B     		ldr	r3, .L115
 1955 002c 034A     		ldr	r2, .L115+4
 1956 002e 40F20311 		movw	r1, #259
 1957              	.LVL196:
 259:Core/Src/tmag5170_ex.c **** 
 1958              		.loc 1 259 5 discriminator 1 view .LVU573
 1959 0032 0348     		ldr	r0, .L115+8
 1960              	.LVL197:
 259:Core/Src/tmag5170_ex.c **** 
 1961              		.loc 1 259 5 discriminator 1 view .LVU574
 1962 0034 FFF7FEFF 		bl	__assert_func
 1963              	.LVL198:
 1964              	.L116:
 1965              		.align	2
 1966              	.L115:
 1967 0038 00000000 		.word	.LC1
 1968 003c 00000000 		.word	.LANCHOR3
 1969 0040 18000000 		.word	.LC2
 1970              		.cfi_endproc
 1971              	.LFE5:
 1973              		.section	.text.TMAG5170startup,"ax",%progbits
 1974              		.align	1
 1975              		.global	TMAG5170startup
 1976              		.syntax unified
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 82


 1977              		.thumb
 1978              		.thumb_func
 1980              	TMAG5170startup:
 1981              	.LFB0:
 105:Core/Src/tmag5170_ex.c ****     // (OPTIONAL) Provide additional delay time for power supply settling
 1982              		.loc 1 105 1 is_stmt 1 view -0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986 0000 08B5     		push	{r3, lr}
 1987              	.LCFI31:
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 3, -8
 1990              		.cfi_offset 14, -4
 107:Core/Src/tmag5170_ex.c **** 
 1991              		.loc 1 107 5 view .LVU576
 1992 0002 3220     		movs	r0, #50
 1993 0004 FFF7FEFF 		bl	delay_ms
 1994              	.LVL199:
 115:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored = SYSTEM_CONFIG_DEFAULT;
 1995              		.loc 1 115 5 view .LVU577
 1996 0008 0021     		movs	r1, #0
 1997 000a 0220     		movs	r0, #2
 1998 000c FFF7FEFF 		bl	writeToRegister
 1999              	.LVL200:
 116:Core/Src/tmag5170_ex.c **** #endif
 2000              		.loc 1 116 5 view .LVU578
 116:Core/Src/tmag5170_ex.c **** #endif
 2001              		.loc 1 116 26 is_stmt 0 view .LVU579
 2002 0010 014B     		ldr	r3, .L119
 2003 0012 0022     		movs	r2, #0
 2004 0014 1A80     		strh	r2, [r3]	@ movhi
 127:Core/Src/tmag5170_ex.c **** 
 2005              		.loc 1 127 1 view .LVU580
 2006 0016 08BD     		pop	{r3, pc}
 2007              	.L120:
 2008              		.align	2
 2009              	.L119:
 2010 0018 00000000 		.word	.LANCHOR0
 2011              		.cfi_endproc
 2012              	.LFE0:
 2014              		.section	.text.enterDeepSleepMode,"ax",%progbits
 2015              		.align	1
 2016              		.global	enterDeepSleepMode
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2021              	enterDeepSleepMode:
 2022              	.LFB22:
 736:Core/Src/tmag5170_ex.c ****     // Send Write command, Deep Sleep resets device to factory settings so
 2023              		.loc 1 736 1 is_stmt 1 view -0
 2024              		.cfi_startproc
 2025              		@ args = 0, pretend = 0, frame = 0
 2026              		@ frame_needed = 0, uses_anonymous_args = 0
 2027 0000 08B5     		push	{r3, lr}
 2028              	.LCFI32:
 2029              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 83


 2030              		.cfi_offset 3, -8
 2031              		.cfi_offset 14, -4
 739:Core/Src/tmag5170_ex.c ****     SYSTEM_CONFIG_stored = SYSTEM_CONFIG_DEFAULT;
 2032              		.loc 1 739 5 view .LVU582
 2033 0002 6021     		movs	r1, #96
 2034 0004 0020     		movs	r0, #0
 2035 0006 FFF7FEFF 		bl	writeToRegister
 2036              	.LVL201:
 740:Core/Src/tmag5170_ex.c ****     delay_us(100);
 2037              		.loc 1 740 5 view .LVU583
 740:Core/Src/tmag5170_ex.c ****     delay_us(100);
 2038              		.loc 1 740 26 is_stmt 0 view .LVU584
 2039 000a 034B     		ldr	r3, .L123
 2040 000c 0022     		movs	r2, #0
 2041 000e 1A80     		strh	r2, [r3]	@ movhi
 741:Core/Src/tmag5170_ex.c **** }
 2042              		.loc 1 741 5 is_stmt 1 view .LVU585
 2043 0010 6420     		movs	r0, #100
 2044 0012 FFF7FEFF 		bl	delay_us
 2045              	.LVL202:
 742:Core/Src/tmag5170_ex.c **** 
 2046              		.loc 1 742 1 is_stmt 0 view .LVU586
 2047 0016 08BD     		pop	{r3, pc}
 2048              	.L124:
 2049              		.align	2
 2050              	.L123:
 2051 0018 00000000 		.word	.LANCHOR0
 2052              		.cfi_endproc
 2053              	.LFE22:
 2055              		.section	.text.magThreshSet,"ax",%progbits
 2056              		.align	1
 2057              		.global	magThreshSet
 2058              		.syntax unified
 2059              		.thumb
 2060              		.thumb_func
 2062              	magThreshSet:
 2063              	.LVL203:
 2064              	.LFB33:
1075:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2065              		.loc 1 1075 1 is_stmt 1 view -0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
1075:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2069              		.loc 1 1075 1 is_stmt 0 view .LVU588
 2070 0000 08B5     		push	{r3, lr}
 2071              	.LCFI33:
 2072              		.cfi_def_cfa_offset 8
 2073              		.cfi_offset 3, -8
 2074              		.cfi_offset 14, -4
1078:Core/Src/tmag5170_ex.c **** 
 2075              		.loc 1 1078 5 is_stmt 1 view .LVU589
1078:Core/Src/tmag5170_ex.c **** 
 2076              		.loc 1 1078 10 is_stmt 0 view .LVU590
 2077 0002 094B     		ldr	r3, .L129
 2078 0004 1B88     		ldrh	r3, [r3]
 2079 0006 9B11     		asrs	r3, r3, #6
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 84


1078:Core/Src/tmag5170_ex.c **** 
 2080              		.loc 1 1078 8 view .LVU591
 2081 0008 33F00703 		bics	r3, r3, #7
 2082 000c 01D1     		bne	.L125
1081:Core/Src/tmag5170_ex.c **** 
 2083              		.loc 1 1081 5 is_stmt 1 view .LVU592
1081:Core/Src/tmag5170_ex.c **** 
 2084              		.loc 1 1081 7 is_stmt 0 view .LVU593
 2085 000e 0328     		cmp	r0, #3
 2086 0010 00D9     		bls	.L128
 2087              	.LVL204:
 2088              	.L125:
1092:Core/Src/tmag5170_ex.c **** 
 2089              		.loc 1 1092 1 view .LVU594
 2090 0012 08BD     		pop	{r3, pc}
 2091              	.LVL205:
 2092              	.L128:
1085:Core/Src/tmag5170_ex.c **** 
 2093              		.loc 1 1085 5 is_stmt 1 view .LVU595
1085:Core/Src/tmag5170_ex.c **** 
 2094              		.loc 1 1085 13 is_stmt 0 view .LVU596
 2095 0014 0430     		adds	r0, r0, #4
 2096              	.LVL206:
1089:Core/Src/tmag5170_ex.c **** 
 2097              		.loc 1 1089 5 is_stmt 1 view .LVU597
1089:Core/Src/tmag5170_ex.c **** 
 2098              		.loc 1 1089 23 is_stmt 0 view .LVU598
 2099 0016 C9B2     		uxtb	r1, r1
1089:Core/Src/tmag5170_ex.c **** 
 2100              		.loc 1 1089 50 view .LVU599
 2101 0018 D2B2     		uxtb	r2, r2
 2102              	.LVL207:
1091:Core/Src/tmag5170_ex.c **** }
 2103              		.loc 1 1091 5 is_stmt 1 view .LVU600
 2104 001a 42EA0121 		orr	r1, r2, r1, lsl #8
 2105              	.LVL208:
1091:Core/Src/tmag5170_ex.c **** }
 2106              		.loc 1 1091 5 is_stmt 0 view .LVU601
 2107 001e C0B2     		uxtb	r0, r0
1091:Core/Src/tmag5170_ex.c **** }
 2108              		.loc 1 1091 5 view .LVU602
 2109 0020 FFF7FEFF 		bl	writeToRegister
 2110              	.LVL209:
1091:Core/Src/tmag5170_ex.c **** }
 2111              		.loc 1 1091 5 view .LVU603
 2112 0024 F5E7     		b	.L125
 2113              	.L130:
 2114 0026 00BF     		.align	2
 2115              	.L129:
 2116 0028 00000000 		.word	.LANCHOR0
 2117              		.cfi_endproc
 2118              	.LFE33:
 2120              		.section	.text.setMagOffsetIn7Bit,"ax",%progbits
 2121              		.align	1
 2122              		.global	setMagOffsetIn7Bit
 2123              		.syntax unified
 2124              		.thumb
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 85


 2125              		.thumb_func
 2127              	setMagOffsetIn7Bit:
 2128              	.LVL210:
 2129              	.LFB60:
1649:Core/Src/tmag5170_ex.c ****     if (offset_select > 0x03 || offset1_bits > 0x7F || offset2_bits > 0x7F) return;
 2130              		.loc 1 1649 1 is_stmt 1 view -0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 0
 2133              		@ frame_needed = 0, uses_anonymous_args = 0
1650:Core/Src/tmag5170_ex.c **** 
 2134              		.loc 1 1650 5 view .LVU605
1650:Core/Src/tmag5170_ex.c **** 
 2135              		.loc 1 1650 8 is_stmt 0 view .LVU606
 2136 0000 0328     		cmp	r0, #3
 2137 0002 10D8     		bhi	.L134
1650:Core/Src/tmag5170_ex.c **** 
 2138              		.loc 1 1650 30 discriminator 2 view .LVU607
 2139 0004 11F0800F 		tst	r1, #128
 2140 0008 0DD1     		bne	.L134
1650:Core/Src/tmag5170_ex.c **** 
 2141              		.loc 1 1650 53 discriminator 4 view .LVU608
 2142 000a 12F0800F 		tst	r2, #128
 2143 000e 0AD1     		bne	.L134
1649:Core/Src/tmag5170_ex.c ****     if (offset_select > 0x03 || offset1_bits > 0x7F || offset2_bits > 0x7F) return;
 2144              		.loc 1 1649 1 view .LVU609
 2145 0010 08B5     		push	{r3, lr}
 2146              	.LCFI34:
 2147              		.cfi_def_cfa_offset 8
 2148              		.cfi_offset 3, -8
 2149              		.cfi_offset 14, -4
1652:Core/Src/tmag5170_ex.c ****     // MAG_OFFSET_CONFIG (0x12) has all 16 bits assigned according to the three input variables
 2150              		.loc 1 1652 5 is_stmt 1 view .LVU610
1654:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2151              		.loc 1 1654 5 view .LVU611
1654:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2152              		.loc 1 1654 48 is_stmt 0 view .LVU612
 2153 0012 C901     		lsls	r1, r1, #7
 2154              	.LVL211:
1654:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2155              		.loc 1 1654 33 view .LVU613
 2156 0014 41EA8031 		orr	r1, r1, r0, lsl #14
 2157 0018 09B2     		sxth	r1, r1
1654:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2158              		.loc 1 1654 53 view .LVU614
 2159 001a 1143     		orrs	r1, r1, r2
 2160              	.LVL212:
1655:Core/Src/tmag5170_ex.c **** }
 2161              		.loc 1 1655 5 is_stmt 1 view .LVU615
 2162 001c 89B2     		uxth	r1, r1
1655:Core/Src/tmag5170_ex.c **** }
 2163              		.loc 1 1655 5 is_stmt 0 view .LVU616
 2164 001e 1220     		movs	r0, #18
 2165              	.LVL213:
1655:Core/Src/tmag5170_ex.c **** }
 2166              		.loc 1 1655 5 view .LVU617
 2167 0020 FFF7FEFF 		bl	writeToRegister
 2168              	.LVL214:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 86


1656:Core/Src/tmag5170_ex.c **** 
 2169              		.loc 1 1656 1 view .LVU618
 2170 0024 08BD     		pop	{r3, pc}
 2171              	.LVL215:
 2172              	.L134:
 2173              	.LCFI35:
 2174              		.cfi_def_cfa_offset 0
 2175              		.cfi_restore 3
 2176              		.cfi_restore 14
1656:Core/Src/tmag5170_ex.c **** 
 2177              		.loc 1 1656 1 view .LVU619
 2178 0026 7047     		bx	lr
 2179              		.cfi_endproc
 2180              	.LFE60:
 2182              		.section	.text.setMagGainConfigIn11Bit,"ax",%progbits
 2183              		.align	1
 2184              		.global	setMagGainConfigIn11Bit
 2185              		.syntax unified
 2186              		.thumb
 2187              		.thumb_func
 2189              	setMagGainConfigIn11Bit:
 2190              	.LVL216:
 2191              	.LFB62:
1734:Core/Src/tmag5170_ex.c ****     if (axis > 0x03 || gain_bits > 0x07FF) return;
 2192              		.loc 1 1734 1 is_stmt 1 view -0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 0
 2195              		@ frame_needed = 0, uses_anonymous_args = 0
1735:Core/Src/tmag5170_ex.c ****     uint16_t input;
 2196              		.loc 1 1735 5 view .LVU621
1735:Core/Src/tmag5170_ex.c ****     uint16_t input;
 2197              		.loc 1 1735 8 is_stmt 0 view .LVU622
 2198 0000 0328     		cmp	r0, #3
 2199 0002 02D8     		bhi	.L140
1735:Core/Src/tmag5170_ex.c ****     uint16_t input;
 2200              		.loc 1 1735 21 discriminator 2 view .LVU623
 2201 0004 B1F5006F 		cmp	r1, #2048
 2202 0008 00D3     		bcc	.L143
 2203              	.L140:
 2204 000a 7047     		bx	lr
 2205              	.L143:
1734:Core/Src/tmag5170_ex.c ****     if (axis > 0x03 || gain_bits > 0x07FF) return;
 2206              		.loc 1 1734 1 view .LVU624
 2207 000c 08B5     		push	{r3, lr}
 2208              	.LCFI36:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 3, -8
 2211              		.cfi_offset 14, -4
1736:Core/Src/tmag5170_ex.c ****     // MAG_OFFSET_CONFIG (0x11) has all 16 bits assigned according to the three input variables
 2212              		.loc 1 1736 5 is_stmt 1 view .LVU625
1738:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2213              		.loc 1 1738 5 view .LVU626
1738:Core/Src/tmag5170_ex.c ****     writeToRegister( MAG_OFFSET_CONFIG_ADDRESS, input );
 2214              		.loc 1 1738 24 is_stmt 0 view .LVU627
 2215 000e 41EA8031 		orr	r1, r1, r0, lsl #14
 2216              	.LVL217:
1739:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 87


 2217              		.loc 1 1739 5 is_stmt 1 view .LVU628
 2218 0012 89B2     		uxth	r1, r1
1739:Core/Src/tmag5170_ex.c **** }
 2219              		.loc 1 1739 5 is_stmt 0 view .LVU629
 2220 0014 1220     		movs	r0, #18
 2221              	.LVL218:
1739:Core/Src/tmag5170_ex.c **** }
 2222              		.loc 1 1739 5 view .LVU630
 2223 0016 FFF7FEFF 		bl	writeToRegister
 2224              	.LVL219:
1740:Core/Src/tmag5170_ex.c **** 
 2225              		.loc 1 1740 1 view .LVU631
 2226 001a 08BD     		pop	{r3, pc}
 2227              		.cfi_endproc
 2228              	.LFE62:
 2230              		.global	__aeabi_f2d
 2231              		.global	__aeabi_d2uiz
 2232              		.section	.text.setMagGainConfigInDecimal,"ax",%progbits
 2233              		.align	1
 2234              		.global	setMagGainConfigInDecimal
 2235              		.syntax unified
 2236              		.thumb
 2237              		.thumb_func
 2239              	setMagGainConfigInDecimal:
 2240              	.LVL220:
 2241              	.LFB63:
1756:Core/Src/tmag5170_ex.c ****     if ( gain_value < 0 || gain_value >= 2 ) return;
 2242              		.loc 1 1756 1 is_stmt 1 view -0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 0
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
1757:Core/Src/tmag5170_ex.c ****     uint16_t gain_bits = floor(gain_value * 1024);
 2246              		.loc 1 1757 5 view .LVU633
1757:Core/Src/tmag5170_ex.c ****     uint16_t gain_bits = floor(gain_value * 1024);
 2247              		.loc 1 1757 8 is_stmt 0 view .LVU634
 2248 0000 B5EEC00A 		vcmpe.f32	s0, #0
 2249 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2250 0008 1ED4     		bmi	.L147
1756:Core/Src/tmag5170_ex.c ****     if ( gain_value < 0 || gain_value >= 2 ) return;
 2251              		.loc 1 1756 1 discriminator 2 view .LVU635
 2252 000a 10B5     		push	{r4, lr}
 2253              	.LCFI37:
 2254              		.cfi_def_cfa_offset 8
 2255              		.cfi_offset 4, -8
 2256              		.cfi_offset 14, -4
 2257 000c 0446     		mov	r4, r0
1757:Core/Src/tmag5170_ex.c ****     uint16_t gain_bits = floor(gain_value * 1024);
 2258              		.loc 1 1757 25 discriminator 2 view .LVU636
 2259 000e F0EE007A 		vmov.f32	s15, #2.0e+0
 2260 0012 B4EEE70A 		vcmpe.f32	s0, s15
 2261 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2262 001a 00DB     		blt	.L150
 2263              	.LVL221:
 2264              	.L144:
1760:Core/Src/tmag5170_ex.c **** 
 2265              		.loc 1 1760 1 view .LVU637
 2266 001c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 88


 2267              	.LVL222:
 2268              	.L150:
1758:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
 2269              		.loc 1 1758 5 is_stmt 1 view .LVU638
1758:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
 2270              		.loc 1 1758 26 is_stmt 0 view .LVU639
 2271 001e DFED0B7A 		vldr.32	s15, .L151
 2272 0022 60EE277A 		vmul.f32	s15, s0, s15
 2273 0026 17EE900A 		vmov	r0, s15
 2274              	.LVL223:
1758:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
 2275              		.loc 1 1758 26 view .LVU640
 2276 002a FFF7FEFF 		bl	__aeabi_f2d
 2277              	.LVL224:
1758:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
 2278              		.loc 1 1758 26 view .LVU641
 2279 002e 41EC100B 		vmov	d0, r0, r1
 2280 0032 FFF7FEFF 		bl	floor
 2281              	.LVL225:
 2282 0036 51EC100B 		vmov	r0, r1, d0
1758:Core/Src/tmag5170_ex.c ****     setMagGainConfigIn11Bit( axis, gain_bits );
 2283              		.loc 1 1758 14 view .LVU642
 2284 003a FFF7FEFF 		bl	__aeabi_d2uiz
 2285              	.LVL226:
1759:Core/Src/tmag5170_ex.c **** }
 2286              		.loc 1 1759 5 is_stmt 1 view .LVU643
 2287 003e 81B2     		uxth	r1, r0
 2288 0040 2046     		mov	r0, r4
 2289              	.LVL227:
1759:Core/Src/tmag5170_ex.c **** }
 2290              		.loc 1 1759 5 is_stmt 0 view .LVU644
 2291 0042 FFF7FEFF 		bl	setMagGainConfigIn11Bit
 2292              	.LVL228:
1759:Core/Src/tmag5170_ex.c **** }
 2293              		.loc 1 1759 5 view .LVU645
 2294 0046 E9E7     		b	.L144
 2295              	.LVL229:
 2296              	.L147:
 2297              	.LCFI38:
 2298              		.cfi_def_cfa_offset 0
 2299              		.cfi_restore 4
 2300              		.cfi_restore 14
1759:Core/Src/tmag5170_ex.c **** }
 2301              		.loc 1 1759 5 view .LVU646
 2302 0048 7047     		bx	lr
 2303              	.L152:
 2304 004a 00BF     		.align	2
 2305              	.L151:
 2306 004c 00008044 		.word	1149239296
 2307              		.cfi_endproc
 2308              	.LFE63:
 2310              		.section	.text.setDATATYPE,"ax",%progbits
 2311              		.align	1
 2312              		.global	setDATATYPE
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 89


 2317              	setDATATYPE:
 2318              	.LVL230:
 2319              	.LFB64:
1810:Core/Src/tmag5170_ex.c ****     uint16_t input = SYSTEM_CONFIG_stored;
 2320              		.loc 1 1810 1 is_stmt 1 view -0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 0
 2323              		@ frame_needed = 0, uses_anonymous_args = 0
1810:Core/Src/tmag5170_ex.c ****     uint16_t input = SYSTEM_CONFIG_stored;
 2324              		.loc 1 1810 1 is_stmt 0 view .LVU648
 2325 0000 08B5     		push	{r3, lr}
 2326              	.LCFI39:
 2327              		.cfi_def_cfa_offset 8
 2328              		.cfi_offset 3, -8
 2329              		.cfi_offset 14, -4
1811:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_DATA_TYPE_MASK);
 2330              		.loc 1 1811 5 is_stmt 1 view .LVU649
1811:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_DATA_TYPE_MASK);
 2331              		.loc 1 1811 14 is_stmt 0 view .LVU650
 2332 0002 054B     		ldr	r3, .L155
 2333 0004 1B88     		ldrh	r3, [r3]
 2334              	.LVL231:
1812:Core/Src/tmag5170_ex.c ****     input |= data_type_bits << 6;
 2335              		.loc 1 1812 5 is_stmt 1 view .LVU651
1812:Core/Src/tmag5170_ex.c ****     input |= data_type_bits << 6;
 2336              		.loc 1 1812 11 is_stmt 0 view .LVU652
 2337 0006 23F4E073 		bic	r3, r3, #448
 2338              	.LVL232:
1813:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 2339              		.loc 1 1813 5 is_stmt 1 view .LVU653
1814:Core/Src/tmag5170_ex.c **** }
 2340              		.loc 1 1814 5 view .LVU654
 2341 000a 43EA8011 		orr	r1, r3, r0, lsl #6
 2342              	.LVL233:
1814:Core/Src/tmag5170_ex.c **** }
 2343              		.loc 1 1814 5 is_stmt 0 view .LVU655
 2344 000e 0220     		movs	r0, #2
 2345              	.LVL234:
1814:Core/Src/tmag5170_ex.c **** }
 2346              		.loc 1 1814 5 view .LVU656
 2347 0010 FFF7FEFF 		bl	writeToRegister
 2348              	.LVL235:
1815:Core/Src/tmag5170_ex.c **** 
 2349              		.loc 1 1815 1 view .LVU657
 2350 0014 08BD     		pop	{r3, pc}
 2351              	.L156:
 2352 0016 00BF     		.align	2
 2353              	.L155:
 2354 0018 00000000 		.word	.LANCHOR0
 2355              		.cfi_endproc
 2356              	.LFE64:
 2358              		.section	.text.writeToRegisterWithCMD0,"ax",%progbits
 2359              		.align	1
 2360              		.global	writeToRegisterWithCMD0
 2361              		.syntax unified
 2362              		.thumb
 2363              		.thumb_func
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 90


 2365              	writeToRegisterWithCMD0:
 2366              	.LVL236:
 2367              	.LFB6:
 293:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2368              		.loc 1 293 1 is_stmt 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 8
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 293:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2372              		.loc 1 293 1 is_stmt 0 view .LVU659
 2373 0000 00B5     		push	{lr}
 2374              	.LCFI40:
 2375              		.cfi_def_cfa_offset 4
 2376              		.cfi_offset 14, -4
 2377 0002 83B0     		sub	sp, sp, #12
 2378              	.LCFI41:
 2379              		.cfi_def_cfa_offset 16
 295:Core/Src/tmag5170_ex.c **** 
 2380              		.loc 1 295 5 is_stmt 1 view .LVU660
 2381 0004 1328     		cmp	r0, #19
 2382 0006 13D8     		bhi	.L160
 298:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2383              		.loc 1 298 5 view .LVU661
 298:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2384              		.loc 1 298 13 is_stmt 0 view .LVU662
 2385 0008 0023     		movs	r3, #0
 2386 000a 0193     		str	r3, [sp, #4]
 299:Core/Src/tmag5170_ex.c **** 
 2387              		.loc 1 299 5 is_stmt 1 view .LVU663
 299:Core/Src/tmag5170_ex.c **** 
 2388              		.loc 1 299 13 is_stmt 0 view .LVU664
 2389 000c 0093     		str	r3, [sp]
 302:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 2390              		.loc 1 302 5 is_stmt 1 view .LVU665
 302:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 2391              		.loc 1 302 15 is_stmt 0 view .LVU666
 2392 000e 8DF80400 		strb	r0, [sp, #4]
 303:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 2393              		.loc 1 303 5 is_stmt 1 view .LVU667
 303:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 2394              		.loc 1 303 15 is_stmt 0 view .LVU668
 2395 0012 0B0A     		lsrs	r3, r1, #8
 2396 0014 8DF80530 		strb	r3, [sp, #5]
 304:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x10;
 2397              		.loc 1 304 5 is_stmt 1 view .LVU669
 304:Core/Src/tmag5170_ex.c ****     dataTx[3] = 0x10;
 2398              		.loc 1 304 15 is_stmt 0 view .LVU670
 2399 0018 8DF80610 		strb	r1, [sp, #6]
 305:Core/Src/tmag5170_ex.c **** 
 2400              		.loc 1 305 5 is_stmt 1 view .LVU671
 305:Core/Src/tmag5170_ex.c **** 
 2401              		.loc 1 305 15 is_stmt 0 view .LVU672
 2402 001c 1023     		movs	r3, #16
 2403 001e 8DF80730 		strb	r3, [sp, #7]
 307:Core/Src/tmag5170_ex.c **** }
 2404              		.loc 1 307 5 is_stmt 1 view .LVU673
 2405 0022 6946     		mov	r1, sp
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 91


 2406              	.LVL237:
 307:Core/Src/tmag5170_ex.c **** }
 2407              		.loc 1 307 5 is_stmt 0 view .LVU674
 2408 0024 01A8     		add	r0, sp, #4
 2409              	.LVL238:
 307:Core/Src/tmag5170_ex.c **** }
 2410              		.loc 1 307 5 view .LVU675
 2411 0026 FFF7FEFF 		bl	sendAndReceiveFrame
 2412              	.LVL239:
 308:Core/Src/tmag5170_ex.c **** 
 2413              		.loc 1 308 1 view .LVU676
 2414 002a 03B0     		add	sp, sp, #12
 2415              	.LCFI42:
 2416              		.cfi_remember_state
 2417              		.cfi_def_cfa_offset 4
 2418              		@ sp needed
 2419 002c 5DF804FB 		ldr	pc, [sp], #4
 2420              	.LVL240:
 2421              	.L160:
 2422              	.LCFI43:
 2423              		.cfi_restore_state
 295:Core/Src/tmag5170_ex.c **** 
 2424              		.loc 1 295 5 discriminator 1 view .LVU677
 2425 0030 034B     		ldr	r3, .L161
 2426 0032 044A     		ldr	r2, .L161+4
 2427 0034 40F22711 		movw	r1, #295
 2428              	.LVL241:
 295:Core/Src/tmag5170_ex.c **** 
 2429              		.loc 1 295 5 discriminator 1 view .LVU678
 2430 0038 0348     		ldr	r0, .L161+8
 2431              	.LVL242:
 295:Core/Src/tmag5170_ex.c **** 
 2432              		.loc 1 295 5 discriminator 1 view .LVU679
 2433 003a FFF7FEFF 		bl	__assert_func
 2434              	.LVL243:
 2435              	.L162:
 2436 003e 00BF     		.align	2
 2437              	.L161:
 2438 0040 00000000 		.word	.LC1
 2439 0044 00000000 		.word	.LANCHOR4
 2440 0048 18000000 		.word	.LC2
 2441              		.cfi_endproc
 2442              	.LFE6:
 2444              		.section	.text.writeToRegisterWithSTAT,"ax",%progbits
 2445              		.align	1
 2446              		.global	writeToRegisterWithSTAT
 2447              		.syntax unified
 2448              		.thumb
 2449              		.thumb_func
 2451              	writeToRegisterWithSTAT:
 2452              	.LVL244:
 2453              	.LFB7:
 331:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2454              		.loc 1 331 1 is_stmt 1 view -0
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 8
 2457              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 92


 331:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2458              		.loc 1 331 1 is_stmt 0 view .LVU681
 2459 0000 10B5     		push	{r4, lr}
 2460              	.LCFI44:
 2461              		.cfi_def_cfa_offset 8
 2462              		.cfi_offset 4, -8
 2463              		.cfi_offset 14, -4
 2464 0002 82B0     		sub	sp, sp, #8
 2465              	.LCFI45:
 2466              		.cfi_def_cfa_offset 16
 333:Core/Src/tmag5170_ex.c **** 
 2467              		.loc 1 333 5 is_stmt 1 view .LVU682
 2468 0004 1328     		cmp	r0, #19
 2469 0006 24D8     		bhi	.L168
 2470 0008 1446     		mov	r4, r2
 336:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2471              		.loc 1 336 5 view .LVU683
 336:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2472              		.loc 1 336 13 is_stmt 0 view .LVU684
 2473 000a 0022     		movs	r2, #0
 2474              	.LVL245:
 336:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2475              		.loc 1 336 13 view .LVU685
 2476 000c 0192     		str	r2, [sp, #4]
 337:Core/Src/tmag5170_ex.c **** 
 2477              		.loc 1 337 5 is_stmt 1 view .LVU686
 337:Core/Src/tmag5170_ex.c **** 
 2478              		.loc 1 337 13 is_stmt 0 view .LVU687
 2479 000e 0092     		str	r2, [sp]
 340:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 2480              		.loc 1 340 5 is_stmt 1 view .LVU688
 340:Core/Src/tmag5170_ex.c ****     dataTx[1] = (data_to_write >> 8);
 2481              		.loc 1 340 15 is_stmt 0 view .LVU689
 2482 0010 8DF80400 		strb	r0, [sp, #4]
 341:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 2483              		.loc 1 341 5 is_stmt 1 view .LVU690
 341:Core/Src/tmag5170_ex.c ****     dataTx[2] = (data_to_write);
 2484              		.loc 1 341 15 is_stmt 0 view .LVU691
 2485 0014 0B0A     		lsrs	r3, r1, #8
 2486 0016 8DF80530 		strb	r3, [sp, #5]
 342:Core/Src/tmag5170_ex.c ****     dataTx[3] = (cmd_bits << 4);
 2487              		.loc 1 342 5 is_stmt 1 view .LVU692
 342:Core/Src/tmag5170_ex.c ****     dataTx[3] = (cmd_bits << 4);
 2488              		.loc 1 342 15 is_stmt 0 view .LVU693
 2489 001a 8DF80610 		strb	r1, [sp, #6]
 343:Core/Src/tmag5170_ex.c **** 
 2490              		.loc 1 343 5 is_stmt 1 view .LVU694
 343:Core/Src/tmag5170_ex.c **** 
 2491              		.loc 1 343 27 is_stmt 0 view .LVU695
 2492 001e 2301     		lsls	r3, r4, #4
 343:Core/Src/tmag5170_ex.c **** 
 2493              		.loc 1 343 15 view .LVU696
 2494 0020 8DF80730 		strb	r3, [sp, #7]
 345:Core/Src/tmag5170_ex.c **** 
 2495              		.loc 1 345 5 is_stmt 1 view .LVU697
 2496 0024 6946     		mov	r1, sp
 2497              	.LVL246:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 93


 345:Core/Src/tmag5170_ex.c **** 
 2498              		.loc 1 345 5 is_stmt 0 view .LVU698
 2499 0026 01A8     		add	r0, sp, #4
 2500              	.LVL247:
 345:Core/Src/tmag5170_ex.c **** 
 2501              		.loc 1 345 5 view .LVU699
 2502 0028 FFF7FEFF 		bl	sendAndReceiveFrame
 2503              	.LVL248:
 347:Core/Src/tmag5170_ex.c ****     {
 2504              		.loc 1 347 5 is_stmt 1 view .LVU700
 347:Core/Src/tmag5170_ex.c ****     {
 2505              		.loc 1 347 10 is_stmt 0 view .LVU701
 2506 002c 104B     		ldr	r3, .L169
 2507 002e 1B88     		ldrh	r3, [r3]
 2508 0030 9B11     		asrs	r3, r3, #6
 347:Core/Src/tmag5170_ex.c ****     {
 2509              		.loc 1 347 8 view .LVU702
 2510 0032 33F00703 		bics	r3, r3, #7
 2511 0036 13D1     		bne	.L165
 349:Core/Src/tmag5170_ex.c ****     }
 2512              		.loc 1 349 9 is_stmt 1 view .LVU703
 349:Core/Src/tmag5170_ex.c ****     }
 2513              		.loc 1 349 42 is_stmt 0 view .LVU704
 2514 0038 9DF80000 		ldrb	r0, [sp]	@ zero_extendqisi2
 349:Core/Src/tmag5170_ex.c ****     }
 2515              		.loc 1 349 46 view .LVU705
 2516 003c 0001     		lsls	r0, r0, #4
 349:Core/Src/tmag5170_ex.c ****     }
 2517              		.loc 1 349 33 view .LVU706
 2518 003e 40EA0430 		orr	r0, r0, r4, lsl #12
 2519 0042 00B2     		sxth	r0, r0
 349:Core/Src/tmag5170_ex.c ****     }
 2520              		.loc 1 349 61 view .LVU707
 2521 0044 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 349:Core/Src/tmag5170_ex.c ****     }
 2522              		.loc 1 349 52 view .LVU708
 2523 0048 40EA1310 		orr	r0, r0, r3, lsr #4
 2524 004c 80B2     		uxth	r0, r0
 2525              	.L166:
 360:Core/Src/tmag5170_ex.c **** 
 2526              		.loc 1 360 1 view .LVU709
 2527 004e 02B0     		add	sp, sp, #8
 2528              	.LCFI46:
 2529              		.cfi_remember_state
 2530              		.cfi_def_cfa_offset 8
 2531              		@ sp needed
 2532 0050 10BD     		pop	{r4, pc}
 2533              	.LVL249:
 2534              	.L168:
 2535              	.LCFI47:
 2536              		.cfi_restore_state
 333:Core/Src/tmag5170_ex.c **** 
 2537              		.loc 1 333 5 discriminator 1 view .LVU710
 2538 0052 084B     		ldr	r3, .L169+4
 2539 0054 084A     		ldr	r2, .L169+8
 2540              	.LVL250:
 333:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 94


 2541              		.loc 1 333 5 discriminator 1 view .LVU711
 2542 0056 40F24D11 		movw	r1, #333
 2543              	.LVL251:
 333:Core/Src/tmag5170_ex.c **** 
 2544              		.loc 1 333 5 discriminator 1 view .LVU712
 2545 005a 0848     		ldr	r0, .L169+12
 2546              	.LVL252:
 333:Core/Src/tmag5170_ex.c **** 
 2547              		.loc 1 333 5 discriminator 1 view .LVU713
 2548 005c FFF7FEFF 		bl	__assert_func
 2549              	.LVL253:
 2550              	.L165:
 353:Core/Src/tmag5170_ex.c ****     }
 2551              		.loc 1 353 9 is_stmt 1 view .LVU714
 353:Core/Src/tmag5170_ex.c ****     }
 2552              		.loc 1 353 42 is_stmt 0 view .LVU715
 2553 0060 9DF80300 		ldrb	r0, [sp, #3]	@ zero_extendqisi2
 353:Core/Src/tmag5170_ex.c ****     }
 2554              		.loc 1 353 33 view .LVU716
 2555 0064 0009     		lsrs	r0, r0, #4
 2556 0066 40EA0430 		orr	r0, r0, r4, lsl #12
 2557 006a 80B2     		uxth	r0, r0
 2558 006c EFE7     		b	.L166
 2559              	.L170:
 2560 006e 00BF     		.align	2
 2561              	.L169:
 2562 0070 00000000 		.word	.LANCHOR0
 2563 0074 00000000 		.word	.LC1
 2564 0078 00000000 		.word	.LANCHOR5
 2565 007c 18000000 		.word	.LC2
 2566              		.cfi_endproc
 2567              	.LFE7:
 2569              		.section	.text.normalRead,"ax",%progbits
 2570              		.align	1
 2571              		.global	normalRead
 2572              		.syntax unified
 2573              		.thumb
 2574              		.thumb_func
 2576              	normalRead:
 2577              	.LVL254:
 2578              	.LFB8:
 378:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2579              		.loc 1 378 1 is_stmt 1 view -0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 8
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 378:Core/Src/tmag5170_ex.c ****     // Check that the input address is in range
 2583              		.loc 1 378 1 is_stmt 0 view .LVU718
 2584 0000 10B5     		push	{r4, lr}
 2585              	.LCFI48:
 2586              		.cfi_def_cfa_offset 8
 2587              		.cfi_offset 4, -8
 2588              		.cfi_offset 14, -4
 2589 0002 82B0     		sub	sp, sp, #8
 2590              	.LCFI49:
 2591              		.cfi_def_cfa_offset 16
 380:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 95


 2592              		.loc 1 380 5 is_stmt 1 view .LVU719
 2593 0004 1329     		cmp	r1, #19
 2594 0006 1FD8     		bhi	.L174
 2595 0008 0446     		mov	r4, r0
 383:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2596              		.loc 1 383 5 view .LVU720
 383:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 2597              		.loc 1 383 13 is_stmt 0 view .LVU721
 2598 000a 0023     		movs	r3, #0
 2599 000c 0193     		str	r3, [sp, #4]
 384:Core/Src/tmag5170_ex.c **** 
 2600              		.loc 1 384 5 is_stmt 1 view .LVU722
 384:Core/Src/tmag5170_ex.c **** 
 2601              		.loc 1 384 13 is_stmt 0 view .LVU723
 2602 000e 0093     		str	r3, [sp]
 387:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 2603              		.loc 1 387 5 is_stmt 1 view .LVU724
 387:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 2604              		.loc 1 387 15 is_stmt 0 view .LVU725
 2605 0010 61F07F01 		orn	r1, r1, #127
 2606              	.LVL255:
 387:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 2607              		.loc 1 387 15 view .LVU726
 2608 0014 8DF80410 		strb	r1, [sp, #4]
 388:Core/Src/tmag5170_ex.c ****     dataTx[2] = 0x00;
 2609              		.loc 1 388 5 is_stmt 1 view .LVU727
 389:Core/Src/tmag5170_ex.c ****     dataTx[3] = cmd_bits << 4;
 2610              		.loc 1 389 5 view .LVU728
 390:Core/Src/tmag5170_ex.c **** 
 2611              		.loc 1 390 5 view .LVU729
 390:Core/Src/tmag5170_ex.c **** 
 2612              		.loc 1 390 26 is_stmt 0 view .LVU730
 2613 0018 1201     		lsls	r2, r2, #4
 2614              	.LVL256:
 390:Core/Src/tmag5170_ex.c **** 
 2615              		.loc 1 390 15 view .LVU731
 2616 001a 8DF80720 		strb	r2, [sp, #7]
 392:Core/Src/tmag5170_ex.c ****     output[0] = (dataRx[1] << 8) | dataRx[2];
 2617              		.loc 1 392 5 is_stmt 1 view .LVU732
 2618 001e 6946     		mov	r1, sp
 2619 0020 01A8     		add	r0, sp, #4
 2620              	.LVL257:
 392:Core/Src/tmag5170_ex.c ****     output[0] = (dataRx[1] << 8) | dataRx[2];
 2621              		.loc 1 392 5 is_stmt 0 view .LVU733
 2622 0022 FFF7FEFF 		bl	sendAndReceiveFrame
 2623              	.LVL258:
 393:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 2624              		.loc 1 393 5 is_stmt 1 view .LVU734
 393:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 2625              		.loc 1 393 24 is_stmt 0 view .LVU735
 2626 0026 9DF80120 		ldrb	r2, [sp, #1]	@ zero_extendqisi2
 393:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 2627              		.loc 1 393 42 view .LVU736
 2628 002a 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 393:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 2629              		.loc 1 393 34 view .LVU737
 2630 002e 43EA0223 		orr	r3, r3, r2, lsl #8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 96


 393:Core/Src/tmag5170_ex.c ****     output[1] = (dataRx[0] << 4) | (dataRx[3] >> 4);
 2631              		.loc 1 393 15 view .LVU738
 2632 0032 2380     		strh	r3, [r4]	@ movhi
 394:Core/Src/tmag5170_ex.c **** }
 2633              		.loc 1 394 5 is_stmt 1 view .LVU739
 394:Core/Src/tmag5170_ex.c **** }
 2634              		.loc 1 394 24 is_stmt 0 view .LVU740
 2635 0034 9DF80020 		ldrb	r2, [sp]	@ zero_extendqisi2
 394:Core/Src/tmag5170_ex.c **** }
 2636              		.loc 1 394 43 view .LVU741
 2637 0038 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 394:Core/Src/tmag5170_ex.c **** }
 2638              		.loc 1 394 34 view .LVU742
 2639 003c 1B09     		lsrs	r3, r3, #4
 2640 003e 43EA0213 		orr	r3, r3, r2, lsl #4
 394:Core/Src/tmag5170_ex.c **** }
 2641              		.loc 1 394 15 view .LVU743
 2642 0042 6380     		strh	r3, [r4, #2]	@ movhi
 395:Core/Src/tmag5170_ex.c **** 
 2643              		.loc 1 395 1 view .LVU744
 2644 0044 02B0     		add	sp, sp, #8
 2645              	.LCFI50:
 2646              		.cfi_remember_state
 2647              		.cfi_def_cfa_offset 8
 2648              		@ sp needed
 2649 0046 10BD     		pop	{r4, pc}
 2650              	.LVL259:
 2651              	.L174:
 2652              	.LCFI51:
 2653              		.cfi_restore_state
 380:Core/Src/tmag5170_ex.c **** 
 2654              		.loc 1 380 5 discriminator 1 view .LVU745
 2655 0048 034B     		ldr	r3, .L175
 2656 004a 044A     		ldr	r2, .L175+4
 2657              	.LVL260:
 380:Core/Src/tmag5170_ex.c **** 
 2658              		.loc 1 380 5 discriminator 1 view .LVU746
 2659 004c 4FF4BE71 		mov	r1, #380
 2660              	.LVL261:
 380:Core/Src/tmag5170_ex.c **** 
 2661              		.loc 1 380 5 discriminator 1 view .LVU747
 2662 0050 0348     		ldr	r0, .L175+8
 2663              	.LVL262:
 380:Core/Src/tmag5170_ex.c **** 
 2664              		.loc 1 380 5 discriminator 1 view .LVU748
 2665 0052 FFF7FEFF 		bl	__assert_func
 2666              	.LVL263:
 2667              	.L176:
 2668 0056 00BF     		.align	2
 2669              	.L175:
 2670 0058 00000000 		.word	.LC1
 2671 005c 00000000 		.word	.LANCHOR6
 2672 0060 18000000 		.word	.LC2
 2673              		.cfi_endproc
 2674              	.LFE8:
 2676              		.section	.text.normalReadRegister,"ax",%progbits
 2677              		.align	1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 97


 2678              		.global	normalReadRegister
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2683              	normalReadRegister:
 2684              	.LVL264:
 2685              	.LFB9:
 408:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 2686              		.loc 1 408 1 is_stmt 1 view -0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 8
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 408:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 2690              		.loc 1 408 1 is_stmt 0 view .LVU750
 2691 0000 00B5     		push	{lr}
 2692              	.LCFI52:
 2693              		.cfi_def_cfa_offset 4
 2694              		.cfi_offset 14, -4
 2695 0002 83B0     		sub	sp, sp, #12
 2696              	.LCFI53:
 2697              		.cfi_def_cfa_offset 16
 2698 0004 0146     		mov	r1, r0
 409:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x00 );
 2699              		.loc 1 409 5 is_stmt 1 view .LVU751
 409:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x00 );
 2700              		.loc 1 409 14 is_stmt 0 view .LVU752
 2701 0006 0022     		movs	r2, #0
 2702 0008 0192     		str	r2, [sp, #4]
 410:Core/Src/tmag5170_ex.c ****     return output[0];
 2703              		.loc 1 410 5 is_stmt 1 view .LVU753
 2704 000a 01A8     		add	r0, sp, #4
 2705              	.LVL265:
 410:Core/Src/tmag5170_ex.c ****     return output[0];
 2706              		.loc 1 410 5 is_stmt 0 view .LVU754
 2707 000c FFF7FEFF 		bl	normalRead
 2708              	.LVL266:
 411:Core/Src/tmag5170_ex.c **** }
 2709              		.loc 1 411 5 is_stmt 1 view .LVU755
 412:Core/Src/tmag5170_ex.c **** 
 2710              		.loc 1 412 1 is_stmt 0 view .LVU756
 2711 0010 BDF80400 		ldrh	r0, [sp, #4]
 2712 0014 03B0     		add	sp, sp, #12
 2713              	.LCFI54:
 2714              		.cfi_def_cfa_offset 4
 2715              		@ sp needed
 2716 0016 5DF804FB 		ldr	pc, [sp], #4
 2717              		.cfi_endproc
 2718              	.LFE9:
 2720              		.section	.text.enterConfigurationMode,"ax",%progbits
 2721              		.align	1
 2722              		.global	enterConfigurationMode
 2723              		.syntax unified
 2724              		.thumb
 2725              		.thumb_func
 2727              	enterConfigurationMode:
 2728              	.LFB14:
 531:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 98


 2729              		.loc 1 531 1 is_stmt 1 view -0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 0
 2732              		@ frame_needed = 0, uses_anonymous_args = 0
 2733 0000 08B5     		push	{r3, lr}
 2734              	.LCFI55:
 2735              		.cfi_def_cfa_offset 8
 2736              		.cfi_offset 3, -8
 2737              		.cfi_offset 14, -4
 534:Core/Src/tmag5170_ex.c **** 
 2738              		.loc 1 534 5 view .LVU758
 534:Core/Src/tmag5170_ex.c **** 
 2739              		.loc 1 534 10 is_stmt 0 view .LVU759
 2740 0002 0A4B     		ldr	r3, .L183
 2741 0004 1B88     		ldrh	r3, [r3]
 2742 0006 9B11     		asrs	r3, r3, #6
 534:Core/Src/tmag5170_ex.c **** 
 2743              		.loc 1 534 8 view .LVU760
 2744 0008 33F00703 		bics	r3, r3, #7
 2745 000c 00D0     		beq	.L182
 2746              	.L179:
 545:Core/Src/tmag5170_ex.c **** 
 2747              		.loc 1 545 1 view .LVU761
 2748 000e 08BD     		pop	{r3, pc}
 2749              	.L182:
 536:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (address: 0x006-4) to Configuration Mode (0h)
 2750              		.loc 1 536 5 is_stmt 1 view .LVU762
 538:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 2751              		.loc 1 538 5 view .LVU763
 538:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 2752              		.loc 1 538 13 is_stmt 0 view .LVU764
 2753 0010 0020     		movs	r0, #0
 2754 0012 FFF7FEFF 		bl	normalReadRegister
 2755              	.LVL267:
 539:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2756              		.loc 1 539 5 is_stmt 1 view .LVU765
 539:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2757              		.loc 1 539 11 is_stmt 0 view .LVU766
 2758 0016 20F07001 		bic	r1, r0, #112
 2759 001a 89B2     		uxth	r1, r1
 2760              	.LVL268:
 540:Core/Src/tmag5170_ex.c **** 
 2761              		.loc 1 540 5 is_stmt 1 view .LVU767
 2762 001c 0020     		movs	r0, #0
 2763 001e FFF7FEFF 		bl	writeToRegister
 2764              	.LVL269:
 543:Core/Src/tmag5170_ex.c **** #endif
 2765              		.loc 1 543 5 view .LVU768
 2766 0022 3220     		movs	r0, #50
 2767 0024 FFF7FEFF 		bl	delay_us
 2768              	.LVL270:
 2769 0028 F1E7     		b	.L179
 2770              	.L184:
 2771 002a 00BF     		.align	2
 2772              	.L183:
 2773 002c 00000000 		.word	.LANCHOR0
 2774              		.cfi_endproc
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 99


 2775              	.LFE14:
 2777              		.section	.text.enterStandbyMode,"ax",%progbits
 2778              		.align	1
 2779              		.global	enterStandbyMode
 2780              		.syntax unified
 2781              		.thumb
 2782              		.thumb_func
 2784              	enterStandbyMode:
 2785              	.LFB15:
 555:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2786              		.loc 1 555 1 view -0
 2787              		.cfi_startproc
 2788              		@ args = 0, pretend = 0, frame = 0
 2789              		@ frame_needed = 0, uses_anonymous_args = 0
 2790 0000 08B5     		push	{r3, lr}
 2791              	.LCFI56:
 2792              		.cfi_def_cfa_offset 8
 2793              		.cfi_offset 3, -8
 2794              		.cfi_offset 14, -4
 558:Core/Src/tmag5170_ex.c **** 
 2795              		.loc 1 558 5 view .LVU770
 558:Core/Src/tmag5170_ex.c **** 
 2796              		.loc 1 558 10 is_stmt 0 view .LVU771
 2797 0002 0B4B     		ldr	r3, .L189
 2798 0004 1B88     		ldrh	r3, [r3]
 2799 0006 9B11     		asrs	r3, r3, #6
 558:Core/Src/tmag5170_ex.c **** 
 2800              		.loc 1 558 8 view .LVU772
 2801 0008 33F00703 		bics	r3, r3, #7
 2802 000c 00D0     		beq	.L188
 2803              	.L185:
 569:Core/Src/tmag5170_ex.c **** 
 2804              		.loc 1 569 1 view .LVU773
 2805 000e 08BD     		pop	{r3, pc}
 2806              	.L188:
 560:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (address: 0x006-4) to Standby Mode (1h)
 2807              		.loc 1 560 5 is_stmt 1 view .LVU774
 562:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Standby
 2808              		.loc 1 562 5 view .LVU775
 562:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Standby
 2809              		.loc 1 562 13 is_stmt 0 view .LVU776
 2810 0010 0020     		movs	r0, #0
 2811 0012 FFF7FEFF 		bl	normalReadRegister
 2812              	.LVL271:
 563:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2813              		.loc 1 563 5 is_stmt 1 view .LVU777
 563:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2814              		.loc 1 563 21 is_stmt 0 view .LVU778
 2815 0016 20F07001 		bic	r1, r0, #112
 2816 001a 09B2     		sxth	r1, r1
 563:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2817              		.loc 1 563 62 view .LVU779
 2818 001c 41F01001 		orr	r1, r1, #16
 563:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2819              		.loc 1 563 11 view .LVU780
 2820 0020 89B2     		uxth	r1, r1
 2821              	.LVL272:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 100


 564:Core/Src/tmag5170_ex.c **** 
 2822              		.loc 1 564 5 is_stmt 1 view .LVU781
 2823 0022 0020     		movs	r0, #0
 2824 0024 FFF7FEFF 		bl	writeToRegister
 2825              	.LVL273:
 567:Core/Src/tmag5170_ex.c **** #endif
 2826              		.loc 1 567 5 view .LVU782
 2827 0028 8C20     		movs	r0, #140
 2828 002a FFF7FEFF 		bl	delay_us
 2829              	.LVL274:
 2830 002e EEE7     		b	.L185
 2831              	.L190:
 2832              		.align	2
 2833              	.L189:
 2834 0030 00000000 		.word	.LANCHOR0
 2835              		.cfi_endproc
 2836              	.LFE15:
 2838              		.section	.text.enterActiveMeasureMode,"ax",%progbits
 2839              		.align	1
 2840              		.global	enterActiveMeasureMode
 2841              		.syntax unified
 2842              		.thumb
 2843              		.thumb_func
 2845              	enterActiveMeasureMode:
 2846              	.LFB16:
 579:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2847              		.loc 1 579 1 view -0
 2848              		.cfi_startproc
 2849              		@ args = 0, pretend = 0, frame = 0
 2850              		@ frame_needed = 0, uses_anonymous_args = 0
 2851 0000 08B5     		push	{r3, lr}
 2852              	.LCFI57:
 2853              		.cfi_def_cfa_offset 8
 2854              		.cfi_offset 3, -8
 2855              		.cfi_offset 14, -4
 582:Core/Src/tmag5170_ex.c **** 
 2856              		.loc 1 582 5 view .LVU784
 582:Core/Src/tmag5170_ex.c **** 
 2857              		.loc 1 582 10 is_stmt 0 view .LVU785
 2858 0002 0B4B     		ldr	r3, .L195
 2859 0004 1B88     		ldrh	r3, [r3]
 2860 0006 9B11     		asrs	r3, r3, #6
 582:Core/Src/tmag5170_ex.c **** 
 2861              		.loc 1 582 8 view .LVU786
 2862 0008 33F00703 		bics	r3, r3, #7
 2863 000c 00D0     		beq	.L194
 2864              	.L191:
 593:Core/Src/tmag5170_ex.c **** 
 2865              		.loc 1 593 1 view .LVU787
 2866 000e 08BD     		pop	{r3, pc}
 2867              	.L194:
 584:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Active Measure Mode (2h)
 2868              		.loc 1 584 5 is_stmt 1 view .LVU788
 586:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveM
 2869              		.loc 1 586 5 view .LVU789
 586:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveM
 2870              		.loc 1 586 13 is_stmt 0 view .LVU790
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 101


 2871 0010 0020     		movs	r0, #0
 2872 0012 FFF7FEFF 		bl	normalReadRegister
 2873              	.LVL275:
 587:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2874              		.loc 1 587 5 is_stmt 1 view .LVU791
 587:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2875              		.loc 1 587 21 is_stmt 0 view .LVU792
 2876 0016 20F07001 		bic	r1, r0, #112
 2877 001a 09B2     		sxth	r1, r1
 587:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2878              		.loc 1 587 62 view .LVU793
 2879 001c 41F02001 		orr	r1, r1, #32
 587:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2880              		.loc 1 587 11 view .LVU794
 2881 0020 89B2     		uxth	r1, r1
 2882              	.LVL276:
 588:Core/Src/tmag5170_ex.c **** 
 2883              		.loc 1 588 5 is_stmt 1 view .LVU795
 2884 0022 0020     		movs	r0, #0
 2885 0024 FFF7FEFF 		bl	writeToRegister
 2886              	.LVL277:
 591:Core/Src/tmag5170_ex.c **** #endif
 2887              		.loc 1 591 5 view .LVU796
 2888 0028 8C20     		movs	r0, #140
 2889 002a FFF7FEFF 		bl	delay_us
 2890              	.LVL278:
 2891 002e EEE7     		b	.L191
 2892              	.L196:
 2893              		.align	2
 2894              	.L195:
 2895 0030 00000000 		.word	.LANCHOR0
 2896              		.cfi_endproc
 2897              	.LFE16:
 2899              		.section	.text.enterActiveTriggerMode,"ax",%progbits
 2900              		.align	1
 2901              		.global	enterActiveTriggerMode
 2902              		.syntax unified
 2903              		.thumb
 2904              		.thumb_func
 2906              	enterActiveTriggerMode:
 2907              	.LFB17:
 603:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2908              		.loc 1 603 1 view -0
 2909              		.cfi_startproc
 2910              		@ args = 0, pretend = 0, frame = 0
 2911              		@ frame_needed = 0, uses_anonymous_args = 0
 2912 0000 08B5     		push	{r3, lr}
 2913              	.LCFI58:
 2914              		.cfi_def_cfa_offset 8
 2915              		.cfi_offset 3, -8
 2916              		.cfi_offset 14, -4
 606:Core/Src/tmag5170_ex.c **** 
 2917              		.loc 1 606 5 view .LVU798
 606:Core/Src/tmag5170_ex.c **** 
 2918              		.loc 1 606 10 is_stmt 0 view .LVU799
 2919 0002 0B4B     		ldr	r3, .L201
 2920 0004 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 102


 2921 0006 9B11     		asrs	r3, r3, #6
 606:Core/Src/tmag5170_ex.c **** 
 2922              		.loc 1 606 8 view .LVU800
 2923 0008 33F00703 		bics	r3, r3, #7
 2924 000c 00D0     		beq	.L200
 2925              	.L197:
 617:Core/Src/tmag5170_ex.c **** 
 2926              		.loc 1 617 1 view .LVU801
 2927 000e 08BD     		pop	{r3, pc}
 2928              	.L200:
 608:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Active Trigger Mode (3h)
 2929              		.loc 1 608 5 is_stmt 1 view .LVU802
 610:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveT
 2930              		.loc 1 610 5 view .LVU803
 610:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_ActiveT
 2931              		.loc 1 610 13 is_stmt 0 view .LVU804
 2932 0010 0020     		movs	r0, #0
 2933 0012 FFF7FEFF 		bl	normalReadRegister
 2934              	.LVL279:
 611:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2935              		.loc 1 611 5 is_stmt 1 view .LVU805
 611:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2936              		.loc 1 611 21 is_stmt 0 view .LVU806
 2937 0016 20F07001 		bic	r1, r0, #112
 2938 001a 09B2     		sxth	r1, r1
 611:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2939              		.loc 1 611 62 view .LVU807
 2940 001c 41F03001 		orr	r1, r1, #48
 611:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2941              		.loc 1 611 11 view .LVU808
 2942 0020 89B2     		uxth	r1, r1
 2943              	.LVL280:
 612:Core/Src/tmag5170_ex.c **** 
 2944              		.loc 1 612 5 is_stmt 1 view .LVU809
 2945 0022 0020     		movs	r0, #0
 2946 0024 FFF7FEFF 		bl	writeToRegister
 2947              	.LVL281:
 615:Core/Src/tmag5170_ex.c **** #endif
 2948              		.loc 1 615 5 view .LVU810
 2949 0028 8C20     		movs	r0, #140
 2950 002a FFF7FEFF 		bl	delay_us
 2951              	.LVL282:
 2952 002e EEE7     		b	.L197
 2953              	.L202:
 2954              		.align	2
 2955              	.L201:
 2956 0030 00000000 		.word	.LANCHOR0
 2957              		.cfi_endproc
 2958              	.LFE17:
 2960              		.section	.text.enterSleepMode,"ax",%progbits
 2961              		.align	1
 2962              		.global	enterSleepMode
 2963              		.syntax unified
 2964              		.thumb
 2965              		.thumb_func
 2967              	enterSleepMode:
 2968              	.LFB18:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 103


 627:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 2969              		.loc 1 627 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 2973 0000 08B5     		push	{r3, lr}
 2974              	.LCFI59:
 2975              		.cfi_def_cfa_offset 8
 2976              		.cfi_offset 3, -8
 2977              		.cfi_offset 14, -4
 630:Core/Src/tmag5170_ex.c **** 
 2978              		.loc 1 630 5 view .LVU812
 630:Core/Src/tmag5170_ex.c **** 
 2979              		.loc 1 630 10 is_stmt 0 view .LVU813
 2980 0002 0B4B     		ldr	r3, .L207
 2981 0004 1B88     		ldrh	r3, [r3]
 2982 0006 9B11     		asrs	r3, r3, #6
 630:Core/Src/tmag5170_ex.c **** 
 2983              		.loc 1 630 8 view .LVU814
 2984 0008 33F00703 		bics	r3, r3, #7
 2985 000c 00D0     		beq	.L206
 2986              	.L203:
 641:Core/Src/tmag5170_ex.c **** 
 2987              		.loc 1 641 1 view .LVU815
 2988 000e 08BD     		pop	{r3, pc}
 2989              	.L206:
 632:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Sleep Mode (5h)
 2990              		.loc 1 632 5 is_stmt 1 view .LVU816
 634:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_SleepMo
 2991              		.loc 1 634 5 view .LVU817
 634:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_SleepMo
 2992              		.loc 1 634 13 is_stmt 0 view .LVU818
 2993 0010 0020     		movs	r0, #0
 2994 0012 FFF7FEFF 		bl	normalReadRegister
 2995              	.LVL283:
 635:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2996              		.loc 1 635 5 is_stmt 1 view .LVU819
 635:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 2997              		.loc 1 635 21 is_stmt 0 view .LVU820
 2998 0016 20F07001 		bic	r1, r0, #112
 2999 001a 09B2     		sxth	r1, r1
 635:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3000              		.loc 1 635 62 view .LVU821
 3001 001c 41F05001 		orr	r1, r1, #80
 635:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3002              		.loc 1 635 11 view .LVU822
 3003 0020 89B2     		uxth	r1, r1
 3004              	.LVL284:
 636:Core/Src/tmag5170_ex.c **** 
 3005              		.loc 1 636 5 is_stmt 1 view .LVU823
 3006 0022 0020     		movs	r0, #0
 3007 0024 FFF7FEFF 		bl	writeToRegister
 3008              	.LVL285:
 639:Core/Src/tmag5170_ex.c **** #endif
 3009              		.loc 1 639 5 view .LVU824
 3010 0028 3C20     		movs	r0, #60
 3011 002a FFF7FEFF 		bl	delay_us
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 104


 3012              	.LVL286:
 3013 002e EEE7     		b	.L203
 3014              	.L208:
 3015              		.align	2
 3016              	.L207:
 3017 0030 00000000 		.word	.LANCHOR0
 3018              		.cfi_endproc
 3019              	.LFE18:
 3021              		.section	.text.enterWakeUpAndSleepMode,"ax",%progbits
 3022              		.align	1
 3023              		.global	enterWakeUpAndSleepMode
 3024              		.syntax unified
 3025              		.thumb
 3026              		.thumb_func
 3028              	enterWakeUpAndSleepMode:
 3029              	.LFB19:
 652:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3030              		.loc 1 652 1 view -0
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 0
 3033              		@ frame_needed = 0, uses_anonymous_args = 0
 3034 0000 08B5     		push	{r3, lr}
 3035              	.LCFI60:
 3036              		.cfi_def_cfa_offset 8
 3037              		.cfi_offset 3, -8
 3038              		.cfi_offset 14, -4
 655:Core/Src/tmag5170_ex.c **** 
 3039              		.loc 1 655 5 view .LVU826
 655:Core/Src/tmag5170_ex.c **** 
 3040              		.loc 1 655 10 is_stmt 0 view .LVU827
 3041 0002 0B4B     		ldr	r3, .L213
 3042 0004 1B88     		ldrh	r3, [r3]
 3043 0006 9B11     		asrs	r3, r3, #6
 655:Core/Src/tmag5170_ex.c **** 
 3044              		.loc 1 655 8 view .LVU828
 3045 0008 33F00703 		bics	r3, r3, #7
 3046 000c 00D0     		beq	.L212
 3047              	.L209:
 666:Core/Src/tmag5170_ex.c **** 
 3048              		.loc 1 666 1 view .LVU829
 3049 000e 08BD     		pop	{r3, pc}
 3050              	.L212:
 657:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Wake-Up and Sleep Mode (4h)
 3051              		.loc 1 657 5 is_stmt 1 view .LVU830
 659:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Wakeupa
 3052              		.loc 1 659 5 view .LVU831
 659:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Wakeupa
 3053              		.loc 1 659 13 is_stmt 0 view .LVU832
 3054 0010 0020     		movs	r0, #0
 3055 0012 FFF7FEFF 		bl	normalReadRegister
 3056              	.LVL287:
 660:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3057              		.loc 1 660 5 is_stmt 1 view .LVU833
 660:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3058              		.loc 1 660 21 is_stmt 0 view .LVU834
 3059 0016 20F07001 		bic	r1, r0, #112
 3060 001a 09B2     		sxth	r1, r1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 105


 660:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3061              		.loc 1 660 62 view .LVU835
 3062 001c 41F04001 		orr	r1, r1, #64
 660:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3063              		.loc 1 660 11 view .LVU836
 3064 0020 89B2     		uxth	r1, r1
 3065              	.LVL288:
 661:Core/Src/tmag5170_ex.c **** 
 3066              		.loc 1 661 5 is_stmt 1 view .LVU837
 3067 0022 0020     		movs	r0, #0
 3068 0024 FFF7FEFF 		bl	writeToRegister
 3069              	.LVL289:
 664:Core/Src/tmag5170_ex.c **** #endif
 3070              		.loc 1 664 5 view .LVU838
 3071 0028 3C20     		movs	r0, #60
 3072 002a FFF7FEFF 		bl	delay_us
 3073              	.LVL290:
 3074 002e EEE7     		b	.L209
 3075              	.L214:
 3076              		.align	2
 3077              	.L213:
 3078 0030 00000000 		.word	.LANCHOR0
 3079              		.cfi_endproc
 3080              	.LFE19:
 3082              		.section	.text.setSLEEPTIME,"ax",%progbits
 3083              		.align	1
 3084              		.global	setSLEEPTIME
 3085              		.syntax unified
 3086              		.thumb
 3087              		.thumb_func
 3089              	setSLEEPTIME:
 3090              	.LVL291:
 3091              	.LFB20:
 694:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3092              		.loc 1 694 1 view -0
 3093              		.cfi_startproc
 3094              		@ args = 0, pretend = 0, frame = 0
 3095              		@ frame_needed = 0, uses_anonymous_args = 0
 697:Core/Src/tmag5170_ex.c **** 
 3096              		.loc 1 697 5 view .LVU840
 697:Core/Src/tmag5170_ex.c **** 
 3097              		.loc 1 697 10 is_stmt 0 view .LVU841
 3098 0000 0C4B     		ldr	r3, .L222
 3099 0002 1B88     		ldrh	r3, [r3]
 3100 0004 9B11     		asrs	r3, r3, #6
 697:Core/Src/tmag5170_ex.c **** 
 3101              		.loc 1 697 8 view .LVU842
 3102 0006 33F00703 		bics	r3, r3, #7
 3103 000a 11D1     		bne	.L218
 694:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3104              		.loc 1 694 1 view .LVU843
 3105 000c 10B5     		push	{r4, lr}
 3106              	.LCFI61:
 3107              		.cfi_def_cfa_offset 8
 3108              		.cfi_offset 4, -8
 3109              		.cfi_offset 14, -4
 3110 000e 0446     		mov	r4, r0
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 106


 700:Core/Src/tmag5170_ex.c **** 
 3111              		.loc 1 700 5 is_stmt 1 view .LVU844
 700:Core/Src/tmag5170_ex.c **** 
 3112              		.loc 1 700 8 is_stmt 0 view .LVU845
 3113 0010 0928     		cmp	r0, #9
 3114 0012 00D9     		bls	.L221
 3115              	.LVL292:
 3116              	.L215:
 708:Core/Src/tmag5170_ex.c **** 
 3117              		.loc 1 708 1 view .LVU846
 3118 0014 10BD     		pop	{r4, pc}
 3119              	.LVL293:
 3120              	.L221:
 702:Core/Src/tmag5170_ex.c **** 
 3121              		.loc 1 702 5 is_stmt 1 view .LVU847
 705:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_SLEEPTIME_MASK) ) | (sleeptime << 10);
 3122              		.loc 1 705 5 view .LVU848
 705:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_SLEEPTIME_MASK) ) | (sleeptime << 10);
 3123              		.loc 1 705 13 is_stmt 0 view .LVU849
 3124 0016 0120     		movs	r0, #1
 3125              	.LVL294:
 705:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_SLEEPTIME_MASK) ) | (sleeptime << 10);
 3126              		.loc 1 705 13 view .LVU850
 3127 0018 FFF7FEFF 		bl	normalReadRegister
 3128              	.LVL295:
 706:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3129              		.loc 1 706 5 is_stmt 1 view .LVU851
 706:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3130              		.loc 1 706 21 is_stmt 0 view .LVU852
 3131 001c 20F47050 		bic	r0, r0, #15360
 3132              	.LVL296:
 706:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3133              		.loc 1 706 21 view .LVU853
 3134 0020 00B2     		sxth	r0, r0
 706:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3135              		.loc 1 706 57 view .LVU854
 3136 0022 40EA8420 		orr	r0, r0, r4, lsl #10
 3137              	.LVL297:
 707:Core/Src/tmag5170_ex.c **** }
 3138              		.loc 1 707 5 is_stmt 1 view .LVU855
 3139 0026 81B2     		uxth	r1, r0
 3140 0028 0120     		movs	r0, #1
 3141              	.LVL298:
 707:Core/Src/tmag5170_ex.c **** }
 3142              		.loc 1 707 5 is_stmt 0 view .LVU856
 3143 002a FFF7FEFF 		bl	writeToRegister
 3144              	.LVL299:
 707:Core/Src/tmag5170_ex.c **** }
 3145              		.loc 1 707 5 view .LVU857
 3146 002e F1E7     		b	.L215
 3147              	.LVL300:
 3148              	.L218:
 3149              	.LCFI62:
 3150              		.cfi_def_cfa_offset 0
 3151              		.cfi_restore 4
 3152              		.cfi_restore 14
 707:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 107


 3153              		.loc 1 707 5 view .LVU858
 3154 0030 7047     		bx	lr
 3155              	.L223:
 3156 0032 00BF     		.align	2
 3157              	.L222:
 3158 0034 00000000 		.word	.LANCHOR0
 3159              		.cfi_endproc
 3160              	.LFE20:
 3162              		.section	.text.setWakeUpAndSleepMode,"ax",%progbits
 3163              		.align	1
 3164              		.global	setWakeUpAndSleepMode
 3165              		.syntax unified
 3166              		.thumb
 3167              		.thumb_func
 3169              	setWakeUpAndSleepMode:
 3170              	.LVL301:
 3171              	.LFB21:
 719:Core/Src/tmag5170_ex.c ****     setSLEEPTIME(sleeptime);
 3172              		.loc 1 719 1 is_stmt 1 view -0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 0
 3175              		@ frame_needed = 0, uses_anonymous_args = 0
 719:Core/Src/tmag5170_ex.c ****     setSLEEPTIME(sleeptime);
 3176              		.loc 1 719 1 is_stmt 0 view .LVU860
 3177 0000 08B5     		push	{r3, lr}
 3178              	.LCFI63:
 3179              		.cfi_def_cfa_offset 8
 3180              		.cfi_offset 3, -8
 3181              		.cfi_offset 14, -4
 720:Core/Src/tmag5170_ex.c ****     enterWakeUpAndSleepMode();
 3182              		.loc 1 720 5 is_stmt 1 view .LVU861
 3183 0002 FFF7FEFF 		bl	setSLEEPTIME
 3184              	.LVL302:
 721:Core/Src/tmag5170_ex.c **** }
 3185              		.loc 1 721 5 view .LVU862
 3186 0006 FFF7FEFF 		bl	enterWakeUpAndSleepMode
 3187              	.LVL303:
 722:Core/Src/tmag5170_ex.c **** 
 3188              		.loc 1 722 1 is_stmt 0 view .LVU863
 3189 000a 08BD     		pop	{r3, pc}
 3190              		.cfi_endproc
 3191              	.LFE21:
 3193              		.section	.text.exitSleepMode,"ax",%progbits
 3194              		.align	1
 3195              		.global	exitSleepMode
 3196              		.syntax unified
 3197              		.thumb
 3198              		.thumb_func
 3200              	exitSleepMode:
 3201              	.LFB23:
 754:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3202              		.loc 1 754 1 is_stmt 1 view -0
 3203              		.cfi_startproc
 3204              		@ args = 0, pretend = 0, frame = 0
 3205              		@ frame_needed = 0, uses_anonymous_args = 0
 3206 0000 08B5     		push	{r3, lr}
 3207              	.LCFI64:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 108


 3208              		.cfi_def_cfa_offset 8
 3209              		.cfi_offset 3, -8
 3210              		.cfi_offset 14, -4
 757:Core/Src/tmag5170_ex.c **** 
 3211              		.loc 1 757 5 view .LVU865
 757:Core/Src/tmag5170_ex.c **** 
 3212              		.loc 1 757 10 is_stmt 0 view .LVU866
 3213 0002 0A4B     		ldr	r3, .L230
 3214 0004 1B88     		ldrh	r3, [r3]
 3215 0006 9B11     		asrs	r3, r3, #6
 757:Core/Src/tmag5170_ex.c **** 
 3216              		.loc 1 757 8 view .LVU867
 3217 0008 33F00703 		bics	r3, r3, #7
 3218 000c 00D0     		beq	.L229
 3219              	.L226:
 768:Core/Src/tmag5170_ex.c **** 
 3220              		.loc 1 768 1 view .LVU868
 3221 000e 08BD     		pop	{r3, pc}
 3222              	.L229:
 759:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Configuration Mode (0h)
 3223              		.loc 1 759 5 is_stmt 1 view .LVU869
 761:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 3224              		.loc 1 761 5 view .LVU870
 761:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 3225              		.loc 1 761 13 is_stmt 0 view .LVU871
 3226 0010 0020     		movs	r0, #0
 3227 0012 FFF7FEFF 		bl	normalReadRegister
 3228              	.LVL304:
 762:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3229              		.loc 1 762 5 is_stmt 1 view .LVU872
 762:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3230              		.loc 1 762 11 is_stmt 0 view .LVU873
 3231 0016 20F07001 		bic	r1, r0, #112
 3232 001a 89B2     		uxth	r1, r1
 3233              	.LVL305:
 763:Core/Src/tmag5170_ex.c **** 
 3234              		.loc 1 763 5 is_stmt 1 view .LVU874
 3235 001c 0020     		movs	r0, #0
 3236 001e FFF7FEFF 		bl	writeToRegister
 3237              	.LVL306:
 766:Core/Src/tmag5170_ex.c **** #endif
 3238              		.loc 1 766 5 view .LVU875
 3239 0022 8C20     		movs	r0, #140
 3240 0024 FFF7FEFF 		bl	delay_us
 3241              	.LVL307:
 3242 0028 F1E7     		b	.L226
 3243              	.L231:
 3244 002a 00BF     		.align	2
 3245              	.L230:
 3246 002c 00000000 		.word	.LANCHOR0
 3247              		.cfi_endproc
 3248              	.LFE23:
 3250              		.section	.text.exitWakeAndSleepMode,"ax",%progbits
 3251              		.align	1
 3252              		.global	exitWakeAndSleepMode
 3253              		.syntax unified
 3254              		.thumb
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 109


 3255              		.thumb_func
 3257              	exitWakeAndSleepMode:
 3258              	.LFB24:
 780:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3259              		.loc 1 780 1 view -0
 3260              		.cfi_startproc
 3261              		@ args = 0, pretend = 0, frame = 0
 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 3263 0000 08B5     		push	{r3, lr}
 3264              	.LCFI65:
 3265              		.cfi_def_cfa_offset 8
 3266              		.cfi_offset 3, -8
 3267              		.cfi_offset 14, -4
 783:Core/Src/tmag5170_ex.c **** 
 3268              		.loc 1 783 5 view .LVU877
 783:Core/Src/tmag5170_ex.c **** 
 3269              		.loc 1 783 10 is_stmt 0 view .LVU878
 3270 0002 0A4B     		ldr	r3, .L236
 3271 0004 1B88     		ldrh	r3, [r3]
 3272 0006 9B11     		asrs	r3, r3, #6
 783:Core/Src/tmag5170_ex.c **** 
 3273              		.loc 1 783 8 view .LVU879
 3274 0008 33F00703 		bics	r3, r3, #7
 3275 000c 00D0     		beq	.L235
 3276              	.L232:
 794:Core/Src/tmag5170_ex.c **** 
 3277              		.loc 1 794 1 view .LVU880
 3278 000e 08BD     		pop	{r3, pc}
 3279              	.L235:
 785:Core/Src/tmag5170_ex.c ****     // Set OPERATING_MODE (0x006-4) to Configuration Mode (0h)
 3280              		.loc 1 785 5 is_stmt 1 view .LVU881
 787:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 3281              		.loc 1 787 5 view .LVU882
 787:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_OPERATING_MODE_MASK) ) | DEVICE_CONFIG_OPERATING_MODE_Configu
 3282              		.loc 1 787 13 is_stmt 0 view .LVU883
 3283 0010 0020     		movs	r0, #0
 3284 0012 FFF7FEFF 		bl	normalReadRegister
 3285              	.LVL308:
 788:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3286              		.loc 1 788 5 is_stmt 1 view .LVU884
 788:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3287              		.loc 1 788 11 is_stmt 0 view .LVU885
 3288 0016 20F07001 		bic	r1, r0, #112
 3289 001a 89B2     		uxth	r1, r1
 3290              	.LVL309:
 789:Core/Src/tmag5170_ex.c **** 
 3291              		.loc 1 789 5 is_stmt 1 view .LVU886
 3292 001c 0020     		movs	r0, #0
 3293 001e FFF7FEFF 		bl	writeToRegister
 3294              	.LVL310:
 792:Core/Src/tmag5170_ex.c **** #endif
 3295              		.loc 1 792 5 view .LVU887
 3296 0022 8C20     		movs	r0, #140
 3297 0024 FFF7FEFF 		bl	delay_us
 3298              	.LVL311:
 3299 0028 F1E7     		b	.L232
 3300              	.L237:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 110


 3301 002a 00BF     		.align	2
 3302              	.L236:
 3303 002c 00000000 		.word	.LANCHOR0
 3304              		.cfi_endproc
 3305              	.LFE24:
 3307              		.section	.text.spiTriggersConversion,"ax",%progbits
 3308              		.align	1
 3309              		.global	spiTriggersConversion
 3310              		.syntax unified
 3311              		.thumb
 3312              		.thumb_func
 3314              	spiTriggersConversion:
 3315              	.LFB26:
 844:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3316              		.loc 1 844 1 view -0
 3317              		.cfi_startproc
 3318              		@ args = 0, pretend = 0, frame = 0
 3319              		@ frame_needed = 0, uses_anonymous_args = 0
 3320 0000 08B5     		push	{r3, lr}
 3321              	.LCFI66:
 3322              		.cfi_def_cfa_offset 8
 3323              		.cfi_offset 3, -8
 3324              		.cfi_offset 14, -4
 847:Core/Src/tmag5170_ex.c **** 
 3325              		.loc 1 847 5 view .LVU889
 847:Core/Src/tmag5170_ex.c **** 
 3326              		.loc 1 847 10 is_stmt 0 view .LVU890
 3327 0002 084B     		ldr	r3, .L242
 3328 0004 1B88     		ldrh	r3, [r3]
 3329 0006 9B11     		asrs	r3, r3, #6
 847:Core/Src/tmag5170_ex.c **** 
 3330              		.loc 1 847 8 view .LVU891
 3331 0008 33F00703 		bics	r3, r3, #7
 3332 000c 00D0     		beq	.L241
 3333              	.L238:
 855:Core/Src/tmag5170_ex.c **** 
 3334              		.loc 1 855 1 view .LVU892
 3335 000e 08BD     		pop	{r3, pc}
 3336              	.L241:
 849:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to 'trigger at SPI CMD0' (0h)
 3337              		.loc 1 849 5 is_stmt 1 view .LVU893
 851:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3338              		.loc 1 851 5 view .LVU894
 851:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3339              		.loc 1 851 13 is_stmt 0 view .LVU895
 3340 0010 0220     		movs	r0, #2
 3341 0012 FFF7FEFF 		bl	normalReadRegister
 3342              	.LVL312:
 852:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtSPIcommandbits;
 3343              		.loc 1 852 5 is_stmt 1 view .LVU896
 852:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtSPIcommandbits;
 3344              		.loc 1 852 11 is_stmt 0 view .LVU897
 3345 0016 20F4C061 		bic	r1, r0, #1536
 3346 001a 89B2     		uxth	r1, r1
 3347              	.LVL313:
 853:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 3348              		.loc 1 853 5 is_stmt 1 view .LVU898
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 111


 854:Core/Src/tmag5170_ex.c **** }
 3349              		.loc 1 854 5 view .LVU899
 3350 001c 0220     		movs	r0, #2
 3351 001e FFF7FEFF 		bl	writeToRegister
 3352              	.LVL314:
 854:Core/Src/tmag5170_ex.c **** }
 3353              		.loc 1 854 5 is_stmt 0 view .LVU900
 3354 0022 F4E7     		b	.L238
 3355              	.L243:
 3356              		.align	2
 3357              	.L242:
 3358 0024 00000000 		.word	.LANCHOR0
 3359              		.cfi_endproc
 3360              	.LFE26:
 3362              		.section	.text.csTriggersConversion,"ax",%progbits
 3363              		.align	1
 3364              		.global	csTriggersConversion
 3365              		.syntax unified
 3366              		.thumb
 3367              		.thumb_func
 3369              	csTriggersConversion:
 3370              	.LFB27:
 867:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3371              		.loc 1 867 1 is_stmt 1 view -0
 3372              		.cfi_startproc
 3373              		@ args = 0, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
 3375 0000 08B5     		push	{r3, lr}
 3376              	.LCFI67:
 3377              		.cfi_def_cfa_offset 8
 3378              		.cfi_offset 3, -8
 3379              		.cfi_offset 14, -4
 870:Core/Src/tmag5170_ex.c **** 
 3380              		.loc 1 870 5 view .LVU902
 870:Core/Src/tmag5170_ex.c **** 
 3381              		.loc 1 870 10 is_stmt 0 view .LVU903
 3382 0002 094B     		ldr	r3, .L248
 3383 0004 1B88     		ldrh	r3, [r3]
 3384 0006 9B11     		asrs	r3, r3, #6
 870:Core/Src/tmag5170_ex.c **** 
 3385              		.loc 1 870 8 view .LVU904
 3386 0008 33F00703 		bics	r3, r3, #7
 3387 000c 00D0     		beq	.L247
 3388              	.L244:
 878:Core/Src/tmag5170_ex.c **** 
 3389              		.loc 1 878 1 view .LVU905
 3390 000e 08BD     		pop	{r3, pc}
 3391              	.L247:
 872:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to at CS pulse (1h)
 3392              		.loc 1 872 5 is_stmt 1 view .LVU906
 874:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3393              		.loc 1 874 5 view .LVU907
 874:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3394              		.loc 1 874 13 is_stmt 0 view .LVU908
 3395 0010 0220     		movs	r0, #2
 3396 0012 FFF7FEFF 		bl	normalReadRegister
 3397              	.LVL315:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 112


 875:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtnCSSyncPulse;
 3398              		.loc 1 875 5 is_stmt 1 view .LVU909
 875:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtnCSSyncPulse;
 3399              		.loc 1 875 11 is_stmt 0 view .LVU910
 3400 0016 20F4C061 		bic	r1, r0, #1536
 3401 001a 89B2     		uxth	r1, r1
 3402              	.LVL316:
 876:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 3403              		.loc 1 876 5 is_stmt 1 view .LVU911
 877:Core/Src/tmag5170_ex.c **** }
 3404              		.loc 1 877 5 view .LVU912
 3405 001c 41F40071 		orr	r1, r1, #512
 3406              	.LVL317:
 877:Core/Src/tmag5170_ex.c **** }
 3407              		.loc 1 877 5 is_stmt 0 view .LVU913
 3408 0020 0220     		movs	r0, #2
 3409              	.LVL318:
 877:Core/Src/tmag5170_ex.c **** }
 3410              		.loc 1 877 5 view .LVU914
 3411 0022 FFF7FEFF 		bl	writeToRegister
 3412              	.LVL319:
 3413 0026 F2E7     		b	.L244
 3414              	.L249:
 3415              		.align	2
 3416              	.L248:
 3417 0028 00000000 		.word	.LANCHOR0
 3418              		.cfi_endproc
 3419              	.LFE27:
 3421              		.section	.text.alertTriggersConversion,"ax",%progbits
 3422              		.align	1
 3423              		.global	alertTriggersConversion
 3424              		.syntax unified
 3425              		.thumb
 3426              		.thumb_func
 3428              	alertTriggersConversion:
 3429              	.LFB28:
 891:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3430              		.loc 1 891 1 is_stmt 1 view -0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 0
 3433              		@ frame_needed = 0, uses_anonymous_args = 0
 3434 0000 08B5     		push	{r3, lr}
 3435              	.LCFI68:
 3436              		.cfi_def_cfa_offset 8
 3437              		.cfi_offset 3, -8
 3438              		.cfi_offset 14, -4
 894:Core/Src/tmag5170_ex.c **** 
 3439              		.loc 1 894 5 view .LVU916
 894:Core/Src/tmag5170_ex.c **** 
 3440              		.loc 1 894 10 is_stmt 0 view .LVU917
 3441 0002 0E4B     		ldr	r3, .L254
 3442 0004 1B88     		ldrh	r3, [r3]
 3443 0006 9B11     		asrs	r3, r3, #6
 894:Core/Src/tmag5170_ex.c **** 
 3444              		.loc 1 894 8 view .LVU918
 3445 0008 33F00703 		bics	r3, r3, #7
 3446 000c 00D0     		beq	.L253
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 113


 3447              	.L250:
 908:Core/Src/tmag5170_ex.c **** 
 3448              		.loc 1 908 1 view .LVU919
 3449 000e 08BD     		pop	{r3, pc}
 3450              	.L253:
 896:Core/Src/tmag5170_ex.c ****     // SET TRIGGER_MODE (address: 0x02A-9) to at ALERT pulse (2h)
 3451              		.loc 1 896 5 is_stmt 1 view .LVU920
 898:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3452              		.loc 1 898 5 view .LVU921
 898:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_TRIGGER_MODE_MASK);
 3453              		.loc 1 898 13 is_stmt 0 view .LVU922
 3454 0010 0220     		movs	r0, #2
 3455 0012 FFF7FEFF 		bl	normalReadRegister
 3456              	.LVL320:
 899:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtALERTSyncPulse;
 3457              		.loc 1 899 5 is_stmt 1 view .LVU923
 899:Core/Src/tmag5170_ex.c ****     input |= SYSTEM_CONFIG_TRIGGER_MODE_AtALERTSyncPulse;
 3458              		.loc 1 899 11 is_stmt 0 view .LVU924
 3459 0016 20F4C061 		bic	r1, r0, #1536
 3460 001a 89B2     		uxth	r1, r1
 3461              	.LVL321:
 900:Core/Src/tmag5170_ex.c ****     writeToRegister( SYSTEM_CONFIG_ADDRESS, input );
 3462              		.loc 1 900 5 is_stmt 1 view .LVU925
 901:Core/Src/tmag5170_ex.c **** 
 3463              		.loc 1 901 5 view .LVU926
 3464 001c 41F48061 		orr	r1, r1, #1024
 3465              	.LVL322:
 901:Core/Src/tmag5170_ex.c **** 
 3466              		.loc 1 901 5 is_stmt 0 view .LVU927
 3467 0020 0220     		movs	r0, #2
 3468              	.LVL323:
 901:Core/Src/tmag5170_ex.c **** 
 3469              		.loc 1 901 5 view .LVU928
 3470 0022 FFF7FEFF 		bl	writeToRegister
 3471              	.LVL324:
 904:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3472              		.loc 1 904 5 is_stmt 1 view .LVU929
 904:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3473              		.loc 1 904 13 is_stmt 0 view .LVU930
 3474 0026 0320     		movs	r0, #3
 3475 0028 FFF7FEFF 		bl	normalReadRegister
 3476              	.LVL325:
 905:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3477              		.loc 1 905 5 is_stmt 1 view .LVU931
 905:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3478              		.loc 1 905 11 is_stmt 0 view .LVU932
 3479 002c 20F48051 		bic	r1, r0, #4096
 3480 0030 89B2     		uxth	r1, r1
 3481              	.LVL326:
 906:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 3482              		.loc 1 906 5 is_stmt 1 view .LVU933
 907:Core/Src/tmag5170_ex.c **** }
 3483              		.loc 1 907 5 view .LVU934
 3484 0032 0320     		movs	r0, #3
 3485 0034 FFF7FEFF 		bl	writeToRegister
 3486              	.LVL327:
 907:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 114


 3487              		.loc 1 907 5 is_stmt 0 view .LVU935
 3488 0038 E9E7     		b	.L250
 3489              	.L255:
 3490 003a 00BF     		.align	2
 3491              	.L254:
 3492 003c 00000000 		.word	.LANCHOR0
 3493              		.cfi_endproc
 3494              	.LFE28:
 3496              		.section	.text.alertIndicatesConversionEnable,"ax",%progbits
 3497              		.align	1
 3498              		.global	alertIndicatesConversionEnable
 3499              		.syntax unified
 3500              		.thumb
 3501              		.thumb_func
 3503              	alertIndicatesConversionEnable:
 3504              	.LFB29:
 935:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3505              		.loc 1 935 1 is_stmt 1 view -0
 3506              		.cfi_startproc
 3507              		@ args = 0, pretend = 0, frame = 0
 3508              		@ frame_needed = 0, uses_anonymous_args = 0
 3509 0000 08B5     		push	{r3, lr}
 3510              	.LCFI69:
 3511              		.cfi_def_cfa_offset 8
 3512              		.cfi_offset 3, -8
 3513              		.cfi_offset 14, -4
 938:Core/Src/tmag5170_ex.c **** 
 3514              		.loc 1 938 5 view .LVU937
 938:Core/Src/tmag5170_ex.c **** 
 3515              		.loc 1 938 10 is_stmt 0 view .LVU938
 3516 0002 094B     		ldr	r3, .L260
 3517 0004 1B88     		ldrh	r3, [r3]
 3518 0006 9B11     		asrs	r3, r3, #6
 938:Core/Src/tmag5170_ex.c **** 
 3519              		.loc 1 938 8 view .LVU939
 3520 0008 33F00703 		bics	r3, r3, #7
 3521 000c 00D0     		beq	.L259
 3522              	.L256:
 950:Core/Src/tmag5170_ex.c **** 
 3523              		.loc 1 950 1 view .LVU940
 3524 000e 08BD     		pop	{r3, pc}
 3525              	.L259:
 940:Core/Src/tmag5170_ex.c ****     // SET ALERT_MODE (address: 0x03C) to Interrupt Mode (0h)
 3526              		.loc 1 940 5 is_stmt 1 view .LVU941
 942:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3527              		.loc 1 942 5 view .LVU942
 942:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3528              		.loc 1 942 13 is_stmt 0 view .LVU943
 3529 0010 0320     		movs	r0, #3
 3530 0012 FFF7FEFF 		bl	normalReadRegister
 3531              	.LVL328:
 943:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3532              		.loc 1 943 5 is_stmt 1 view .LVU944
 943:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3533              		.loc 1 943 11 is_stmt 0 view .LVU945
 3534 0016 20F48051 		bic	r1, r0, #4096
 3535 001a 89B2     		uxth	r1, r1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 115


 3536              	.LVL329:
 944:Core/Src/tmag5170_ex.c **** 
 3537              		.loc 1 944 5 is_stmt 1 view .LVU946
 948:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 3538              		.loc 1 948 5 view .LVU947
 949:Core/Src/tmag5170_ex.c **** }
 3539              		.loc 1 949 5 view .LVU948
 3540 001c 41F48071 		orr	r1, r1, #256
 3541              	.LVL330:
 949:Core/Src/tmag5170_ex.c **** }
 3542              		.loc 1 949 5 is_stmt 0 view .LVU949
 3543 0020 0320     		movs	r0, #3
 3544              	.LVL331:
 949:Core/Src/tmag5170_ex.c **** }
 3545              		.loc 1 949 5 view .LVU950
 3546 0022 FFF7FEFF 		bl	writeToRegister
 3547              	.LVL332:
 3548 0026 F2E7     		b	.L256
 3549              	.L261:
 3550              		.align	2
 3551              	.L260:
 3552 0028 00000000 		.word	.LANCHOR0
 3553              		.cfi_endproc
 3554              	.LFE29:
 3556              		.section	.text.alertIndicatesConversionDisable,"ax",%progbits
 3557              		.align	1
 3558              		.global	alertIndicatesConversionDisable
 3559              		.syntax unified
 3560              		.thumb
 3561              		.thumb_func
 3563              	alertIndicatesConversionDisable:
 3564              	.LFB30:
 962:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3565              		.loc 1 962 1 is_stmt 1 view -0
 3566              		.cfi_startproc
 3567              		@ args = 0, pretend = 0, frame = 0
 3568              		@ frame_needed = 0, uses_anonymous_args = 0
 3569 0000 08B5     		push	{r3, lr}
 3570              	.LCFI70:
 3571              		.cfi_def_cfa_offset 8
 3572              		.cfi_offset 3, -8
 3573              		.cfi_offset 14, -4
 965:Core/Src/tmag5170_ex.c **** 
 3574              		.loc 1 965 5 view .LVU952
 965:Core/Src/tmag5170_ex.c **** 
 3575              		.loc 1 965 10 is_stmt 0 view .LVU953
 3576 0002 084B     		ldr	r3, .L266
 3577 0004 1B88     		ldrh	r3, [r3]
 3578 0006 9B11     		asrs	r3, r3, #6
 965:Core/Src/tmag5170_ex.c **** 
 3579              		.loc 1 965 8 view .LVU954
 3580 0008 33F00703 		bics	r3, r3, #7
 3581 000c 00D0     		beq	.L265
 3582              	.L262:
 973:Core/Src/tmag5170_ex.c **** 
 3583              		.loc 1 973 1 view .LVU955
 3584 000e 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 116


 3585              	.L265:
 967:Core/Src/tmag5170_ex.c ****     // SET RSLT_ALRT (address: 0x038) ALERT output is not asserted to indicate conversion completio
 3586              		.loc 1 967 5 is_stmt 1 view .LVU956
 969:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_RSLT_ALRT_MASK);
 3587              		.loc 1 969 5 view .LVU957
 969:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_RSLT_ALRT_MASK);
 3588              		.loc 1 969 13 is_stmt 0 view .LVU958
 3589 0010 0320     		movs	r0, #3
 3590 0012 FFF7FEFF 		bl	normalReadRegister
 3591              	.LVL333:
 970:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_RSLT_ALRT_ALERTisnotusedtosignalconversioncompleteion;
 3592              		.loc 1 970 5 is_stmt 1 view .LVU959
 970:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_RSLT_ALRT_ALERTisnotusedtosignalconversioncompleteion;
 3593              		.loc 1 970 11 is_stmt 0 view .LVU960
 3594 0016 20F48071 		bic	r1, r0, #256
 3595 001a 89B2     		uxth	r1, r1
 3596              	.LVL334:
 971:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 3597              		.loc 1 971 5 is_stmt 1 view .LVU961
 972:Core/Src/tmag5170_ex.c **** }
 3598              		.loc 1 972 5 view .LVU962
 3599 001c 0320     		movs	r0, #3
 3600 001e FFF7FEFF 		bl	writeToRegister
 3601              	.LVL335:
 972:Core/Src/tmag5170_ex.c **** }
 3602              		.loc 1 972 5 is_stmt 0 view .LVU963
 3603 0022 F4E7     		b	.L262
 3604              	.L267:
 3605              		.align	2
 3606              	.L266:
 3607 0024 00000000 		.word	.LANCHOR0
 3608              		.cfi_endproc
 3609              	.LFE30:
 3611              		.section	.text.setMagSwitch,"ax",%progbits
 3612              		.align	1
 3613              		.global	setMagSwitch
 3614              		.syntax unified
 3615              		.thumb
 3616              		.thumb_func
 3618              	setMagSwitch:
 3619              	.LVL336:
 3620              	.LFB31:
 999:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3621              		.loc 1 999 1 is_stmt 1 view -0
 3622              		.cfi_startproc
 3623              		@ args = 0, pretend = 0, frame = 0
 3624              		@ frame_needed = 0, uses_anonymous_args = 0
1002:Core/Src/tmag5170_ex.c **** 
 3625              		.loc 1 1002 5 view .LVU965
1002:Core/Src/tmag5170_ex.c **** 
 3626              		.loc 1 1002 10 is_stmt 0 view .LVU966
 3627 0000 1B4B     		ldr	r3, .L279
 3628 0002 1B88     		ldrh	r3, [r3]
 3629 0004 9B11     		asrs	r3, r3, #6
1002:Core/Src/tmag5170_ex.c **** 
 3630              		.loc 1 1002 8 view .LVU967
 3631 0006 33F00703 		bics	r3, r3, #7
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 117


 3632 000a 30D1     		bne	.L275
 999:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3633              		.loc 1 999 1 view .LVU968
 3634 000c 10B5     		push	{r4, lr}
 3635              	.LCFI71:
 3636              		.cfi_def_cfa_offset 8
 3637              		.cfi_offset 4, -8
 3638              		.cfi_offset 14, -4
 3639 000e 0446     		mov	r4, r0
1005:Core/Src/tmag5170_ex.c **** 
 3640              		.loc 1 1005 5 is_stmt 1 view .LVU969
1005:Core/Src/tmag5170_ex.c **** 
 3641              		.loc 1 1005 7 is_stmt 0 view .LVU970
 3642 0010 0F28     		cmp	r0, #15
 3643 0012 00D9     		bls	.L278
 3644              	.LVL337:
 3645              	.L268:
1044:Core/Src/tmag5170_ex.c **** 
 3646              		.loc 1 1044 1 view .LVU971
 3647 0014 10BD     		pop	{r4, pc}
 3648              	.LVL338:
 3649              	.L278:
1007:Core/Src/tmag5170_ex.c **** 
 3650              		.loc 1 1007 5 is_stmt 1 view .LVU972
1011:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_HLT_EN_MASK);
 3651              		.loc 1 1011 5 view .LVU973
1011:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_HLT_EN_MASK);
 3652              		.loc 1 1011 13 is_stmt 0 view .LVU974
 3653 0016 0020     		movs	r0, #0
 3654              	.LVL339:
1011:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_HLT_EN_MASK);
 3655              		.loc 1 1011 13 view .LVU975
 3656 0018 FFF7FEFF 		bl	normalReadRegister
 3657              	.LVL340:
1012:Core/Src/tmag5170_ex.c **** 
 3658              		.loc 1 1012 5 is_stmt 1 view .LVU976
1012:Core/Src/tmag5170_ex.c **** 
 3659              		.loc 1 1012 11 is_stmt 0 view .LVU977
 3660 001c 20F00201 		bic	r1, r0, #2
 3661 0020 89B2     		uxth	r1, r1
 3662              	.LVL341:
1014:Core/Src/tmag5170_ex.c ****     else input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOff;
 3663              		.loc 1 1014 5 is_stmt 1 view .LVU978
1014:Core/Src/tmag5170_ex.c ****     else input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOff;
 3664              		.loc 1 1014 8 is_stmt 0 view .LVU979
 3665 0022 14F00104 		ands	r4, r4, #1
 3666 0026 01D0     		beq	.L270
1014:Core/Src/tmag5170_ex.c ****     else input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOff;
 3667              		.loc 1 1014 41 is_stmt 1 discriminator 1 view .LVU980
1014:Core/Src/tmag5170_ex.c ****     else input |= DEVICE_CONFIG_T_HLT_EN_TemperatureLimitCheckOff;
 3668              		.loc 1 1014 47 is_stmt 0 discriminator 1 view .LVU981
 3669 0028 41F00201 		orr	r1, r1, #2
 3670              	.LVL342:
 3671              	.L270:
1017:Core/Src/tmag5170_ex.c **** 
 3672              		.loc 1 1017 5 is_stmt 1 view .LVU982
 3673 002c 0020     		movs	r0, #0
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 118


 3674 002e FFF7FEFF 		bl	writeToRegister
 3675              	.LVL343:
1021:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_Z_HLT_EN_MASK);
 3676              		.loc 1 1021 5 view .LVU983
1021:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_Z_HLT_EN_MASK);
 3677              		.loc 1 1021 13 is_stmt 0 view .LVU984
 3678 0032 0220     		movs	r0, #2
 3679 0034 FFF7FEFF 		bl	normalReadRegister
 3680              	.LVL344:
1022:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_Y_HLT_EN_MASK);
 3681              		.loc 1 1022 5 is_stmt 1 view .LVU985
1023:Core/Src/tmag5170_ex.c ****     input &= ~(SYSTEM_CONFIG_X_HLT_EN_MASK);
 3682              		.loc 1 1023 5 view .LVU986
1024:Core/Src/tmag5170_ex.c **** 
 3683              		.loc 1 1024 5 view .LVU987
1024:Core/Src/tmag5170_ex.c **** 
 3684              		.loc 1 1024 11 is_stmt 0 view .LVU988
 3685 0038 20F00701 		bic	r1, r0, #7
 3686 003c 89B2     		uxth	r1, r1
 3687              	.LVL345:
1026:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Z_HLT_EN_OFF;
 3688              		.loc 1 1026 5 is_stmt 1 view .LVU989
1026:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Z_HLT_EN_OFF;
 3689              		.loc 1 1026 8 is_stmt 0 view .LVU990
 3690 003e 0CB1     		cbz	r4, .L271
1026:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Z_HLT_EN_OFF;
 3691              		.loc 1 1026 41 is_stmt 1 discriminator 1 view .LVU991
1026:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Z_HLT_EN_OFF;
 3692              		.loc 1 1026 47 is_stmt 0 discriminator 1 view .LVU992
 3693 0040 41F00401 		orr	r1, r1, #4
 3694              	.LVL346:
 3695              	.L271:
1029:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Y_HLT_EN_OFF;
 3696              		.loc 1 1029 5 is_stmt 1 view .LVU993
1029:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Y_HLT_EN_OFF;
 3697              		.loc 1 1029 8 is_stmt 0 view .LVU994
 3698 0044 0CB1     		cbz	r4, .L272
1029:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Y_HLT_EN_OFF;
 3699              		.loc 1 1029 41 is_stmt 1 discriminator 1 view .LVU995
1029:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_Y_HLT_EN_OFF;
 3700              		.loc 1 1029 47 is_stmt 0 discriminator 1 view .LVU996
 3701 0046 41F00201 		orr	r1, r1, #2
 3702              	.LVL347:
 3703              	.L272:
1032:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_X_HLT_EN_OFF;
 3704              		.loc 1 1032 5 is_stmt 1 view .LVU997
1032:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_X_HLT_EN_OFF;
 3705              		.loc 1 1032 8 is_stmt 0 view .LVU998
 3706 004a 0CB1     		cbz	r4, .L273
1032:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_X_HLT_EN_OFF;
 3707              		.loc 1 1032 41 is_stmt 1 discriminator 1 view .LVU999
1032:Core/Src/tmag5170_ex.c ****     else input |= SYSTEM_CONFIG_X_HLT_EN_OFF;
 3708              		.loc 1 1032 47 is_stmt 0 discriminator 1 view .LVU1000
 3709 004c 41F00101 		orr	r1, r1, #1
 3710              	.LVL348:
 3711              	.L273:
1035:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 119


 3712              		.loc 1 1035 5 is_stmt 1 view .LVU1001
 3713 0050 0220     		movs	r0, #2
 3714 0052 FFF7FEFF 		bl	writeToRegister
 3715              	.LVL349:
1039:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3716              		.loc 1 1039 5 view .LVU1002
1039:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3717              		.loc 1 1039 13 is_stmt 0 view .LVU1003
 3718 0056 0320     		movs	r0, #3
 3719 0058 FFF7FEFF 		bl	normalReadRegister
 3720              	.LVL350:
1040:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_MagneticSwitchMode;
 3721              		.loc 1 1040 5 is_stmt 1 view .LVU1004
1040:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_MagneticSwitchMode;
 3722              		.loc 1 1040 11 is_stmt 0 view .LVU1005
 3723 005c 20F48051 		bic	r1, r0, #4096
 3724 0060 89B2     		uxth	r1, r1
 3725              	.LVL351:
1041:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 3726              		.loc 1 1041 5 is_stmt 1 view .LVU1006
1042:Core/Src/tmag5170_ex.c **** 
 3727              		.loc 1 1042 5 view .LVU1007
 3728 0062 41F48051 		orr	r1, r1, #4096
 3729              	.LVL352:
1042:Core/Src/tmag5170_ex.c **** 
 3730              		.loc 1 1042 5 is_stmt 0 view .LVU1008
 3731 0066 0320     		movs	r0, #3
 3732              	.LVL353:
1042:Core/Src/tmag5170_ex.c **** 
 3733              		.loc 1 1042 5 view .LVU1009
 3734 0068 FFF7FEFF 		bl	writeToRegister
 3735              	.LVL354:
 3736 006c D2E7     		b	.L268
 3737              	.LVL355:
 3738              	.L275:
 3739              	.LCFI72:
 3740              		.cfi_def_cfa_offset 0
 3741              		.cfi_restore 4
 3742              		.cfi_restore 14
1042:Core/Src/tmag5170_ex.c **** 
 3743              		.loc 1 1042 5 view .LVU1010
 3744 006e 7047     		bx	lr
 3745              	.L280:
 3746              		.align	2
 3747              	.L279:
 3748 0070 00000000 		.word	.LANCHOR0
 3749              		.cfi_endproc
 3750              	.LFE31:
 3752              		.section	.text.disableMagSwitch,"ax",%progbits
 3753              		.align	1
 3754              		.global	disableMagSwitch
 3755              		.syntax unified
 3756              		.thumb
 3757              		.thumb_func
 3759              	disableMagSwitch:
 3760              	.LFB32:
1055:Core/Src/tmag5170_ex.c ****     uint16_t input;
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 120


 3761              		.loc 1 1055 1 is_stmt 1 view -0
 3762              		.cfi_startproc
 3763              		@ args = 0, pretend = 0, frame = 0
 3764              		@ frame_needed = 0, uses_anonymous_args = 0
 3765 0000 08B5     		push	{r3, lr}
 3766              	.LCFI73:
 3767              		.cfi_def_cfa_offset 8
 3768              		.cfi_offset 3, -8
 3769              		.cfi_offset 14, -4
1056:Core/Src/tmag5170_ex.c ****     input = normalReadRegister(ALERT_CONFIG_ADDRESS);
 3770              		.loc 1 1056 5 view .LVU1012
1057:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3771              		.loc 1 1057 5 view .LVU1013
1057:Core/Src/tmag5170_ex.c ****     input &= ~(ALERT_CONFIG_ALERT_MODE_MASK);
 3772              		.loc 1 1057 13 is_stmt 0 view .LVU1014
 3773 0002 0320     		movs	r0, #3
 3774 0004 FFF7FEFF 		bl	normalReadRegister
 3775              	.LVL356:
1058:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3776              		.loc 1 1058 5 is_stmt 1 view .LVU1015
1058:Core/Src/tmag5170_ex.c ****     input |= ALERT_CONFIG_ALERT_MODE_InterruptandTriggerMode;
 3777              		.loc 1 1058 11 is_stmt 0 view .LVU1016
 3778 0008 20F48051 		bic	r1, r0, #4096
 3779 000c 89B2     		uxth	r1, r1
 3780              	.LVL357:
1059:Core/Src/tmag5170_ex.c ****     writeToRegister( ALERT_CONFIG_ADDRESS, input );
 3781              		.loc 1 1059 5 is_stmt 1 view .LVU1017
1060:Core/Src/tmag5170_ex.c **** }
 3782              		.loc 1 1060 5 view .LVU1018
 3783 000e 0320     		movs	r0, #3
 3784 0010 FFF7FEFF 		bl	writeToRegister
 3785              	.LVL358:
1061:Core/Src/tmag5170_ex.c **** 
 3786              		.loc 1 1061 1 is_stmt 0 view .LVU1019
 3787 0014 08BD     		pop	{r3, pc}
 3788              		.cfi_endproc
 3789              	.LFE32:
 3791              		.section	.text.enableMagChannels,"ax",%progbits
 3792              		.align	1
 3793              		.global	enableMagChannels
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3798              	enableMagChannels:
 3799              	.LVL359:
 3800              	.LFB34:
1136:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3801              		.loc 1 1136 1 is_stmt 1 view -0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 0
 3804              		@ frame_needed = 0, uses_anonymous_args = 0
1139:Core/Src/tmag5170_ex.c **** 
 3805              		.loc 1 1139 5 view .LVU1021
1139:Core/Src/tmag5170_ex.c **** 
 3806              		.loc 1 1139 10 is_stmt 0 view .LVU1022
 3807 0000 0C4B     		ldr	r3, .L290
 3808 0002 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 121


 3809 0004 9B11     		asrs	r3, r3, #6
1139:Core/Src/tmag5170_ex.c **** 
 3810              		.loc 1 1139 8 view .LVU1023
 3811 0006 33F00703 		bics	r3, r3, #7
 3812 000a 11D1     		bne	.L286
1136:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3813              		.loc 1 1136 1 view .LVU1024
 3814 000c 10B5     		push	{r4, lr}
 3815              	.LCFI74:
 3816              		.cfi_def_cfa_offset 8
 3817              		.cfi_offset 4, -8
 3818              		.cfi_offset 14, -4
 3819 000e 0446     		mov	r4, r0
1142:Core/Src/tmag5170_ex.c **** 
 3820              		.loc 1 1142 5 is_stmt 1 view .LVU1025
1142:Core/Src/tmag5170_ex.c **** 
 3821              		.loc 1 1142 8 is_stmt 0 view .LVU1026
 3822 0010 0F28     		cmp	r0, #15
 3823 0012 00D9     		bls	.L289
 3824              	.LVL360:
 3825              	.L283:
1149:Core/Src/tmag5170_ex.c **** 
 3826              		.loc 1 1149 1 view .LVU1027
 3827 0014 10BD     		pop	{r4, pc}
 3828              	.LVL361:
 3829              	.L289:
1144:Core/Src/tmag5170_ex.c ****     // Set MAG_CH_EN (0x019-6) to mag_ch_en_bits
 3830              		.loc 1 1144 5 is_stmt 1 view .LVU1028
1146:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_MAG_CH_EN_MASK) ) | (mag_ch_en_bits << 6);
 3831              		.loc 1 1146 5 view .LVU1029
1146:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_MAG_CH_EN_MASK) ) | (mag_ch_en_bits << 6);
 3832              		.loc 1 1146 13 is_stmt 0 view .LVU1030
 3833 0016 0120     		movs	r0, #1
 3834              	.LVL362:
1146:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_MAG_CH_EN_MASK) ) | (mag_ch_en_bits << 6);
 3835              		.loc 1 1146 13 view .LVU1031
 3836 0018 FFF7FEFF 		bl	normalReadRegister
 3837              	.LVL363:
1147:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3838              		.loc 1 1147 5 is_stmt 1 view .LVU1032
1147:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3839              		.loc 1 1147 21 is_stmt 0 view .LVU1033
 3840 001c 20F47070 		bic	r0, r0, #960
 3841              	.LVL364:
1147:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3842              		.loc 1 1147 21 view .LVU1034
 3843 0020 00B2     		sxth	r0, r0
1147:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3844              		.loc 1 1147 57 view .LVU1035
 3845 0022 40EA8410 		orr	r0, r0, r4, lsl #6
 3846              	.LVL365:
1148:Core/Src/tmag5170_ex.c **** }
 3847              		.loc 1 1148 5 is_stmt 1 view .LVU1036
 3848 0026 81B2     		uxth	r1, r0
 3849 0028 0120     		movs	r0, #1
 3850              	.LVL366:
1148:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 122


 3851              		.loc 1 1148 5 is_stmt 0 view .LVU1037
 3852 002a FFF7FEFF 		bl	writeToRegister
 3853              	.LVL367:
1148:Core/Src/tmag5170_ex.c **** }
 3854              		.loc 1 1148 5 view .LVU1038
 3855 002e F1E7     		b	.L283
 3856              	.LVL368:
 3857              	.L286:
 3858              	.LCFI75:
 3859              		.cfi_def_cfa_offset 0
 3860              		.cfi_restore 4
 3861              		.cfi_restore 14
1148:Core/Src/tmag5170_ex.c **** }
 3862              		.loc 1 1148 5 view .LVU1039
 3863 0030 7047     		bx	lr
 3864              	.L291:
 3865 0032 00BF     		.align	2
 3866              	.L290:
 3867 0034 00000000 		.word	.LANCHOR0
 3868              		.cfi_endproc
 3869              	.LFE34:
 3871              		.section	.text.enableAngleMeasurement,"ax",%progbits
 3872              		.align	1
 3873              		.global	enableAngleMeasurement
 3874              		.syntax unified
 3875              		.thumb
 3876              		.thumb_func
 3878              	enableAngleMeasurement:
 3879              	.LVL369:
 3880              	.LFB35:
1171:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3881              		.loc 1 1171 1 is_stmt 1 view -0
 3882              		.cfi_startproc
 3883              		@ args = 0, pretend = 0, frame = 0
 3884              		@ frame_needed = 0, uses_anonymous_args = 0
1174:Core/Src/tmag5170_ex.c **** 
 3885              		.loc 1 1174 5 view .LVU1041
1174:Core/Src/tmag5170_ex.c **** 
 3886              		.loc 1 1174 10 is_stmt 0 view .LVU1042
 3887 0000 0B4B     		ldr	r3, .L299
 3888 0002 1B88     		ldrh	r3, [r3]
 3889 0004 9B11     		asrs	r3, r3, #6
1174:Core/Src/tmag5170_ex.c **** 
 3890              		.loc 1 1174 8 view .LVU1043
 3891 0006 33F00703 		bics	r3, r3, #7
 3892 000a 10D1     		bne	.L295
1171:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 3893              		.loc 1 1171 1 view .LVU1044
 3894 000c 10B5     		push	{r4, lr}
 3895              	.LCFI76:
 3896              		.cfi_def_cfa_offset 8
 3897              		.cfi_offset 4, -8
 3898              		.cfi_offset 14, -4
 3899 000e 0446     		mov	r4, r0
1177:Core/Src/tmag5170_ex.c **** 
 3900              		.loc 1 1177 5 is_stmt 1 view .LVU1045
1177:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 123


 3901              		.loc 1 1177 8 is_stmt 0 view .LVU1046
 3902 0010 0328     		cmp	r0, #3
 3903 0012 00D9     		bls	.L298
 3904              	.LVL370:
 3905              	.L292:
1188:Core/Src/tmag5170_ex.c **** 
 3906              		.loc 1 1188 1 view .LVU1047
 3907 0014 10BD     		pop	{r4, pc}
 3908              	.LVL371:
 3909              	.L298:
1181:Core/Src/tmag5170_ex.c **** 
 3910              		.loc 1 1181 5 is_stmt 1 view .LVU1048
1183:Core/Src/tmag5170_ex.c ****     // Set ANGLE_EN (0x01F-E) to mag_ch_en_bits
 3911              		.loc 1 1183 5 view .LVU1049
1185:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_ANGLE_EN_MASK) ) | (angle_en_bits << 14);
 3912              		.loc 1 1185 5 view .LVU1050
1185:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_ANGLE_EN_MASK) ) | (angle_en_bits << 14);
 3913              		.loc 1 1185 13 is_stmt 0 view .LVU1051
 3914 0016 0120     		movs	r0, #1
 3915              	.LVL372:
1185:Core/Src/tmag5170_ex.c ****     input = ( input & ~(SENSOR_CONFIG_ANGLE_EN_MASK) ) | (angle_en_bits << 14);
 3916              		.loc 1 1185 13 view .LVU1052
 3917 0018 FFF7FEFF 		bl	normalReadRegister
 3918              	.LVL373:
1186:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3919              		.loc 1 1186 5 is_stmt 1 view .LVU1053
1186:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3920              		.loc 1 1186 21 is_stmt 0 view .LVU1054
 3921 001c C0F30D00 		ubfx	r0, r0, #0, #14
 3922              	.LVL374:
1186:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 3923              		.loc 1 1186 56 view .LVU1055
 3924 0020 40EA8430 		orr	r0, r0, r4, lsl #14
 3925              	.LVL375:
1187:Core/Src/tmag5170_ex.c **** }
 3926              		.loc 1 1187 5 is_stmt 1 view .LVU1056
 3927 0024 81B2     		uxth	r1, r0
 3928 0026 0120     		movs	r0, #1
 3929              	.LVL376:
1187:Core/Src/tmag5170_ex.c **** }
 3930              		.loc 1 1187 5 is_stmt 0 view .LVU1057
 3931 0028 FFF7FEFF 		bl	writeToRegister
 3932              	.LVL377:
1187:Core/Src/tmag5170_ex.c **** }
 3933              		.loc 1 1187 5 view .LVU1058
 3934 002c F2E7     		b	.L292
 3935              	.LVL378:
 3936              	.L295:
 3937              	.LCFI77:
 3938              		.cfi_def_cfa_offset 0
 3939              		.cfi_restore 4
 3940              		.cfi_restore 14
1187:Core/Src/tmag5170_ex.c **** }
 3941              		.loc 1 1187 5 view .LVU1059
 3942 002e 7047     		bx	lr
 3943              	.L300:
 3944              		.align	2
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 124


 3945              	.L299:
 3946 0030 00000000 		.word	.LANCHOR0
 3947              		.cfi_endproc
 3948              	.LFE35:
 3950              		.section	.text.enableTemperatureMeasurement,"ax",%progbits
 3951              		.align	1
 3952              		.global	enableTemperatureMeasurement
 3953              		.syntax unified
 3954              		.thumb
 3955              		.thumb_func
 3957              	enableTemperatureMeasurement:
 3958              	.LFB36:
1198:Core/Src/tmag5170_ex.c ****     uint16_t input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 3959              		.loc 1 1198 37 is_stmt 1 view -0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 0
 3962              		@ frame_needed = 0, uses_anonymous_args = 0
 3963 0000 08B5     		push	{r3, lr}
 3964              	.LCFI78:
 3965              		.cfi_def_cfa_offset 8
 3966              		.cfi_offset 3, -8
 3967              		.cfi_offset 14, -4
1199:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
 3968              		.loc 1 1199 5 view .LVU1061
1199:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
 3969              		.loc 1 1199 22 is_stmt 0 view .LVU1062
 3970 0002 0020     		movs	r0, #0
 3971 0004 FFF7FEFF 		bl	normalReadRegister
 3972              	.LVL379:
1200:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelEnabled;
 3973              		.loc 1 1200 5 is_stmt 1 view .LVU1063
1200:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelEnabled;
 3974              		.loc 1 1200 11 is_stmt 0 view .LVU1064
 3975 0008 20F00801 		bic	r1, r0, #8
 3976 000c 89B2     		uxth	r1, r1
 3977              	.LVL380:
1201:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 3978              		.loc 1 1201 5 is_stmt 1 view .LVU1065
1202:Core/Src/tmag5170_ex.c **** }
 3979              		.loc 1 1202 5 view .LVU1066
 3980 000e 41F00801 		orr	r1, r1, #8
 3981              	.LVL381:
1202:Core/Src/tmag5170_ex.c **** }
 3982              		.loc 1 1202 5 is_stmt 0 view .LVU1067
 3983 0012 0020     		movs	r0, #0
 3984              	.LVL382:
1202:Core/Src/tmag5170_ex.c **** }
 3985              		.loc 1 1202 5 view .LVU1068
 3986 0014 FFF7FEFF 		bl	writeToRegister
 3987              	.LVL383:
1203:Core/Src/tmag5170_ex.c **** 
 3988              		.loc 1 1203 1 view .LVU1069
 3989 0018 08BD     		pop	{r3, pc}
 3990              		.cfi_endproc
 3991              	.LFE36:
 3993              		.section	.text.disableTemperatureMeasurement,"ax",%progbits
 3994              		.align	1
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 125


 3995              		.global	disableTemperatureMeasurement
 3996              		.syntax unified
 3997              		.thumb
 3998              		.thumb_func
 4000              	disableTemperatureMeasurement:
 4001              	.LFB37:
1211:Core/Src/tmag5170_ex.c ****     uint16_t input = normalReadRegister(DEVICE_CONFIG_ADDRESS);
 4002              		.loc 1 1211 38 is_stmt 1 view -0
 4003              		.cfi_startproc
 4004              		@ args = 0, pretend = 0, frame = 0
 4005              		@ frame_needed = 0, uses_anonymous_args = 0
 4006 0000 08B5     		push	{r3, lr}
 4007              	.LCFI79:
 4008              		.cfi_def_cfa_offset 8
 4009              		.cfi_offset 3, -8
 4010              		.cfi_offset 14, -4
1212:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
 4011              		.loc 1 1212 5 view .LVU1071
1212:Core/Src/tmag5170_ex.c ****     input &= ~(DEVICE_CONFIG_T_CH_EN_MASK);
 4012              		.loc 1 1212 22 is_stmt 0 view .LVU1072
 4013 0002 0020     		movs	r0, #0
 4014 0004 FFF7FEFF 		bl	normalReadRegister
 4015              	.LVL384:
1213:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelDisabled;
 4016              		.loc 1 1213 5 is_stmt 1 view .LVU1073
1213:Core/Src/tmag5170_ex.c ****     input |= DEVICE_CONFIG_T_CH_EN_TemperatureChannelDisabled;
 4017              		.loc 1 1213 11 is_stmt 0 view .LVU1074
 4018 0008 20F00801 		bic	r1, r0, #8
 4019 000c 89B2     		uxth	r1, r1
 4020              	.LVL385:
1214:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 4021              		.loc 1 1214 5 is_stmt 1 view .LVU1075
1215:Core/Src/tmag5170_ex.c **** }
 4022              		.loc 1 1215 5 view .LVU1076
 4023 000e 0020     		movs	r0, #0
 4024 0010 FFF7FEFF 		bl	writeToRegister
 4025              	.LVL386:
1216:Core/Src/tmag5170_ex.c **** 
 4026              		.loc 1 1216 1 is_stmt 0 view .LVU1077
 4027 0014 08BD     		pop	{r3, pc}
 4028              		.cfi_endproc
 4029              	.LFE37:
 4031              		.section	.text.setSampleRate,"ax",%progbits
 4032              		.align	1
 4033              		.global	setSampleRate
 4034              		.syntax unified
 4035              		.thumb
 4036              		.thumb_func
 4038              	setSampleRate:
 4039              	.LVL387:
 4040              	.LFB38:
1233:Core/Src/tmag5170_ex.c ****     uint16_t input;
 4041              		.loc 1 1233 1 is_stmt 1 view -0
 4042              		.cfi_startproc
 4043              		@ args = 0, pretend = 0, frame = 0
 4044              		@ frame_needed = 0, uses_anonymous_args = 0
1233:Core/Src/tmag5170_ex.c ****     uint16_t input;
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 126


 4045              		.loc 1 1233 1 is_stmt 0 view .LVU1079
 4046 0000 10B5     		push	{r4, lr}
 4047              	.LCFI80:
 4048              		.cfi_def_cfa_offset 8
 4049              		.cfi_offset 4, -8
 4050              		.cfi_offset 14, -4
 4051 0002 0446     		mov	r4, r0
1234:Core/Src/tmag5170_ex.c ****     // Set CONV_AVG (0x00E-C) to CONV_AVG_bits
 4052              		.loc 1 1234 5 is_stmt 1 view .LVU1080
1236:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_CONV_AVG_NUM_MASK) ) | (CONV_AVG_bits << 12);
 4053              		.loc 1 1236 5 view .LVU1081
1236:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_CONV_AVG_NUM_MASK) ) | (CONV_AVG_bits << 12);
 4054              		.loc 1 1236 13 is_stmt 0 view .LVU1082
 4055 0004 0020     		movs	r0, #0
 4056              	.LVL388:
1236:Core/Src/tmag5170_ex.c ****     input = ( input & ~(DEVICE_CONFIG_CONV_AVG_NUM_MASK) ) | (CONV_AVG_bits << 12);
 4057              		.loc 1 1236 13 view .LVU1083
 4058 0006 FFF7FEFF 		bl	normalReadRegister
 4059              	.LVL389:
1237:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 4060              		.loc 1 1237 5 is_stmt 1 view .LVU1084
1237:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 4061              		.loc 1 1237 21 is_stmt 0 view .LVU1085
 4062 000a 20F4E041 		bic	r1, r0, #28672
 4063 000e 09B2     		sxth	r1, r1
1237:Core/Src/tmag5170_ex.c ****     writeToRegister( DEVICE_CONFIG_ADDRESS, input );
 4064              		.loc 1 1237 60 view .LVU1086
 4065 0010 41EA0431 		orr	r1, r1, r4, lsl #12
 4066              	.LVL390:
1238:Core/Src/tmag5170_ex.c **** }
 4067              		.loc 1 1238 5 is_stmt 1 view .LVU1087
 4068 0014 89B2     		uxth	r1, r1
1238:Core/Src/tmag5170_ex.c **** }
 4069              		.loc 1 1238 5 is_stmt 0 view .LVU1088
 4070 0016 0020     		movs	r0, #0
 4071 0018 FFF7FEFF 		bl	writeToRegister
 4072              	.LVL391:
1239:Core/Src/tmag5170_ex.c **** 
 4073              		.loc 1 1239 1 view .LVU1089
 4074 001c 10BD     		pop	{r4, pc}
1239:Core/Src/tmag5170_ex.c **** 
 4075              		.loc 1 1239 1 view .LVU1090
 4076              		.cfi_endproc
 4077              	.LFE38:
 4079              		.section	.text.setRanges,"ax",%progbits
 4080              		.align	1
 4081              		.global	setRanges
 4082              		.syntax unified
 4083              		.thumb
 4084              		.thumb_func
 4086              	setRanges:
 4087              	.LVL392:
 4088              	.LFB39:
1263:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 4089              		.loc 1 1263 1 is_stmt 1 view -0
 4090              		.cfi_startproc
 4091              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 127


 4092              		@ frame_needed = 0, uses_anonymous_args = 0
1263:Core/Src/tmag5170_ex.c ****     // To prevent undefined behavior, this function does not perform its operation
 4093              		.loc 1 1263 1 is_stmt 0 view .LVU1092
 4094 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4095              	.LCFI81:
 4096              		.cfi_def_cfa_offset 24
 4097              		.cfi_offset 3, -24
 4098              		.cfi_offset 4, -20
 4099              		.cfi_offset 5, -16
 4100              		.cfi_offset 6, -12
 4101              		.cfi_offset 7, -8
 4102              		.cfi_offset 14, -4
1266:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
 4103              		.loc 1 1266 5 is_stmt 1 view .LVU1093
1266:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
 4104              		.loc 1 1266 10 is_stmt 0 view .LVU1094
 4105 0002 0F4D     		ldr	r5, .L311
 4106 0004 2B88     		ldrh	r3, [r5]
 4107 0006 9B11     		asrs	r3, r3, #6
1266:Core/Src/tmag5170_ex.c ****     // Check that inputs are valid
 4108              		.loc 1 1266 8 view .LVU1095
 4109 0008 33F00703 		bics	r3, r3, #7
 4110 000c 08D1     		bne	.L307
 4111 000e 0446     		mov	r4, r0
 4112 0010 0F46     		mov	r7, r1
 4113 0012 1646     		mov	r6, r2
1268:Core/Src/tmag5170_ex.c **** 
 4114              		.loc 1 1268 5 is_stmt 1 view .LVU1096
1268:Core/Src/tmag5170_ex.c **** 
 4115              		.loc 1 1268 8 is_stmt 0 view .LVU1097
 4116 0014 0228     		cmp	r0, #2
 4117 0016 03D8     		bhi	.L307
1268:Core/Src/tmag5170_ex.c **** 
 4118              		.loc 1 1268 30 discriminator 2 view .LVU1098
 4119 0018 0229     		cmp	r1, #2
 4120 001a 01D8     		bhi	.L307
1268:Core/Src/tmag5170_ex.c **** 
 4121              		.loc 1 1268 53 discriminator 4 view .LVU1099
 4122 001c 022A     		cmp	r2, #2
 4123 001e 00D9     		bls	.L310
 4124              	.LVL393:
 4125              	.L307:
1273:Core/Src/tmag5170_ex.c **** 
 4126              		.loc 1 1273 1 view .LVU1100
 4127 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4128              	.LVL394:
 4129              	.L310:
1270:Core/Src/tmag5170_ex.c ****     input |= (z_range_bits << 4) | (y_range_bits << 2) | x_range_bits;
 4130              		.loc 1 1270 5 is_stmt 1 view .LVU1101
1270:Core/Src/tmag5170_ex.c ****     input |= (z_range_bits << 4) | (y_range_bits << 2) | x_range_bits;
 4131              		.loc 1 1270 22 is_stmt 0 view .LVU1102
 4132 0022 0120     		movs	r0, #1
 4133              	.LVL395:
1270:Core/Src/tmag5170_ex.c ****     input |= (z_range_bits << 4) | (y_range_bits << 2) | x_range_bits;
 4134              		.loc 1 1270 22 view .LVU1103
 4135 0024 FFF7FEFF 		bl	normalReadRegister
 4136              	.LVL396:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 128


1270:Core/Src/tmag5170_ex.c ****     input |= (z_range_bits << 4) | (y_range_bits << 2) | x_range_bits;
 4137              		.loc 1 1270 14 view .LVU1104
 4138 0028 20F03F01 		bic	r1, r0, #63
 4139 002c 89B2     		uxth	r1, r1
 4140              	.LVL397:
1271:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 4141              		.loc 1 1271 5 is_stmt 1 view .LVU1105
1271:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 4142              		.loc 1 1271 50 is_stmt 0 view .LVU1106
 4143 002e BB00     		lsls	r3, r7, #2
1271:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 4144              		.loc 1 1271 34 view .LVU1107
 4145 0030 43EA0612 		orr	r2, r3, r6, lsl #4
1271:Core/Src/tmag5170_ex.c ****     writeToRegister( SENSOR_CONFIG_ADDRESS, input );
 4146              		.loc 1 1271 56 view .LVU1108
 4147 0034 2243     		orrs	r2, r2, r4
 4148              	.LVL398:
1272:Core/Src/tmag5170_ex.c **** }
 4149              		.loc 1 1272 5 is_stmt 1 view .LVU1109
 4150 0036 1143     		orrs	r1, r1, r2
 4151              	.LVL399:
1272:Core/Src/tmag5170_ex.c **** }
 4152              		.loc 1 1272 5 is_stmt 0 view .LVU1110
 4153 0038 0120     		movs	r0, #1
 4154 003a FFF7FEFF 		bl	writeToRegister
 4155              	.LVL400:
1272:Core/Src/tmag5170_ex.c **** }
 4156              		.loc 1 1272 5 view .LVU1111
 4157 003e EFE7     		b	.L307
 4158              	.L312:
 4159              		.align	2
 4160              	.L311:
 4161 0040 00000000 		.word	.LANCHOR0
 4162              		.cfi_endproc
 4163              	.LFE39:
 4165              		.section	.text.getXresult,"ax",%progbits
 4166              		.align	1
 4167              		.global	getXresult
 4168              		.syntax unified
 4169              		.thumb
 4170              		.thumb_func
 4172              	getXresult:
 4173              	.LFB40:
1295:Core/Src/tmag5170_ex.c **** uint16_t getYresult() { return normalReadRegister(Y_CH_RESULT_ADDRESS); }
 4174              		.loc 1 1295 23 is_stmt 1 view -0
 4175              		.cfi_startproc
 4176              		@ args = 0, pretend = 0, frame = 0
 4177              		@ frame_needed = 0, uses_anonymous_args = 0
 4178 0000 08B5     		push	{r3, lr}
 4179              	.LCFI82:
 4180              		.cfi_def_cfa_offset 8
 4181              		.cfi_offset 3, -8
 4182              		.cfi_offset 14, -4
1295:Core/Src/tmag5170_ex.c **** uint16_t getYresult() { return normalReadRegister(Y_CH_RESULT_ADDRESS); }
 4183              		.loc 1 1295 25 view .LVU1113
1295:Core/Src/tmag5170_ex.c **** uint16_t getYresult() { return normalReadRegister(Y_CH_RESULT_ADDRESS); }
 4184              		.loc 1 1295 32 is_stmt 0 view .LVU1114
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 129


 4185 0002 0920     		movs	r0, #9
 4186 0004 FFF7FEFF 		bl	normalReadRegister
 4187              	.LVL401:
1295:Core/Src/tmag5170_ex.c **** uint16_t getYresult() { return normalReadRegister(Y_CH_RESULT_ADDRESS); }
 4188              		.loc 1 1295 73 view .LVU1115
 4189 0008 08BD     		pop	{r3, pc}
 4190              		.cfi_endproc
 4191              	.LFE40:
 4193              		.section	.text.getYresult,"ax",%progbits
 4194              		.align	1
 4195              		.global	getYresult
 4196              		.syntax unified
 4197              		.thumb
 4198              		.thumb_func
 4200              	getYresult:
 4201              	.LFB41:
1296:Core/Src/tmag5170_ex.c **** uint16_t getZresult() { return normalReadRegister(Z_CH_RESULT_ADDRESS); }
 4202              		.loc 1 1296 23 is_stmt 1 view -0
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 0
 4205              		@ frame_needed = 0, uses_anonymous_args = 0
 4206 0000 08B5     		push	{r3, lr}
 4207              	.LCFI83:
 4208              		.cfi_def_cfa_offset 8
 4209              		.cfi_offset 3, -8
 4210              		.cfi_offset 14, -4
1296:Core/Src/tmag5170_ex.c **** uint16_t getZresult() { return normalReadRegister(Z_CH_RESULT_ADDRESS); }
 4211              		.loc 1 1296 25 view .LVU1117
1296:Core/Src/tmag5170_ex.c **** uint16_t getZresult() { return normalReadRegister(Z_CH_RESULT_ADDRESS); }
 4212              		.loc 1 1296 32 is_stmt 0 view .LVU1118
 4213 0002 0A20     		movs	r0, #10
 4214 0004 FFF7FEFF 		bl	normalReadRegister
 4215              	.LVL402:
1296:Core/Src/tmag5170_ex.c **** uint16_t getZresult() { return normalReadRegister(Z_CH_RESULT_ADDRESS); }
 4216              		.loc 1 1296 73 view .LVU1119
 4217 0008 08BD     		pop	{r3, pc}
 4218              		.cfi_endproc
 4219              	.LFE41:
 4221              		.section	.text.getZresult,"ax",%progbits
 4222              		.align	1
 4223              		.global	getZresult
 4224              		.syntax unified
 4225              		.thumb
 4226              		.thumb_func
 4228              	getZresult:
 4229              	.LFB42:
1297:Core/Src/tmag5170_ex.c **** uint16_t getTEMPresult() { return normalReadRegister(TEMP_RESULT_ADDRESS); }
 4230              		.loc 1 1297 23 is_stmt 1 view -0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 0
 4233              		@ frame_needed = 0, uses_anonymous_args = 0
 4234 0000 08B5     		push	{r3, lr}
 4235              	.LCFI84:
 4236              		.cfi_def_cfa_offset 8
 4237              		.cfi_offset 3, -8
 4238              		.cfi_offset 14, -4
1297:Core/Src/tmag5170_ex.c **** uint16_t getTEMPresult() { return normalReadRegister(TEMP_RESULT_ADDRESS); }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 130


 4239              		.loc 1 1297 25 view .LVU1121
1297:Core/Src/tmag5170_ex.c **** uint16_t getTEMPresult() { return normalReadRegister(TEMP_RESULT_ADDRESS); }
 4240              		.loc 1 1297 32 is_stmt 0 view .LVU1122
 4241 0002 0B20     		movs	r0, #11
 4242 0004 FFF7FEFF 		bl	normalReadRegister
 4243              	.LVL403:
1297:Core/Src/tmag5170_ex.c **** uint16_t getTEMPresult() { return normalReadRegister(TEMP_RESULT_ADDRESS); }
 4244              		.loc 1 1297 73 view .LVU1123
 4245 0008 08BD     		pop	{r3, pc}
 4246              		.cfi_endproc
 4247              	.LFE42:
 4249              		.section	.text.getMagResultsRegistersNrml,"ax",%progbits
 4250              		.align	1
 4251              		.global	getMagResultsRegistersNrml
 4252              		.syntax unified
 4253              		.thumb
 4254              		.thumb_func
 4256              	getMagResultsRegistersNrml:
 4257              	.LVL404:
 4258              	.LFB46:
1323:Core/Src/tmag5170_ex.c ****     meas_arr[0] = (int16_t) getXresult();
 4259              		.loc 1 1323 1 is_stmt 1 view -0
 4260              		.cfi_startproc
 4261              		@ args = 0, pretend = 0, frame = 0
 4262              		@ frame_needed = 0, uses_anonymous_args = 0
1323:Core/Src/tmag5170_ex.c ****     meas_arr[0] = (int16_t) getXresult();
 4263              		.loc 1 1323 1 is_stmt 0 view .LVU1125
 4264 0000 10B5     		push	{r4, lr}
 4265              	.LCFI85:
 4266              		.cfi_def_cfa_offset 8
 4267              		.cfi_offset 4, -8
 4268              		.cfi_offset 14, -4
 4269 0002 0446     		mov	r4, r0
1324:Core/Src/tmag5170_ex.c ****     meas_arr[1] = (int16_t) getYresult();
 4270              		.loc 1 1324 5 is_stmt 1 view .LVU1126
1324:Core/Src/tmag5170_ex.c ****     meas_arr[1] = (int16_t) getYresult();
 4271              		.loc 1 1324 29 is_stmt 0 view .LVU1127
 4272 0004 FFF7FEFF 		bl	getXresult
 4273              	.LVL405:
1324:Core/Src/tmag5170_ex.c ****     meas_arr[1] = (int16_t) getYresult();
 4274              		.loc 1 1324 17 view .LVU1128
 4275 0008 2080     		strh	r0, [r4]	@ movhi
1325:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (int16_t) getZresult();
 4276              		.loc 1 1325 5 is_stmt 1 view .LVU1129
1325:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (int16_t) getZresult();
 4277              		.loc 1 1325 29 is_stmt 0 view .LVU1130
 4278 000a FFF7FEFF 		bl	getYresult
 4279              	.LVL406:
1325:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (int16_t) getZresult();
 4280              		.loc 1 1325 17 view .LVU1131
 4281 000e 6080     		strh	r0, [r4, #2]	@ movhi
1326:Core/Src/tmag5170_ex.c **** }
 4282              		.loc 1 1326 5 is_stmt 1 view .LVU1132
1326:Core/Src/tmag5170_ex.c **** }
 4283              		.loc 1 1326 29 is_stmt 0 view .LVU1133
 4284 0010 FFF7FEFF 		bl	getZresult
 4285              	.LVL407:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 131


1326:Core/Src/tmag5170_ex.c **** }
 4286              		.loc 1 1326 17 view .LVU1134
 4287 0014 A080     		strh	r0, [r4, #4]	@ movhi
1327:Core/Src/tmag5170_ex.c **** 
 4288              		.loc 1 1327 1 view .LVU1135
 4289 0016 10BD     		pop	{r4, pc}
1327:Core/Src/tmag5170_ex.c **** 
 4290              		.loc 1 1327 1 view .LVU1136
 4291              		.cfi_endproc
 4292              	.LFE46:
 4294              		.section	.text.getTEMPresult,"ax",%progbits
 4295              		.align	1
 4296              		.global	getTEMPresult
 4297              		.syntax unified
 4298              		.thumb
 4299              		.thumb_func
 4301              	getTEMPresult:
 4302              	.LFB43:
1298:Core/Src/tmag5170_ex.c **** uint16_t getANGLEresult() { return normalReadRegister(ANGLE_RESULT_ADDRESS); }
 4303              		.loc 1 1298 26 is_stmt 1 view -0
 4304              		.cfi_startproc
 4305              		@ args = 0, pretend = 0, frame = 0
 4306              		@ frame_needed = 0, uses_anonymous_args = 0
 4307 0000 08B5     		push	{r3, lr}
 4308              	.LCFI86:
 4309              		.cfi_def_cfa_offset 8
 4310              		.cfi_offset 3, -8
 4311              		.cfi_offset 14, -4
1298:Core/Src/tmag5170_ex.c **** uint16_t getANGLEresult() { return normalReadRegister(ANGLE_RESULT_ADDRESS); }
 4312              		.loc 1 1298 28 view .LVU1138
1298:Core/Src/tmag5170_ex.c **** uint16_t getANGLEresult() { return normalReadRegister(ANGLE_RESULT_ADDRESS); }
 4313              		.loc 1 1298 35 is_stmt 0 view .LVU1139
 4314 0002 0C20     		movs	r0, #12
 4315 0004 FFF7FEFF 		bl	normalReadRegister
 4316              	.LVL408:
1298:Core/Src/tmag5170_ex.c **** uint16_t getANGLEresult() { return normalReadRegister(ANGLE_RESULT_ADDRESS); }
 4317              		.loc 1 1298 76 view .LVU1140
 4318 0008 08BD     		pop	{r3, pc}
 4319              		.cfi_endproc
 4320              	.LFE43:
 4322              		.section	.text.getMeasurementNrmlTEMP,"ax",%progbits
 4323              		.align	1
 4324              		.global	getMeasurementNrmlTEMP
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4329              	getMeasurementNrmlTEMP:
 4330              	.LFB50:
1393:Core/Src/tmag5170_ex.c ****     uint16_t tADC_T = getTEMPresult();
 4331              		.loc 1 1393 1 is_stmt 1 view -0
 4332              		.cfi_startproc
 4333              		@ args = 0, pretend = 0, frame = 0
 4334              		@ frame_needed = 0, uses_anonymous_args = 0
 4335 0000 08B5     		push	{r3, lr}
 4336              	.LCFI87:
 4337              		.cfi_def_cfa_offset 8
 4338              		.cfi_offset 3, -8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 132


 4339              		.cfi_offset 14, -4
1394:Core/Src/tmag5170_ex.c **** 
 4340              		.loc 1 1394 5 view .LVU1142
1394:Core/Src/tmag5170_ex.c **** 
 4341              		.loc 1 1394 23 is_stmt 0 view .LVU1143
 4342 0002 FFF7FEFF 		bl	getTEMPresult
 4343              	.LVL409:
 4344 0006 07EE900A 		vmov	s15, r0	@ int
 4345              	.LVL410:
1396:Core/Src/tmag5170_ex.c ****     return temp_val;
 4346              		.loc 1 1396 5 is_stmt 1 view .LVU1144
1396:Core/Src/tmag5170_ex.c ****     return temp_val;
 4347              		.loc 1 1396 45 is_stmt 0 view .LVU1145
 4348 000a F8EE677A 		vcvt.f32.u32	s15, s15
 4349              	.LVL411:
1396:Core/Src/tmag5170_ex.c ****     return temp_val;
 4350              		.loc 1 1396 61 view .LVU1146
 4351 000e 9FED067A 		vldr.32	s14, .L325
 4352 0012 77EEC77A 		vsub.f32	s15, s15, s14
1396:Core/Src/tmag5170_ex.c ****     return temp_val;
 4353              		.loc 1 1396 80 view .LVU1147
 4354 0016 9FED057A 		vldr.32	s14, .L325+4
 4355 001a 87EE870A 		vdiv.f32	s0, s15, s14
 4356              	.LVL412:
1397:Core/Src/tmag5170_ex.c **** }
 4357              		.loc 1 1397 5 is_stmt 1 view .LVU1148
1398:Core/Src/tmag5170_ex.c **** 
 4358              		.loc 1 1398 1 is_stmt 0 view .LVU1149
 4359 001e F3EE097A 		vmov.f32	s15, #2.5e+1
 4360 0022 30EE270A 		vadd.f32	s0, s0, s15
 4361              	.LVL413:
1398:Core/Src/tmag5170_ex.c **** 
 4362              		.loc 1 1398 1 view .LVU1150
 4363 0026 08BD     		pop	{r3, pc}
 4364              	.L326:
 4365              		.align	2
 4366              	.L325:
 4367 0028 00E48846 		.word	1183376384
 4368 002c 00007042 		.word	1114636288
 4369              		.cfi_endproc
 4370              	.LFE50:
 4372              		.section	.text.getANGLEresult,"ax",%progbits
 4373              		.align	1
 4374              		.global	getANGLEresult
 4375              		.syntax unified
 4376              		.thumb
 4377              		.thumb_func
 4379              	getANGLEresult:
 4380              	.LFB44:
1299:Core/Src/tmag5170_ex.c **** uint16_t getMAGresult() { return normalReadRegister(MAGNITUDE_RESULT_ADDRESS); }
 4381              		.loc 1 1299 27 is_stmt 1 view -0
 4382              		.cfi_startproc
 4383              		@ args = 0, pretend = 0, frame = 0
 4384              		@ frame_needed = 0, uses_anonymous_args = 0
 4385 0000 08B5     		push	{r3, lr}
 4386              	.LCFI88:
 4387              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 133


 4388              		.cfi_offset 3, -8
 4389              		.cfi_offset 14, -4
1299:Core/Src/tmag5170_ex.c **** uint16_t getMAGresult() { return normalReadRegister(MAGNITUDE_RESULT_ADDRESS); }
 4390              		.loc 1 1299 29 view .LVU1152
1299:Core/Src/tmag5170_ex.c **** uint16_t getMAGresult() { return normalReadRegister(MAGNITUDE_RESULT_ADDRESS); }
 4391              		.loc 1 1299 36 is_stmt 0 view .LVU1153
 4392 0002 1320     		movs	r0, #19
 4393 0004 FFF7FEFF 		bl	normalReadRegister
 4394              	.LVL414:
1299:Core/Src/tmag5170_ex.c **** uint16_t getMAGresult() { return normalReadRegister(MAGNITUDE_RESULT_ADDRESS); }
 4395              		.loc 1 1299 78 view .LVU1154
 4396 0008 08BD     		pop	{r3, pc}
 4397              		.cfi_endproc
 4398              	.LFE44:
 4400              		.section	.text.getMeasurementNrmlANGLE,"ax",%progbits
 4401              		.align	1
 4402              		.global	getMeasurementNrmlANGLE
 4403              		.syntax unified
 4404              		.thumb
 4405              		.thumb_func
 4407              	getMeasurementNrmlANGLE:
 4408              	.LFB51:
1413:Core/Src/tmag5170_ex.c ****     uint16_t data = getANGLEresult();
 4409              		.loc 1 1413 1 is_stmt 1 view -0
 4410              		.cfi_startproc
 4411              		@ args = 0, pretend = 0, frame = 0
 4412              		@ frame_needed = 0, uses_anonymous_args = 0
 4413 0000 08B5     		push	{r3, lr}
 4414              	.LCFI89:
 4415              		.cfi_def_cfa_offset 8
 4416              		.cfi_offset 3, -8
 4417              		.cfi_offset 14, -4
1414:Core/Src/tmag5170_ex.c ****     float angle = ( (float) data / 16  );
 4418              		.loc 1 1414 5 view .LVU1156
1414:Core/Src/tmag5170_ex.c ****     float angle = ( (float) data / 16  );
 4419              		.loc 1 1414 21 is_stmt 0 view .LVU1157
 4420 0002 FFF7FEFF 		bl	getANGLEresult
 4421              	.LVL415:
 4422 0006 07EE900A 		vmov	s15, r0	@ int
 4423              	.LVL416:
1415:Core/Src/tmag5170_ex.c ****     return angle;
 4424              		.loc 1 1415 5 is_stmt 1 view .LVU1158
1415:Core/Src/tmag5170_ex.c ****     return angle;
 4425              		.loc 1 1415 21 is_stmt 0 view .LVU1159
 4426 000a F8EE677A 		vcvt.f32.u32	s15, s15
 4427              	.LVL417:
1416:Core/Src/tmag5170_ex.c **** }
 4428              		.loc 1 1416 5 is_stmt 1 view .LVU1160
1417:Core/Src/tmag5170_ex.c **** 
 4429              		.loc 1 1417 1 is_stmt 0 view .LVU1161
 4430 000e 9FED020A 		vldr.32	s0, .L331
 4431 0012 27EE800A 		vmul.f32	s0, s15, s0
 4432              	.LVL418:
1417:Core/Src/tmag5170_ex.c **** 
 4433              		.loc 1 1417 1 view .LVU1162
 4434 0016 08BD     		pop	{r3, pc}
 4435              	.L332:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 134


 4436              		.align	2
 4437              	.L331:
 4438 0018 0000803D 		.word	1031798784
 4439              		.cfi_endproc
 4440              	.LFE51:
 4442              		.section	.text.getMAGresult,"ax",%progbits
 4443              		.align	1
 4444              		.global	getMAGresult
 4445              		.syntax unified
 4446              		.thumb
 4447              		.thumb_func
 4449              	getMAGresult:
 4450              	.LFB45:
1300:Core/Src/tmag5170_ex.c **** // NOTE: These functions returned the unsigned integer corresponding to the register value
 4451              		.loc 1 1300 25 is_stmt 1 view -0
 4452              		.cfi_startproc
 4453              		@ args = 0, pretend = 0, frame = 0
 4454              		@ frame_needed = 0, uses_anonymous_args = 0
 4455 0000 08B5     		push	{r3, lr}
 4456              	.LCFI90:
 4457              		.cfi_def_cfa_offset 8
 4458              		.cfi_offset 3, -8
 4459              		.cfi_offset 14, -4
1300:Core/Src/tmag5170_ex.c **** // NOTE: These functions returned the unsigned integer corresponding to the register value
 4460              		.loc 1 1300 27 view .LVU1164
1300:Core/Src/tmag5170_ex.c **** // NOTE: These functions returned the unsigned integer corresponding to the register value
 4461              		.loc 1 1300 34 is_stmt 0 view .LVU1165
 4462 0002 1420     		movs	r0, #20
 4463 0004 FFF7FEFF 		bl	normalReadRegister
 4464              	.LVL419:
1300:Core/Src/tmag5170_ex.c **** // NOTE: These functions returned the unsigned integer corresponding to the register value
 4465              		.loc 1 1300 80 view .LVU1166
 4466 0008 08BD     		pop	{r3, pc}
 4467              		.cfi_endproc
 4468              	.LFE45:
 4470              		.section	.text.getVersion,"ax",%progbits
 4471              		.align	1
 4472              		.global	getVersion
 4473              		.syntax unified
 4474              		.thumb
 4475              		.thumb_func
 4477              	getVersion:
 4478              	.LFB58:
1604:Core/Src/tmag5170_ex.c **** 
 4479              		.loc 1 1604 1 is_stmt 1 view -0
 4480              		.cfi_startproc
 4481              		@ args = 0, pretend = 0, frame = 0
 4482              		@ frame_needed = 0, uses_anonymous_args = 0
 4483 0000 08B5     		push	{r3, lr}
 4484              	.LCFI91:
 4485              		.cfi_def_cfa_offset 8
 4486              		.cfi_offset 3, -8
 4487              		.cfi_offset 14, -4
1604:Core/Src/tmag5170_ex.c **** 
 4488              		.loc 1 1604 3 view .LVU1168
1604:Core/Src/tmag5170_ex.c **** 
 4489              		.loc 1 1604 11 is_stmt 0 view .LVU1169
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 135


 4490 0002 0F20     		movs	r0, #15
 4491 0004 FFF7FEFF 		bl	normalReadRegister
 4492              	.LVL420:
1604:Core/Src/tmag5170_ex.c **** 
 4493              		.loc 1 1604 81 view .LVU1170
 4494 0008 C0F30010 		ubfx	r0, r0, #4, #1
 4495 000c 08BD     		pop	{r3, pc}
 4496              		.cfi_endproc
 4497              	.LFE58:
 4499              		.section	.text.getXrange,"ax",%progbits
 4500              		.align	1
 4501              		.global	getXrange
 4502              		.syntax unified
 4503              		.thumb
 4504              		.thumb_func
 4506              	getXrange:
 4507              	.LFB54:
1492:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate X_RANGE bits.
 4508              		.loc 1 1492 1 is_stmt 1 view -0
 4509              		.cfi_startproc
 4510              		@ args = 0, pretend = 0, frame = 0
 4511              		@ frame_needed = 0, uses_anonymous_args = 0
 4512 0000 10B5     		push	{r4, lr}
 4513              	.LCFI92:
 4514              		.cfi_def_cfa_offset 8
 4515              		.cfi_offset 4, -8
 4516              		.cfi_offset 14, -4
1494:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4517              		.loc 1 1494 5 view .LVU1172
1494:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4518              		.loc 1 1494 23 is_stmt 0 view .LVU1173
 4519 0002 0120     		movs	r0, #1
 4520 0004 FFF7FEFF 		bl	normalReadRegister
 4521              	.LVL421:
1494:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4522              		.loc 1 1494 14 view .LVU1174
 4523 0008 00F00304 		and	r4, r0, #3
 4524              	.LVL422:
1495:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
 4525              		.loc 1 1495 5 is_stmt 1 view .LVU1175
1496:Core/Src/tmag5170_ex.c ****     {
 4526              		.loc 1 1496 5 view .LVU1176
1496:Core/Src/tmag5170_ex.c ****     {
 4527              		.loc 1 1496 10 is_stmt 0 view .LVU1177
 4528 000c FFF7FEFF 		bl	getVersion
 4529              	.LVL423:
1496:Core/Src/tmag5170_ex.c ****     {
 4530              		.loc 1 1496 8 view .LVU1178
 4531 0010 0128     		cmp	r0, #1
 4532 0012 05D0     		beq	.L345
1506:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4533              		.loc 1 1506 9 is_stmt 1 view .LVU1179
 4534              	.LVL424:
1507:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4535              		.loc 1 1507 9 view .LVU1180
1507:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4536              		.loc 1 1507 12 is_stmt 0 view .LVU1181
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 136


 4537 0014 012C     		cmp	r4, #1
 4538 0016 0ED0     		beq	.L342
1508:Core/Src/tmag5170_ex.c ****     }
 4539              		.loc 1 1508 14 is_stmt 1 view .LVU1182
1508:Core/Src/tmag5170_ex.c ****     }
 4540              		.loc 1 1508 17 is_stmt 0 view .LVU1183
 4541 0018 022C     		cmp	r4, #2
 4542 001a 0ED0     		beq	.L343
1506:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4543              		.loc 1 1506 15 view .LVU1184
 4544 001c 3220     		movs	r0, #50
 4545              	.LVL425:
 4546              	.L339:
1510:Core/Src/tmag5170_ex.c **** }
 4547              		.loc 1 1510 5 is_stmt 1 view .LVU1185
1511:Core/Src/tmag5170_ex.c **** 
 4548              		.loc 1 1511 1 is_stmt 0 view .LVU1186
 4549 001e 10BD     		pop	{r4, pc}
 4550              	.LVL426:
 4551              	.L345:
1499:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4552              		.loc 1 1499 9 is_stmt 1 view .LVU1187
1500:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4553              		.loc 1 1500 9 view .LVU1188
1500:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4554              		.loc 1 1500 12 is_stmt 0 view .LVU1189
 4555 0020 012C     		cmp	r4, #1
 4556 0022 03D0     		beq	.L340
1501:Core/Src/tmag5170_ex.c ****     }
 4557              		.loc 1 1501 14 is_stmt 1 view .LVU1190
1501:Core/Src/tmag5170_ex.c ****     }
 4558              		.loc 1 1501 17 is_stmt 0 view .LVU1191
 4559 0024 022C     		cmp	r4, #2
 4560 0026 03D0     		beq	.L341
1499:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4561              		.loc 1 1499 15 view .LVU1192
 4562 0028 9620     		movs	r0, #150
 4563 002a F8E7     		b	.L339
 4564              	.L340:
1500:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4565              		.loc 1 1500 40 view .LVU1193
 4566 002c 4B20     		movs	r0, #75
 4567 002e F6E7     		b	.L339
 4568              	.L341:
1501:Core/Src/tmag5170_ex.c ****     }
 4569              		.loc 1 1501 44 view .LVU1194
 4570 0030 4FF49670 		mov	r0, #300
 4571 0034 F3E7     		b	.L339
 4572              	.LVL427:
 4573              	.L342:
1507:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4574              		.loc 1 1507 40 view .LVU1195
 4575 0036 1920     		movs	r0, #25
 4576 0038 F1E7     		b	.L339
 4577              	.L343:
1508:Core/Src/tmag5170_ex.c ****     }
 4578              		.loc 1 1508 44 view .LVU1196
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 137


 4579 003a 6420     		movs	r0, #100
 4580 003c EFE7     		b	.L339
 4581              		.cfi_endproc
 4582              	.LFE54:
 4584              		.section	.text.getMeasurementNrmlX,"ax",%progbits
 4585              		.align	1
 4586              		.global	getMeasurementNrmlX
 4587              		.syntax unified
 4588              		.thumb
 4589              		.thumb_func
 4591              	getMeasurementNrmlX:
 4592              	.LFB47:
1337:Core/Src/tmag5170_ex.c **** 
 4593              		.loc 1 1337 1 is_stmt 1 view -0
 4594              		.cfi_startproc
 4595              		@ args = 0, pretend = 0, frame = 0
 4596              		@ frame_needed = 0, uses_anonymous_args = 0
 4597 0000 08B5     		push	{r3, lr}
 4598              	.LCFI93:
 4599              		.cfi_def_cfa_offset 8
 4600              		.cfi_offset 3, -8
 4601              		.cfi_offset 14, -4
 4602 0002 2DED028B 		vpush.64	{d8}
 4603              	.LCFI94:
 4604              		.cfi_def_cfa_offset 16
 4605              		.cfi_offset 80, -16
 4606              		.cfi_offset 81, -12
1339:Core/Src/tmag5170_ex.c ****     int16_t data = getXresult(); // separate variable used to cast to a signed int
 4607              		.loc 1 1339 5 view .LVU1198
1339:Core/Src/tmag5170_ex.c ****     int16_t data = getXresult(); // separate variable used to cast to a signed int
 4608              		.loc 1 1339 22 is_stmt 0 view .LVU1199
 4609 0006 FFF7FEFF 		bl	getXrange
 4610              	.LVL428:
 4611 000a 08EE100A 		vmov	s16, r0	@ int
 4612              	.LVL429:
1340:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4613              		.loc 1 1340 5 is_stmt 1 view .LVU1200
1340:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4614              		.loc 1 1340 20 is_stmt 0 view .LVU1201
 4615 000e FFF7FEFF 		bl	getXresult
 4616              	.LVL430:
1340:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4617              		.loc 1 1340 13 view .LVU1202
 4618 0012 03B2     		sxth	r3, r0
 4619 0014 07EE903A 		vmov	s15, r3	@ int
 4620              	.LVL431:
1343:Core/Src/tmag5170_ex.c **** }
 4621              		.loc 1 1343 5 is_stmt 1 view .LVU1203
1343:Core/Src/tmag5170_ex.c **** }
 4622              		.loc 1 1343 14 is_stmt 0 view .LVU1204
 4623 0018 F8EEE77A 		vcvt.f32.s32	s15, s15
 4624              	.LVL432:
1343:Core/Src/tmag5170_ex.c **** }
 4625              		.loc 1 1343 28 view .LVU1205
 4626 001c 9FED050A 		vldr.32	s0, .L348
 4627 0020 67EE807A 		vmul.f32	s15, s15, s0
1343:Core/Src/tmag5170_ex.c **** }
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 138


 4628              		.loc 1 1343 37 view .LVU1206
 4629 0024 B8EEC80A 		vcvt.f32.s32	s0, s16
1344:Core/Src/tmag5170_ex.c **** 
 4630              		.loc 1 1344 1 view .LVU1207
 4631 0028 20EE270A 		vmul.f32	s0, s0, s15
 4632 002c BDEC028B 		vldm	sp!, {d8}
 4633              	.LCFI95:
 4634              		.cfi_restore 80
 4635              		.cfi_restore 81
 4636              		.cfi_def_cfa_offset 8
 4637              	.LVL433:
1344:Core/Src/tmag5170_ex.c **** 
 4638              		.loc 1 1344 1 view .LVU1208
 4639 0030 08BD     		pop	{r3, pc}
 4640              	.LVL434:
 4641              	.L349:
1344:Core/Src/tmag5170_ex.c **** 
 4642              		.loc 1 1344 1 view .LVU1209
 4643 0032 00BF     		.align	2
 4644              	.L348:
 4645 0034 00000038 		.word	939524096
 4646              		.cfi_endproc
 4647              	.LFE47:
 4649              		.section	.text.getYrange,"ax",%progbits
 4650              		.align	1
 4651              		.global	getYrange
 4652              		.syntax unified
 4653              		.thumb
 4654              		.thumb_func
 4656              	getYrange:
 4657              	.LFB55:
1520:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate Y_RANGE bits, shifting them to LSB.
 4658              		.loc 1 1520 1 is_stmt 1 view -0
 4659              		.cfi_startproc
 4660              		@ args = 0, pretend = 0, frame = 0
 4661              		@ frame_needed = 0, uses_anonymous_args = 0
 4662 0000 10B5     		push	{r4, lr}
 4663              	.LCFI96:
 4664              		.cfi_def_cfa_offset 8
 4665              		.cfi_offset 4, -8
 4666              		.cfi_offset 14, -4
1522:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4667              		.loc 1 1522 5 view .LVU1211
1522:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4668              		.loc 1 1522 23 is_stmt 0 view .LVU1212
 4669 0002 0120     		movs	r0, #1
 4670 0004 FFF7FEFF 		bl	normalReadRegister
 4671              	.LVL435:
1522:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4672              		.loc 1 1522 14 view .LVU1213
 4673 0008 00F00304 		and	r4, r0, #3
 4674              	.LVL436:
1523:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
 4675              		.loc 1 1523 5 is_stmt 1 view .LVU1214
1524:Core/Src/tmag5170_ex.c ****     {
 4676              		.loc 1 1524 5 view .LVU1215
1524:Core/Src/tmag5170_ex.c ****     {
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 139


 4677              		.loc 1 1524 10 is_stmt 0 view .LVU1216
 4678 000c FFF7FEFF 		bl	getVersion
 4679              	.LVL437:
1524:Core/Src/tmag5170_ex.c ****     {
 4680              		.loc 1 1524 8 view .LVU1217
 4681 0010 0128     		cmp	r0, #1
 4682 0012 05D0     		beq	.L358
1534:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4683              		.loc 1 1534 9 is_stmt 1 view .LVU1218
 4684              	.LVL438:
1535:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4685              		.loc 1 1535 9 view .LVU1219
1535:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4686              		.loc 1 1535 12 is_stmt 0 view .LVU1220
 4687 0014 012C     		cmp	r4, #1
 4688 0016 0ED0     		beq	.L355
1536:Core/Src/tmag5170_ex.c ****     }
 4689              		.loc 1 1536 14 is_stmt 1 view .LVU1221
1536:Core/Src/tmag5170_ex.c ****     }
 4690              		.loc 1 1536 17 is_stmt 0 view .LVU1222
 4691 0018 022C     		cmp	r4, #2
 4692 001a 0ED0     		beq	.L356
1534:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4693              		.loc 1 1534 15 view .LVU1223
 4694 001c 3220     		movs	r0, #50
 4695              	.LVL439:
 4696              	.L352:
1538:Core/Src/tmag5170_ex.c **** }
 4697              		.loc 1 1538 5 is_stmt 1 view .LVU1224
1539:Core/Src/tmag5170_ex.c **** 
 4698              		.loc 1 1539 1 is_stmt 0 view .LVU1225
 4699 001e 10BD     		pop	{r4, pc}
 4700              	.LVL440:
 4701              	.L358:
1527:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4702              		.loc 1 1527 9 is_stmt 1 view .LVU1226
1528:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4703              		.loc 1 1528 9 view .LVU1227
1528:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4704              		.loc 1 1528 12 is_stmt 0 view .LVU1228
 4705 0020 012C     		cmp	r4, #1
 4706 0022 03D0     		beq	.L353
1529:Core/Src/tmag5170_ex.c ****     }
 4707              		.loc 1 1529 14 is_stmt 1 view .LVU1229
1529:Core/Src/tmag5170_ex.c ****     }
 4708              		.loc 1 1529 17 is_stmt 0 view .LVU1230
 4709 0024 022C     		cmp	r4, #2
 4710 0026 03D0     		beq	.L354
1527:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4711              		.loc 1 1527 15 view .LVU1231
 4712 0028 9620     		movs	r0, #150
 4713 002a F8E7     		b	.L352
 4714              	.L353:
1528:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4715              		.loc 1 1528 40 view .LVU1232
 4716 002c 4B20     		movs	r0, #75
 4717 002e F6E7     		b	.L352
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 140


 4718              	.L354:
1529:Core/Src/tmag5170_ex.c ****     }
 4719              		.loc 1 1529 44 view .LVU1233
 4720 0030 4FF49670 		mov	r0, #300
 4721 0034 F3E7     		b	.L352
 4722              	.LVL441:
 4723              	.L355:
1535:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4724              		.loc 1 1535 40 view .LVU1234
 4725 0036 1920     		movs	r0, #25
 4726 0038 F1E7     		b	.L352
 4727              	.L356:
1536:Core/Src/tmag5170_ex.c ****     }
 4728              		.loc 1 1536 44 view .LVU1235
 4729 003a 6420     		movs	r0, #100
 4730 003c EFE7     		b	.L352
 4731              		.cfi_endproc
 4732              	.LFE55:
 4734              		.section	.text.getMeasurementNrmlY,"ax",%progbits
 4735              		.align	1
 4736              		.global	getMeasurementNrmlY
 4737              		.syntax unified
 4738              		.thumb
 4739              		.thumb_func
 4741              	getMeasurementNrmlY:
 4742              	.LFB48:
1355:Core/Src/tmag5170_ex.c **** 
 4743              		.loc 1 1355 1 is_stmt 1 view -0
 4744              		.cfi_startproc
 4745              		@ args = 0, pretend = 0, frame = 0
 4746              		@ frame_needed = 0, uses_anonymous_args = 0
 4747 0000 08B5     		push	{r3, lr}
 4748              	.LCFI97:
 4749              		.cfi_def_cfa_offset 8
 4750              		.cfi_offset 3, -8
 4751              		.cfi_offset 14, -4
 4752 0002 2DED028B 		vpush.64	{d8}
 4753              	.LCFI98:
 4754              		.cfi_def_cfa_offset 16
 4755              		.cfi_offset 80, -16
 4756              		.cfi_offset 81, -12
1357:Core/Src/tmag5170_ex.c ****     int16_t data = getYresult(); // separate variable used to cast to a signed int
 4757              		.loc 1 1357 5 view .LVU1237
1357:Core/Src/tmag5170_ex.c ****     int16_t data = getYresult(); // separate variable used to cast to a signed int
 4758              		.loc 1 1357 22 is_stmt 0 view .LVU1238
 4759 0006 FFF7FEFF 		bl	getYrange
 4760              	.LVL442:
 4761 000a 08EE100A 		vmov	s16, r0	@ int
 4762              	.LVL443:
1358:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4763              		.loc 1 1358 5 is_stmt 1 view .LVU1239
1358:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4764              		.loc 1 1358 20 is_stmt 0 view .LVU1240
 4765 000e FFF7FEFF 		bl	getYresult
 4766              	.LVL444:
1358:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 4767              		.loc 1 1358 13 view .LVU1241
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 141


 4768 0012 03B2     		sxth	r3, r0
 4769 0014 07EE903A 		vmov	s15, r3	@ int
 4770              	.LVL445:
1361:Core/Src/tmag5170_ex.c **** }
 4771              		.loc 1 1361 5 is_stmt 1 view .LVU1242
1361:Core/Src/tmag5170_ex.c **** }
 4772              		.loc 1 1361 14 is_stmt 0 view .LVU1243
 4773 0018 F8EEE77A 		vcvt.f32.s32	s15, s15
 4774              	.LVL446:
1361:Core/Src/tmag5170_ex.c **** }
 4775              		.loc 1 1361 28 view .LVU1244
 4776 001c 9FED050A 		vldr.32	s0, .L361
 4777 0020 67EE807A 		vmul.f32	s15, s15, s0
1361:Core/Src/tmag5170_ex.c **** }
 4778              		.loc 1 1361 37 view .LVU1245
 4779 0024 B8EEC80A 		vcvt.f32.s32	s0, s16
1362:Core/Src/tmag5170_ex.c **** 
 4780              		.loc 1 1362 1 view .LVU1246
 4781 0028 20EE270A 		vmul.f32	s0, s0, s15
 4782 002c BDEC028B 		vldm	sp!, {d8}
 4783              	.LCFI99:
 4784              		.cfi_restore 80
 4785              		.cfi_restore 81
 4786              		.cfi_def_cfa_offset 8
 4787              	.LVL447:
1362:Core/Src/tmag5170_ex.c **** 
 4788              		.loc 1 1362 1 view .LVU1247
 4789 0030 08BD     		pop	{r3, pc}
 4790              	.LVL448:
 4791              	.L362:
1362:Core/Src/tmag5170_ex.c **** 
 4792              		.loc 1 1362 1 view .LVU1248
 4793 0032 00BF     		.align	2
 4794              	.L361:
 4795 0034 00000038 		.word	939524096
 4796              		.cfi_endproc
 4797              	.LFE48:
 4799              		.section	.text.getMAGrange,"ax",%progbits
 4800              		.align	1
 4801              		.global	getMAGrange
 4802              		.syntax unified
 4803              		.thumb
 4804              		.thumb_func
 4806              	getMAGrange:
 4807              	.LFB57:
1580:Core/Src/tmag5170_ex.c ****     uint16_t angle_en = normalReadRegister(SENSOR_CONFIG_ADDRESS) & SENSOR_CONFIG_ANGLE_EN_MASK;
 4808              		.loc 1 1580 1 is_stmt 1 view -0
 4809              		.cfi_startproc
 4810              		@ args = 0, pretend = 0, frame = 0
 4811              		@ frame_needed = 0, uses_anonymous_args = 0
 4812 0000 08B5     		push	{r3, lr}
 4813              	.LCFI100:
 4814              		.cfi_def_cfa_offset 8
 4815              		.cfi_offset 3, -8
 4816              		.cfi_offset 14, -4
1581:Core/Src/tmag5170_ex.c ****     if ( angle_en == SENSOR_CONFIG_ANGLE_EN_YZ ) return getYrange();
 4817              		.loc 1 1581 5 view .LVU1250
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 142


1581:Core/Src/tmag5170_ex.c ****     if ( angle_en == SENSOR_CONFIG_ANGLE_EN_YZ ) return getYrange();
 4818              		.loc 1 1581 25 is_stmt 0 view .LVU1251
 4819 0002 0120     		movs	r0, #1
 4820 0004 FFF7FEFF 		bl	normalReadRegister
 4821              	.LVL449:
1581:Core/Src/tmag5170_ex.c ****     if ( angle_en == SENSOR_CONFIG_ANGLE_EN_YZ ) return getYrange();
 4822              		.loc 1 1581 14 view .LVU1252
 4823 0008 00F44040 		and	r0, r0, #49152
 4824              	.LVL450:
1582:Core/Src/tmag5170_ex.c ****     else return getXrange();
 4825              		.loc 1 1582 5 is_stmt 1 view .LVU1253
1582:Core/Src/tmag5170_ex.c ****     else return getXrange();
 4826              		.loc 1 1582 8 is_stmt 0 view .LVU1254
 4827 000c B0F5004F 		cmp	r0, #32768
 4828 0010 02D0     		beq	.L367
1583:Core/Src/tmag5170_ex.c **** }
 4829              		.loc 1 1583 10 is_stmt 1 view .LVU1255
1583:Core/Src/tmag5170_ex.c **** }
 4830              		.loc 1 1583 17 is_stmt 0 view .LVU1256
 4831 0012 FFF7FEFF 		bl	getXrange
 4832              	.LVL451:
 4833              	.L365:
1584:Core/Src/tmag5170_ex.c **** 
 4834              		.loc 1 1584 1 view .LVU1257
 4835 0016 08BD     		pop	{r3, pc}
 4836              	.LVL452:
 4837              	.L367:
1582:Core/Src/tmag5170_ex.c ****     else return getXrange();
 4838              		.loc 1 1582 50 is_stmt 1 discriminator 1 view .LVU1258
1582:Core/Src/tmag5170_ex.c ****     else return getXrange();
 4839              		.loc 1 1582 57 is_stmt 0 discriminator 1 view .LVU1259
 4840 0018 FFF7FEFF 		bl	getYrange
 4841              	.LVL453:
1582:Core/Src/tmag5170_ex.c ****     else return getXrange();
 4842              		.loc 1 1582 57 discriminator 1 view .LVU1260
 4843 001c FBE7     		b	.L365
 4844              		.cfi_endproc
 4845              	.LFE57:
 4847              		.section	.text.getMeasurementNrmlMAG,"ax",%progbits
 4848              		.align	1
 4849              		.global	getMeasurementNrmlMAG
 4850              		.syntax unified
 4851              		.thumb
 4852              		.thumb_func
 4854              	getMeasurementNrmlMAG:
 4855              	.LFB52:
1432:Core/Src/tmag5170_ex.c ****     uint16_t data = getMAGresult();
 4856              		.loc 1 1432 1 is_stmt 1 view -0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
 4860 0000 08B5     		push	{r3, lr}
 4861              	.LCFI101:
 4862              		.cfi_def_cfa_offset 8
 4863              		.cfi_offset 3, -8
 4864              		.cfi_offset 14, -4
 4865 0002 2DED028B 		vpush.64	{d8}
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 143


 4866              	.LCFI102:
 4867              		.cfi_def_cfa_offset 16
 4868              		.cfi_offset 80, -16
 4869              		.cfi_offset 81, -12
1433:Core/Src/tmag5170_ex.c ****     // TODO: verify magnitude correlates with expected
 4870              		.loc 1 1433 5 view .LVU1262
1433:Core/Src/tmag5170_ex.c ****     // TODO: verify magnitude correlates with expected
 4871              		.loc 1 1433 21 is_stmt 0 view .LVU1263
 4872 0006 FFF7FEFF 		bl	getMAGresult
 4873              	.LVL454:
 4874 000a 07EE900A 		vmov	s15, r0	@ int
 4875              	.LVL455:
1435:Core/Src/tmag5170_ex.c ****     return magnitude;
 4876              		.loc 1 1435 5 is_stmt 1 view .LVU1264
1435:Core/Src/tmag5170_ex.c ****     return magnitude;
 4877              		.loc 1 1435 25 is_stmt 0 view .LVU1265
 4878 000e F8EE677A 		vcvt.f32.u32	s15, s15
 4879              	.LVL456:
1435:Core/Src/tmag5170_ex.c ****     return magnitude;
 4880              		.loc 1 1435 38 view .LVU1266
 4881 0012 9FED098A 		vldr.32	s16, .L370
 4882 0016 27EE888A 		vmul.f32	s16, s15, s16
1435:Core/Src/tmag5170_ex.c ****     return magnitude;
 4883              		.loc 1 1435 47 view .LVU1267
 4884 001a FFF7FEFF 		bl	getMAGrange
 4885              	.LVL457:
 4886 001e 07EE900A 		vmov	s15, r0	@ int
1435:Core/Src/tmag5170_ex.c ****     return magnitude;
 4887              		.loc 1 1435 45 view .LVU1268
 4888 0022 F8EEE77A 		vcvt.f32.s32	s15, s15
 4889 0026 67EE887A 		vmul.f32	s15, s15, s16
 4890              	.LVL458:
1436:Core/Src/tmag5170_ex.c **** 
 4891              		.loc 1 1436 5 is_stmt 1 view .LVU1269
1438:Core/Src/tmag5170_ex.c **** 
 4892              		.loc 1 1438 1 is_stmt 0 view .LVU1270
 4893 002a B1EE000A 		vmov.f32	s0, #4.0e+0
 4894 002e 27EE800A 		vmul.f32	s0, s15, s0
 4895              	.LVL459:
1438:Core/Src/tmag5170_ex.c **** 
 4896              		.loc 1 1438 1 view .LVU1271
 4897 0032 BDEC028B 		vldm	sp!, {d8}
 4898              	.LCFI103:
 4899              		.cfi_restore 80
 4900              		.cfi_restore 81
 4901              		.cfi_def_cfa_offset 8
 4902 0036 08BD     		pop	{r3, pc}
 4903              	.L371:
 4904              		.align	2
 4905              	.L370:
 4906 0038 00000039 		.word	956301312
 4907              		.cfi_endproc
 4908              	.LFE52:
 4910              		.section	.text.getZrange,"ax",%progbits
 4911              		.align	1
 4912              		.global	getZrange
 4913              		.syntax unified
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 144


 4914              		.thumb
 4915              		.thumb_func
 4917              	getZrange:
 4918              	.LFB56:
1548:Core/Src/tmag5170_ex.c ****     // Get SENSOR_CONFIG and isolate Z_RANGE bits, shifting them to LSB.
 4919              		.loc 1 1548 1 is_stmt 1 view -0
 4920              		.cfi_startproc
 4921              		@ args = 0, pretend = 0, frame = 0
 4922              		@ frame_needed = 0, uses_anonymous_args = 0
 4923 0000 10B5     		push	{r4, lr}
 4924              	.LCFI104:
 4925              		.cfi_def_cfa_offset 8
 4926              		.cfi_offset 4, -8
 4927              		.cfi_offset 14, -4
1550:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4928              		.loc 1 1550 5 view .LVU1273
1550:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4929              		.loc 1 1550 23 is_stmt 0 view .LVU1274
 4930 0002 0120     		movs	r0, #1
 4931 0004 FFF7FEFF 		bl	normalReadRegister
 4932              	.LVL460:
1550:Core/Src/tmag5170_ex.c ****     uint16_t range;
 4933              		.loc 1 1550 14 view .LVU1275
 4934 0008 00F00304 		and	r4, r0, #3
 4935              	.LVL461:
1551:Core/Src/tmag5170_ex.c ****     if ( getVersion() == 1 )
 4936              		.loc 1 1551 5 is_stmt 1 view .LVU1276
1552:Core/Src/tmag5170_ex.c ****     {
 4937              		.loc 1 1552 5 view .LVU1277
1552:Core/Src/tmag5170_ex.c ****     {
 4938              		.loc 1 1552 10 is_stmt 0 view .LVU1278
 4939 000c FFF7FEFF 		bl	getVersion
 4940              	.LVL462:
1552:Core/Src/tmag5170_ex.c ****     {
 4941              		.loc 1 1552 8 view .LVU1279
 4942 0010 0128     		cmp	r0, #1
 4943 0012 05D0     		beq	.L380
1562:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4944              		.loc 1 1562 9 is_stmt 1 view .LVU1280
 4945              	.LVL463:
1563:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4946              		.loc 1 1563 9 view .LVU1281
1563:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4947              		.loc 1 1563 12 is_stmt 0 view .LVU1282
 4948 0014 012C     		cmp	r4, #1
 4949 0016 0ED0     		beq	.L377
1564:Core/Src/tmag5170_ex.c ****     }
 4950              		.loc 1 1564 14 is_stmt 1 view .LVU1283
1564:Core/Src/tmag5170_ex.c ****     }
 4951              		.loc 1 1564 17 is_stmt 0 view .LVU1284
 4952 0018 022C     		cmp	r4, #2
 4953 001a 0ED0     		beq	.L378
1562:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 25; // If examined bits equal 01b, range is set to 25 mT (
 4954              		.loc 1 1562 15 view .LVU1285
 4955 001c 3220     		movs	r0, #50
 4956              	.LVL464:
 4957              	.L374:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 145


1566:Core/Src/tmag5170_ex.c **** }
 4958              		.loc 1 1566 5 is_stmt 1 view .LVU1286
1567:Core/Src/tmag5170_ex.c **** 
 4959              		.loc 1 1567 1 is_stmt 0 view .LVU1287
 4960 001e 10BD     		pop	{r4, pc}
 4961              	.LVL465:
 4962              	.L380:
1555:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4963              		.loc 1 1555 9 is_stmt 1 view .LVU1288
1556:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4964              		.loc 1 1556 9 view .LVU1289
1556:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4965              		.loc 1 1556 12 is_stmt 0 view .LVU1290
 4966 0020 012C     		cmp	r4, #1
 4967 0022 03D0     		beq	.L375
1557:Core/Src/tmag5170_ex.c ****     }
 4968              		.loc 1 1557 14 is_stmt 1 view .LVU1291
1557:Core/Src/tmag5170_ex.c ****     }
 4969              		.loc 1 1557 17 is_stmt 0 view .LVU1292
 4970 0024 022C     		cmp	r4, #2
 4971 0026 03D0     		beq	.L376
1555:Core/Src/tmag5170_ex.c ****         if ( config == 0x0001  ) range = 75; // If examined bits equal 01b, range is set to 75 mT (
 4972              		.loc 1 1555 15 view .LVU1293
 4973 0028 9620     		movs	r0, #150
 4974 002a F8E7     		b	.L374
 4975              	.L375:
1556:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 300; // If examined bits equal 10b, range is set to 30
 4976              		.loc 1 1556 40 view .LVU1294
 4977 002c 4B20     		movs	r0, #75
 4978 002e F6E7     		b	.L374
 4979              	.L376:
1557:Core/Src/tmag5170_ex.c ****     }
 4980              		.loc 1 1557 44 view .LVU1295
 4981 0030 4FF49670 		mov	r0, #300
 4982 0034 F3E7     		b	.L374
 4983              	.LVL466:
 4984              	.L377:
1563:Core/Src/tmag5170_ex.c ****         else if ( config == 0x0002 ) range = 100; // If examined bits equal 10b, range is set to 10
 4985              		.loc 1 1563 40 view .LVU1296
 4986 0036 1920     		movs	r0, #25
 4987 0038 F1E7     		b	.L374
 4988              	.L378:
1564:Core/Src/tmag5170_ex.c ****     }
 4989              		.loc 1 1564 44 view .LVU1297
 4990 003a 6420     		movs	r0, #100
 4991 003c EFE7     		b	.L374
 4992              		.cfi_endproc
 4993              	.LFE56:
 4995              		.section	.text.getMeasurementNrmlZ,"ax",%progbits
 4996              		.align	1
 4997              		.global	getMeasurementNrmlZ
 4998              		.syntax unified
 4999              		.thumb
 5000              		.thumb_func
 5002              	getMeasurementNrmlZ:
 5003              	.LFB49:
1373:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 146


 5004              		.loc 1 1373 1 is_stmt 1 view -0
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 0
 5007              		@ frame_needed = 0, uses_anonymous_args = 0
 5008 0000 08B5     		push	{r3, lr}
 5009              	.LCFI105:
 5010              		.cfi_def_cfa_offset 8
 5011              		.cfi_offset 3, -8
 5012              		.cfi_offset 14, -4
 5013 0002 2DED028B 		vpush.64	{d8}
 5014              	.LCFI106:
 5015              		.cfi_def_cfa_offset 16
 5016              		.cfi_offset 80, -16
 5017              		.cfi_offset 81, -12
1375:Core/Src/tmag5170_ex.c ****     int16_t data = getZresult(); // separate variable used to cast to a signed int
 5018              		.loc 1 1375 5 view .LVU1299
1375:Core/Src/tmag5170_ex.c ****     int16_t data = getZresult(); // separate variable used to cast to a signed int
 5019              		.loc 1 1375 22 is_stmt 0 view .LVU1300
 5020 0006 FFF7FEFF 		bl	getZrange
 5021              	.LVL467:
 5022 000a 08EE100A 		vmov	s16, r0	@ int
 5023              	.LVL468:
1376:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 5024              		.loc 1 1376 5 is_stmt 1 view .LVU1301
1376:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 5025              		.loc 1 1376 20 is_stmt 0 view .LVU1302
 5026 000e FFF7FEFF 		bl	getZresult
 5027              	.LVL469:
1376:Core/Src/tmag5170_ex.c ****                                          // for the float cast to work correctly
 5028              		.loc 1 1376 13 view .LVU1303
 5029 0012 03B2     		sxth	r3, r0
 5030 0014 07EE903A 		vmov	s15, r3	@ int
 5031              	.LVL470:
1379:Core/Src/tmag5170_ex.c **** }
 5032              		.loc 1 1379 5 is_stmt 1 view .LVU1304
1379:Core/Src/tmag5170_ex.c **** }
 5033              		.loc 1 1379 14 is_stmt 0 view .LVU1305
 5034 0018 F8EEE77A 		vcvt.f32.s32	s15, s15
 5035              	.LVL471:
1379:Core/Src/tmag5170_ex.c **** }
 5036              		.loc 1 1379 28 view .LVU1306
 5037 001c 9FED050A 		vldr.32	s0, .L383
 5038 0020 67EE807A 		vmul.f32	s15, s15, s0
1379:Core/Src/tmag5170_ex.c **** }
 5039              		.loc 1 1379 37 view .LVU1307
 5040 0024 B8EEC80A 		vcvt.f32.s32	s0, s16
1380:Core/Src/tmag5170_ex.c **** 
 5041              		.loc 1 1380 1 view .LVU1308
 5042 0028 20EE270A 		vmul.f32	s0, s0, s15
 5043 002c BDEC028B 		vldm	sp!, {d8}
 5044              	.LCFI107:
 5045              		.cfi_restore 80
 5046              		.cfi_restore 81
 5047              		.cfi_def_cfa_offset 8
 5048              	.LVL472:
1380:Core/Src/tmag5170_ex.c **** 
 5049              		.loc 1 1380 1 view .LVU1309
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 147


 5050 0030 08BD     		pop	{r3, pc}
 5051              	.LVL473:
 5052              	.L384:
1380:Core/Src/tmag5170_ex.c **** 
 5053              		.loc 1 1380 1 view .LVU1310
 5054 0032 00BF     		.align	2
 5055              	.L383:
 5056 0034 00000038 		.word	939524096
 5057              		.cfi_endproc
 5058              	.LFE49:
 5060              		.global	__aeabi_d2iz
 5061              		.section	.text.setMagOffsetInmT,"ax",%progbits
 5062              		.align	1
 5063              		.global	setMagOffsetInmT
 5064              		.syntax unified
 5065              		.thumb
 5066              		.thumb_func
 5068              	setMagOffsetInmT:
 5069              	.LVL474:
 5070              	.LFB61:
1690:Core/Src/tmag5170_ex.c **** 
 5071              		.loc 1 1690 1 is_stmt 1 view -0
 5072              		.cfi_startproc
 5073              		@ args = 0, pretend = 0, frame = 8
 5074              		@ frame_needed = 0, uses_anonymous_args = 0
1690:Core/Src/tmag5170_ex.c **** 
 5075              		.loc 1 1690 1 is_stmt 0 view .LVU1312
 5076 0000 30B5     		push	{r4, r5, lr}
 5077              	.LCFI108:
 5078              		.cfi_def_cfa_offset 12
 5079              		.cfi_offset 4, -12
 5080              		.cfi_offset 5, -8
 5081              		.cfi_offset 14, -4
 5082 0002 2DED048B 		vpush.64	{d8, d9}
 5083              	.LCFI109:
 5084              		.cfi_def_cfa_offset 28
 5085              		.cfi_offset 80, -28
 5086              		.cfi_offset 81, -24
 5087              		.cfi_offset 82, -20
 5088              		.cfi_offset 83, -16
 5089 0006 83B0     		sub	sp, sp, #12
 5090              	.LCFI110:
 5091              		.cfi_def_cfa_offset 40
 5092 0008 0446     		mov	r4, r0
 5093 000a F0EE408A 		vmov.f32	s17, s0
 5094 000e B0EE608A 		vmov.f32	s16, s1
1692:Core/Src/tmag5170_ex.c ****     uint16_t delta2_range = 0;
 5095              		.loc 1 1692 5 is_stmt 1 view .LVU1313
 5096              	.LVL475:
1693:Core/Src/tmag5170_ex.c ****     switch ( offset_select )
 5097              		.loc 1 1693 5 view .LVU1314
1694:Core/Src/tmag5170_ex.c ****     {
 5098              		.loc 1 1694 5 view .LVU1315
 5099 0012 0228     		cmp	r0, #2
 5100 0014 0BD0     		beq	.L386
 5101 0016 0328     		cmp	r0, #3
 5102 0018 0DD0     		beq	.L387
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 148


 5103 001a 0128     		cmp	r0, #1
 5104 001c 03D0     		beq	.L391
 5105 001e 0023     		movs	r3, #0
 5106 0020 0093     		str	r3, [sp]
 5107 0022 0193     		str	r3, [sp, #4]
 5108 0024 0DE0     		b	.L388
 5109              	.L391:
1697:Core/Src/tmag5170_ex.c ****             delta2_range = getYrange();
 5110              		.loc 1 1697 13 view .LVU1316
1697:Core/Src/tmag5170_ex.c ****             delta2_range = getYrange();
 5111              		.loc 1 1697 28 is_stmt 0 view .LVU1317
 5112 0026 FFF7FEFF 		bl	getXrange
 5113              	.LVL476:
1698:Core/Src/tmag5170_ex.c ****         case 0x02 :
 5114              		.loc 1 1698 13 is_stmt 1 view .LVU1318
1698:Core/Src/tmag5170_ex.c ****         case 0x02 :
 5115              		.loc 1 1698 28 is_stmt 0 view .LVU1319
 5116 002a FFF7FEFF 		bl	getYrange
 5117              	.LVL477:
 5118              	.L386:
1700:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
 5119              		.loc 1 1700 13 is_stmt 1 view .LVU1320
1700:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
 5120              		.loc 1 1700 28 is_stmt 0 view .LVU1321
 5121 002e FFF7FEFF 		bl	getYrange
 5122              	.LVL478:
1701:Core/Src/tmag5170_ex.c ****         case 0x03 :
 5123              		.loc 1 1701 13 is_stmt 1 view .LVU1322
1701:Core/Src/tmag5170_ex.c ****         case 0x03 :
 5124              		.loc 1 1701 28 is_stmt 0 view .LVU1323
 5125 0032 FFF7FEFF 		bl	getZrange
 5126              	.LVL479:
 5127              	.L387:
1703:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
 5128              		.loc 1 1703 13 is_stmt 1 view .LVU1324
1703:Core/Src/tmag5170_ex.c ****             delta2_range = getZrange();
 5129              		.loc 1 1703 28 is_stmt 0 view .LVU1325
 5130 0036 FFF7FEFF 		bl	getXrange
 5131              	.LVL480:
 5132 003a 0190     		str	r0, [sp, #4]
 5133              	.LVL481:
1704:Core/Src/tmag5170_ex.c ****     }
 5134              		.loc 1 1704 13 is_stmt 1 view .LVU1326
1704:Core/Src/tmag5170_ex.c ****     }
 5135              		.loc 1 1704 28 is_stmt 0 view .LVU1327
 5136 003c FFF7FEFF 		bl	getZrange
 5137              	.LVL482:
 5138 0040 0090     		str	r0, [sp]
 5139              	.LVL483:
 5140              	.L388:
1710:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
 5141              		.loc 1 1710 5 is_stmt 1 view .LVU1328
1710:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
 5142              		.loc 1 1710 50 is_stmt 0 view .LVU1329
 5143 0042 9FED1D9A 		vldr.32	s18, .L392
 5144 0046 68EE898A 		vmul.f32	s17, s17, s18
 5145              	.LVL484:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 149


1710:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
 5146              		.loc 1 1710 58 view .LVU1330
 5147 004a DDED017A 		vldr.32	s15, [sp, #4]	@ int
 5148 004e F8EEE77A 		vcvt.f32.s32	s15, s15
1710:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
 5149              		.loc 1 1710 28 view .LVU1331
 5150 0052 C8EEA77A 		vdiv.f32	s15, s17, s15
 5151 0056 17EE900A 		vmov	r0, s15
 5152 005a FFF7FEFF 		bl	__aeabi_f2d
 5153              	.LVL485:
 5154 005e 41EC100B 		vmov	d0, r0, r1
 5155 0062 FFF7FEFF 		bl	round
 5156              	.LVL486:
 5157 0066 51EC100B 		vmov	r0, r1, d0
1710:Core/Src/tmag5170_ex.c ****     int8_t offset2_value = round( (offset2_delta * 2048) / delta2_range );
 5158              		.loc 1 1710 12 view .LVU1332
 5159 006a FFF7FEFF 		bl	__aeabi_d2iz
 5160              	.LVL487:
 5161 006e 45B2     		sxtb	r5, r0
 5162              	.LVL488:
1711:Core/Src/tmag5170_ex.c **** 
 5163              		.loc 1 1711 5 is_stmt 1 view .LVU1333
1711:Core/Src/tmag5170_ex.c **** 
 5164              		.loc 1 1711 50 is_stmt 0 view .LVU1334
 5165 0070 28EE098A 		vmul.f32	s16, s16, s18
 5166              	.LVL489:
1711:Core/Src/tmag5170_ex.c **** 
 5167              		.loc 1 1711 58 view .LVU1335
 5168 0074 DDED007A 		vldr.32	s15, [sp]	@ int
 5169 0078 F8EEE77A 		vcvt.f32.s32	s15, s15
1711:Core/Src/tmag5170_ex.c **** 
 5170              		.loc 1 1711 28 view .LVU1336
 5171 007c C8EE277A 		vdiv.f32	s15, s16, s15
 5172 0080 17EE900A 		vmov	r0, s15
 5173 0084 FFF7FEFF 		bl	__aeabi_f2d
 5174              	.LVL490:
 5175 0088 41EC100B 		vmov	d0, r0, r1
 5176 008c FFF7FEFF 		bl	round
 5177              	.LVL491:
 5178 0090 51EC100B 		vmov	r0, r1, d0
1711:Core/Src/tmag5170_ex.c **** 
 5179              		.loc 1 1711 12 view .LVU1337
 5180 0094 FFF7FEFF 		bl	__aeabi_d2iz
 5181              	.LVL492:
1713:Core/Src/tmag5170_ex.c ****     offset1_bits = (( (uint8_t) offset1_value ) & 0x80) >> 1; // shift signing bit to 7th LSB
 5182              		.loc 1 1713 5 is_stmt 1 view .LVU1338
1714:Core/Src/tmag5170_ex.c ****     uint8_t offset2_bits = ( (uint8_t) offset2_value ) & 0x3F ;
 5183              		.loc 1 1714 5 view .LVU1339
1714:Core/Src/tmag5170_ex.c ****     uint8_t offset2_bits = ( (uint8_t) offset2_value ) & 0x3F ;
 5184              		.loc 1 1714 57 is_stmt 0 view .LVU1340
 5185 0098 C5F34601 		ubfx	r1, r5, #1, #7
 5186              	.LVL493:
1715:Core/Src/tmag5170_ex.c ****     offset2_bits = (( (uint8_t) offset2_value ) & 0x80) >> 1;
 5187              		.loc 1 1715 5 is_stmt 1 view .LVU1341
1716:Core/Src/tmag5170_ex.c **** 
 5188              		.loc 1 1716 5 view .LVU1342
1716:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 150


 5189              		.loc 1 1716 57 is_stmt 0 view .LVU1343
 5190 009c C0F34602 		ubfx	r2, r0, #1, #7
 5191              	.LVL494:
1718:Core/Src/tmag5170_ex.c **** }
 5192              		.loc 1 1718 5 is_stmt 1 view .LVU1344
 5193 00a0 02F04002 		and	r2, r2, #64
 5194              	.LVL495:
1718:Core/Src/tmag5170_ex.c **** }
 5195              		.loc 1 1718 5 is_stmt 0 view .LVU1345
 5196 00a4 01F04001 		and	r1, r1, #64
 5197              	.LVL496:
1718:Core/Src/tmag5170_ex.c **** }
 5198              		.loc 1 1718 5 view .LVU1346
 5199 00a8 2046     		mov	r0, r4
 5200              	.LVL497:
1718:Core/Src/tmag5170_ex.c **** }
 5201              		.loc 1 1718 5 view .LVU1347
 5202 00aa FFF7FEFF 		bl	setMagOffsetIn7Bit
 5203              	.LVL498:
1719:Core/Src/tmag5170_ex.c **** 
 5204              		.loc 1 1719 1 view .LVU1348
 5205 00ae 03B0     		add	sp, sp, #12
 5206              	.LCFI111:
 5207              		.cfi_def_cfa_offset 28
 5208              	.LVL499:
1719:Core/Src/tmag5170_ex.c **** 
 5209              		.loc 1 1719 1 view .LVU1349
 5210              		@ sp needed
 5211 00b0 BDEC048B 		vldm	sp!, {d8-d9}
 5212              	.LCFI112:
 5213              		.cfi_restore 82
 5214              		.cfi_restore 83
 5215              		.cfi_restore 80
 5216              		.cfi_restore 81
 5217              		.cfi_def_cfa_offset 12
 5218 00b4 30BD     		pop	{r4, r5, pc}
 5219              	.LVL500:
 5220              	.L393:
1719:Core/Src/tmag5170_ex.c **** 
 5221              		.loc 1 1719 1 view .LVU1350
 5222 00b6 00BF     		.align	2
 5223              	.L392:
 5224 00b8 00000045 		.word	1157627904
 5225              		.cfi_endproc
 5226              	.LFE61:
 5228              		.section	.text.getMagMeasurementsNrml,"ax",%progbits
 5229              		.align	1
 5230              		.global	getMagMeasurementsNrml
 5231              		.syntax unified
 5232              		.thumb
 5233              		.thumb_func
 5235              	getMagMeasurementsNrml:
 5236              	.LVL501:
 5237              	.LFB53:
1454:Core/Src/tmag5170_ex.c **** 
 5238              		.loc 1 1454 1 is_stmt 1 view -0
 5239              		.cfi_startproc
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 151


 5240              		@ args = 0, pretend = 0, frame = 8
 5241              		@ frame_needed = 0, uses_anonymous_args = 0
1454:Core/Src/tmag5170_ex.c **** 
 5242              		.loc 1 1454 1 is_stmt 0 view .LVU1352
 5243 0000 30B5     		push	{r4, r5, lr}
 5244              	.LCFI113:
 5245              		.cfi_def_cfa_offset 12
 5246              		.cfi_offset 4, -12
 5247              		.cfi_offset 5, -8
 5248              		.cfi_offset 14, -4
 5249 0002 83B0     		sub	sp, sp, #12
 5250              	.LCFI114:
 5251              		.cfi_def_cfa_offset 24
 5252 0004 0546     		mov	r5, r0
1456:Core/Src/tmag5170_ex.c **** 
 5253              		.loc 1 1456 5 is_stmt 1 view .LVU1353
1459:Core/Src/tmag5170_ex.c ****     ranges[0] = getXrange();
 5254              		.loc 1 1459 5 view .LVU1354
1459:Core/Src/tmag5170_ex.c ****     ranges[0] = getXrange();
 5255              		.loc 1 1459 14 is_stmt 0 view .LVU1355
 5256 0006 1B4B     		ldr	r3, .L398
 5257 0008 93E80300 		ldm	r3, {r0, r1}
 5258              	.LVL502:
1459:Core/Src/tmag5170_ex.c ****     ranges[0] = getXrange();
 5259              		.loc 1 1459 14 view .LVU1356
 5260 000c 0090     		str	r0, [sp]
 5261 000e ADF80410 		strh	r1, [sp, #4]	@ movhi
1460:Core/Src/tmag5170_ex.c ****     ranges[1] = getYrange();
 5262              		.loc 1 1460 5 is_stmt 1 view .LVU1357
1460:Core/Src/tmag5170_ex.c ****     ranges[1] = getYrange();
 5263              		.loc 1 1460 17 is_stmt 0 view .LVU1358
 5264 0012 FFF7FEFF 		bl	getXrange
 5265              	.LVL503:
1460:Core/Src/tmag5170_ex.c ****     ranges[1] = getYrange();
 5266              		.loc 1 1460 15 view .LVU1359
 5267 0016 ADF80000 		strh	r0, [sp]	@ movhi
1461:Core/Src/tmag5170_ex.c ****     ranges[2] = getZrange();
 5268              		.loc 1 1461 5 is_stmt 1 view .LVU1360
1461:Core/Src/tmag5170_ex.c ****     ranges[2] = getZrange();
 5269              		.loc 1 1461 17 is_stmt 0 view .LVU1361
 5270 001a FFF7FEFF 		bl	getYrange
 5271              	.LVL504:
1461:Core/Src/tmag5170_ex.c ****     ranges[2] = getZrange();
 5272              		.loc 1 1461 15 view .LVU1362
 5273 001e ADF80200 		strh	r0, [sp, #2]	@ movhi
1462:Core/Src/tmag5170_ex.c **** 
 5274              		.loc 1 1462 5 is_stmt 1 view .LVU1363
1462:Core/Src/tmag5170_ex.c **** 
 5275              		.loc 1 1462 17 is_stmt 0 view .LVU1364
 5276 0022 FFF7FEFF 		bl	getZrange
 5277              	.LVL505:
1462:Core/Src/tmag5170_ex.c **** 
 5278              		.loc 1 1462 15 view .LVU1365
 5279 0026 ADF80400 		strh	r0, [sp, #4]	@ movhi
1464:Core/Src/tmag5170_ex.c **** 
 5280              		.loc 1 1464 5 is_stmt 1 view .LVU1366
1466:Core/Src/tmag5170_ex.c ****     {
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 152


 5281              		.loc 1 1466 5 view .LVU1367
 5282              	.LVL506:
1466:Core/Src/tmag5170_ex.c ****     {
 5283              		.loc 1 1466 11 is_stmt 0 view .LVU1368
 5284 002a 0024     		movs	r4, #0
1466:Core/Src/tmag5170_ex.c ****     {
 5285              		.loc 1 1466 5 view .LVU1369
 5286 002c 1EE0     		b	.L395
 5287              	.LVL507:
 5288              	.L396:
1468:Core/Src/tmag5170_ex.c ****         meas_arr[i] = (((float) data) / 32768) * ranges[i];
 5289              		.loc 1 1468 9 is_stmt 1 discriminator 3 view .LVU1370
1468:Core/Src/tmag5170_ex.c ****         meas_arr[i] = (((float) data) / 32768) * ranges[i];
 5290              		.loc 1 1468 16 is_stmt 0 discriminator 3 view .LVU1371
 5291 002e 04F10900 		add	r0, r4, #9
 5292 0032 C0B2     		uxtb	r0, r0
 5293 0034 FFF7FEFF 		bl	normalReadRegister
 5294              	.LVL508:
1468:Core/Src/tmag5170_ex.c ****         meas_arr[i] = (((float) data) / 32768) * ranges[i];
 5295              		.loc 1 1468 14 discriminator 3 view .LVU1372
 5296 0038 03B2     		sxth	r3, r0
 5297 003a 07EE903A 		vmov	s15, r3	@ int
 5298              	.LVL509:
1469:Core/Src/tmag5170_ex.c ****     }
 5299              		.loc 1 1469 9 is_stmt 1 discriminator 3 view .LVU1373
1469:Core/Src/tmag5170_ex.c ****     }
 5300              		.loc 1 1469 25 is_stmt 0 discriminator 3 view .LVU1374
 5301 003e F8EEE77A 		vcvt.f32.s32	s15, s15
 5302              	.LVL510:
1469:Core/Src/tmag5170_ex.c ****     }
 5303              		.loc 1 1469 39 discriminator 3 view .LVU1375
 5304 0042 9FED0D7A 		vldr.32	s14, .L398+4
 5305 0046 67EE877A 		vmul.f32	s15, s15, s14
1469:Core/Src/tmag5170_ex.c ****     }
 5306              		.loc 1 1469 56 discriminator 3 view .LVU1376
 5307 004a 02AB     		add	r3, sp, #8
 5308              	.LVL511:
1469:Core/Src/tmag5170_ex.c ****     }
 5309              		.loc 1 1469 56 discriminator 3 view .LVU1377
 5310 004c 03EB4403 		add	r3, r3, r4, lsl #1
 5311 0050 33F8083C 		ldrh	r3, [r3, #-8]
 5312 0054 07EE103A 		vmov	s14, r3	@ int
1469:Core/Src/tmag5170_ex.c ****     }
 5313              		.loc 1 1469 17 discriminator 3 view .LVU1378
 5314 0058 05EB8403 		add	r3, r5, r4, lsl #2
1469:Core/Src/tmag5170_ex.c ****     }
 5315              		.loc 1 1469 48 discriminator 3 view .LVU1379
 5316 005c B8EEC77A 		vcvt.f32.s32	s14, s14
 5317 0060 67EE277A 		vmul.f32	s15, s14, s15
1469:Core/Src/tmag5170_ex.c ****     }
 5318              		.loc 1 1469 21 discriminator 3 view .LVU1380
 5319 0064 C3ED007A 		vstr.32	s15, [r3]
1466:Core/Src/tmag5170_ex.c ****     {
 5320              		.loc 1 1466 20 is_stmt 1 discriminator 3 view .LVU1381
 5321 0068 0134     		adds	r4, r4, #1
 5322              	.LVL512:
1466:Core/Src/tmag5170_ex.c ****     {
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 153


 5323              		.loc 1 1466 20 is_stmt 0 discriminator 3 view .LVU1382
 5324 006a E4B2     		uxtb	r4, r4
 5325              	.LVL513:
 5326              	.L395:
1466:Core/Src/tmag5170_ex.c ****     {
 5327              		.loc 1 1466 15 is_stmt 1 discriminator 1 view .LVU1383
1466:Core/Src/tmag5170_ex.c ****     {
 5328              		.loc 1 1466 5 is_stmt 0 discriminator 1 view .LVU1384
 5329 006c 022C     		cmp	r4, #2
 5330 006e DED9     		bls	.L396
1471:Core/Src/tmag5170_ex.c **** 
 5331              		.loc 1 1471 1 view .LVU1385
 5332 0070 03B0     		add	sp, sp, #12
 5333              	.LCFI115:
 5334              		.cfi_def_cfa_offset 12
 5335              		@ sp needed
 5336 0072 30BD     		pop	{r4, r5, pc}
 5337              	.LVL514:
 5338              	.L399:
1471:Core/Src/tmag5170_ex.c **** 
 5339              		.loc 1 1471 1 view .LVU1386
 5340              		.align	2
 5341              	.L398:
 5342 0074 00000000 		.word	.LANCHOR7
 5343 0078 00000038 		.word	939524096
 5344              		.cfi_endproc
 5345              	.LFE53:
 5347              		.section	.text.isCRCenabled,"ax",%progbits
 5348              		.align	1
 5349              		.global	isCRCenabled
 5350              		.syntax unified
 5351              		.thumb
 5352              		.thumb_func
 5354              	isCRCenabled:
 5355              	.LFB59:
1614:Core/Src/tmag5170_ex.c ****     return ((normalReadRegister(TEST_CONFIG_ADDRESS) & TEST_CONFIG_CRC_DIS_MASK) >> 2) == 0;
 5356              		.loc 1 1614 1 is_stmt 1 view -0
 5357              		.cfi_startproc
 5358              		@ args = 0, pretend = 0, frame = 0
 5359              		@ frame_needed = 0, uses_anonymous_args = 0
 5360 0000 08B5     		push	{r3, lr}
 5361              	.LCFI116:
 5362              		.cfi_def_cfa_offset 8
 5363              		.cfi_offset 3, -8
 5364              		.cfi_offset 14, -4
1615:Core/Src/tmag5170_ex.c **** }
 5365              		.loc 1 1615 5 view .LVU1388
1615:Core/Src/tmag5170_ex.c **** }
 5366              		.loc 1 1615 14 is_stmt 0 view .LVU1389
 5367 0002 0F20     		movs	r0, #15
 5368 0004 FFF7FEFF 		bl	normalReadRegister
 5369              	.LVL515:
1615:Core/Src/tmag5170_ex.c **** }
 5370              		.loc 1 1615 88 view .LVU1390
 5371 0008 8008     		lsrs	r0, r0, #2
 5372 000a 80F00100 		eor	r0, r0, #1
1616:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 154


 5373              		.loc 1 1616 1 view .LVU1391
 5374 000e 00F00100 		and	r0, r0, #1
 5375 0012 08BD     		pop	{r3, pc}
 5376              		.cfi_endproc
 5377              	.LFE59:
 5379              		.section	.text.normalReadRegisterWithCMD0,"ax",%progbits
 5380              		.align	1
 5381              		.global	normalReadRegisterWithCMD0
 5382              		.syntax unified
 5383              		.thumb
 5384              		.thumb_func
 5386              	normalReadRegisterWithCMD0:
 5387              	.LVL516:
 5388              	.LFB10:
 426:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 5389              		.loc 1 426 1 is_stmt 1 view -0
 5390              		.cfi_startproc
 5391              		@ args = 0, pretend = 0, frame = 8
 5392              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 5393              		.loc 1 426 1 is_stmt 0 view .LVU1393
 5394 0000 00B5     		push	{lr}
 5395              	.LCFI117:
 5396              		.cfi_def_cfa_offset 4
 5397              		.cfi_offset 14, -4
 5398 0002 83B0     		sub	sp, sp, #12
 5399              	.LCFI118:
 5400              		.cfi_def_cfa_offset 16
 5401 0004 0146     		mov	r1, r0
 427:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x01 );
 5402              		.loc 1 427 5 is_stmt 1 view .LVU1394
 427:Core/Src/tmag5170_ex.c ****     normalRead( output, address, 0x01 );
 5403              		.loc 1 427 14 is_stmt 0 view .LVU1395
 5404 0006 0023     		movs	r3, #0
 5405 0008 0193     		str	r3, [sp, #4]
 428:Core/Src/tmag5170_ex.c ****     return output[0];
 5406              		.loc 1 428 5 is_stmt 1 view .LVU1396
 5407 000a 0122     		movs	r2, #1
 5408 000c 01A8     		add	r0, sp, #4
 5409              	.LVL517:
 428:Core/Src/tmag5170_ex.c ****     return output[0];
 5410              		.loc 1 428 5 is_stmt 0 view .LVU1397
 5411 000e FFF7FEFF 		bl	normalRead
 5412              	.LVL518:
 429:Core/Src/tmag5170_ex.c **** }
 5413              		.loc 1 429 5 is_stmt 1 view .LVU1398
 430:Core/Src/tmag5170_ex.c **** 
 5414              		.loc 1 430 1 is_stmt 0 view .LVU1399
 5415 0012 BDF80400 		ldrh	r0, [sp, #4]
 5416 0016 03B0     		add	sp, sp, #12
 5417              	.LCFI119:
 5418              		.cfi_def_cfa_offset 4
 5419              		@ sp needed
 5420 0018 5DF804FB 		ldr	pc, [sp], #4
 5421              		.cfi_endproc
 5422              	.LFE10:
 5424              		.section	.text.normalReadSTAT,"ax",%progbits
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 155


 5425              		.align	1
 5426              		.global	normalReadSTAT
 5427              		.syntax unified
 5428              		.thumb
 5429              		.thumb_func
 5431              	normalReadSTAT:
 5432              	.LVL519:
 5433              	.LFB11:
 445:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 5434              		.loc 1 445 1 is_stmt 1 view -0
 5435              		.cfi_startproc
 5436              		@ args = 0, pretend = 0, frame = 8
 5437              		@ frame_needed = 0, uses_anonymous_args = 0
 445:Core/Src/tmag5170_ex.c ****     uint16_t output[2] = { 0 };
 5438              		.loc 1 445 1 is_stmt 0 view .LVU1401
 5439 0000 10B5     		push	{r4, lr}
 5440              	.LCFI120:
 5441              		.cfi_def_cfa_offset 8
 5442              		.cfi_offset 4, -8
 5443              		.cfi_offset 14, -4
 5444 0002 82B0     		sub	sp, sp, #8
 5445              	.LCFI121:
 5446              		.cfi_def_cfa_offset 16
 5447 0004 0446     		mov	r4, r0
 446:Core/Src/tmag5170_ex.c ****     normalRead( output, DEVICE_CONFIG_ADDRESS, cmd_bits );
 5448              		.loc 1 446 5 is_stmt 1 view .LVU1402
 446:Core/Src/tmag5170_ex.c ****     normalRead( output, DEVICE_CONFIG_ADDRESS, cmd_bits );
 5449              		.loc 1 446 14 is_stmt 0 view .LVU1403
 5450 0006 0021     		movs	r1, #0
 5451 0008 0191     		str	r1, [sp, #4]
 447:Core/Src/tmag5170_ex.c ****     return (cmd_bits << 12) | output[0];
 5452              		.loc 1 447 5 is_stmt 1 view .LVU1404
 5453 000a 0246     		mov	r2, r0
 5454 000c 01A8     		add	r0, sp, #4
 5455              	.LVL520:
 447:Core/Src/tmag5170_ex.c ****     return (cmd_bits << 12) | output[0];
 5456              		.loc 1 447 5 is_stmt 0 view .LVU1405
 5457 000e FFF7FEFF 		bl	normalRead
 5458              	.LVL521:
 448:Core/Src/tmag5170_ex.c ****     // returned bits: | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 
 5459              		.loc 1 448 5 is_stmt 1 view .LVU1406
 448:Core/Src/tmag5170_ex.c ****     // returned bits: | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 
 5460              		.loc 1 448 37 is_stmt 0 view .LVU1407
 5461 0012 BDF90400 		ldrsh	r0, [sp, #4]
 448:Core/Src/tmag5170_ex.c ****     // returned bits: | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 
 5462              		.loc 1 448 29 view .LVU1408
 5463 0016 40EA0430 		orr	r0, r0, r4, lsl #12
 451:Core/Src/tmag5170_ex.c **** 
 5464              		.loc 1 451 1 view .LVU1409
 5465 001a 80B2     		uxth	r0, r0
 5466 001c 02B0     		add	sp, sp, #8
 5467              	.LCFI122:
 5468              		.cfi_def_cfa_offset 8
 5469              		@ sp needed
 5470 001e 10BD     		pop	{r4, pc}
 5471              		.cfi_endproc
 5472              	.LFE11:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 156


 5474              		.section	.text.specialRead,"ax",%progbits
 5475              		.align	1
 5476              		.global	specialRead
 5477              		.syntax unified
 5478              		.thumb
 5479              		.thumb_func
 5481              	specialRead:
 5482              	.LVL522:
 5483              	.LFB12:
 470:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 5484              		.loc 1 470 1 is_stmt 1 view -0
 5485              		.cfi_startproc
 5486              		@ args = 0, pretend = 0, frame = 8
 5487              		@ frame_needed = 0, uses_anonymous_args = 0
 470:Core/Src/tmag5170_ex.c ****     // Build TX and RX byte arrays
 5488              		.loc 1 470 1 is_stmt 0 view .LVU1411
 5489 0000 30B5     		push	{r4, r5, lr}
 5490              	.LCFI123:
 5491              		.cfi_def_cfa_offset 12
 5492              		.cfi_offset 4, -12
 5493              		.cfi_offset 5, -8
 5494              		.cfi_offset 14, -4
 5495 0002 83B0     		sub	sp, sp, #12
 5496              	.LCFI124:
 5497              		.cfi_def_cfa_offset 24
 5498 0004 0446     		mov	r4, r0
 472:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 5499              		.loc 1 472 5 is_stmt 1 view .LVU1412
 472:Core/Src/tmag5170_ex.c ****     uint8_t dataRx[4] = { 0 };
 5500              		.loc 1 472 13 is_stmt 0 view .LVU1413
 5501 0006 0025     		movs	r5, #0
 5502 0008 0195     		str	r5, [sp, #4]
 473:Core/Src/tmag5170_ex.c **** 
 5503              		.loc 1 473 5 is_stmt 1 view .LVU1414
 473:Core/Src/tmag5170_ex.c **** 
 5504              		.loc 1 473 13 is_stmt 0 view .LVU1415
 5505 000a 0095     		str	r5, [sp]
 475:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 5506              		.loc 1 475 5 is_stmt 1 view .LVU1416
 475:Core/Src/tmag5170_ex.c ****     dataTx[1] = 0x00;
 5507              		.loc 1 475 15 is_stmt 0 view .LVU1417
 5508 000c 8023     		movs	r3, #128
 5509 000e 8DF80430 		strb	r3, [sp, #4]
 476:Core/Src/tmag5170_ex.c ****     dataTx[2] = 0x00;
 5510              		.loc 1 476 5 is_stmt 1 view .LVU1418
 477:Core/Src/tmag5170_ex.c ****     dataTx[3] = cmd_bits << 4;
 5511              		.loc 1 477 5 view .LVU1419
 478:Core/Src/tmag5170_ex.c **** 
 5512              		.loc 1 478 5 view .LVU1420
 478:Core/Src/tmag5170_ex.c **** 
 5513              		.loc 1 478 26 is_stmt 0 view .LVU1421
 5514 0012 0901     		lsls	r1, r1, #4
 5515              	.LVL523:
 478:Core/Src/tmag5170_ex.c **** 
 5516              		.loc 1 478 15 view .LVU1422
 5517 0014 8DF80710 		strb	r1, [sp, #7]
 480:Core/Src/tmag5170_ex.c **** 
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 157


 5518              		.loc 1 480 5 is_stmt 1 view .LVU1423
 5519 0018 6946     		mov	r1, sp
 5520 001a 01A8     		add	r0, sp, #4
 5521              	.LVL524:
 480:Core/Src/tmag5170_ex.c **** 
 5522              		.loc 1 480 5 is_stmt 0 view .LVU1424
 5523 001c FFF7FEFF 		bl	sendAndReceiveFrame
 5524              	.LVL525:
 483:Core/Src/tmag5170_ex.c ****     output[0] = ((dataRx[1] & 0x0F) << 8);
 5525              		.loc 1 483 5 is_stmt 1 view .LVU1425
 483:Core/Src/tmag5170_ex.c ****     output[0] = ((dataRx[1] & 0x0F) << 8);
 5526              		.loc 1 483 27 is_stmt 0 view .LVU1426
 5527 0020 6580     		strh	r5, [r4, #2]	@ movhi
 483:Core/Src/tmag5170_ex.c ****     output[0] = ((dataRx[1] & 0x0F) << 8);
 5528              		.loc 1 483 15 view .LVU1427
 5529 0022 2580     		strh	r5, [r4]	@ movhi
 484:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[2] & 0xF0);
 5530              		.loc 1 484 5 is_stmt 1 view .LVU1428
 484:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[2] & 0xF0);
 5531              		.loc 1 484 25 is_stmt 0 view .LVU1429
 5532 0024 9DF80120 		ldrb	r2, [sp, #1]	@ zero_extendqisi2
 484:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[2] & 0xF0);
 5533              		.loc 1 484 37 view .LVU1430
 5534 0028 1102     		lsls	r1, r2, #8
 5535 002a 01F47063 		and	r3, r1, #3840
 484:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[2] & 0xF0);
 5536              		.loc 1 484 15 view .LVU1431
 5537 002e 2380     		strh	r3, [r4]	@ movhi
 485:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[3] >> 4);
 5538              		.loc 1 485 5 is_stmt 1 view .LVU1432
 485:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[3] >> 4);
 5539              		.loc 1 485 25 is_stmt 0 view .LVU1433
 5540 0030 9DF80200 		ldrb	r0, [sp, #2]	@ zero_extendqisi2
 485:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[3] >> 4);
 5541              		.loc 1 485 29 view .LVU1434
 5542 0034 00F0F001 		and	r1, r0, #240
 485:Core/Src/tmag5170_ex.c ****     output[0] |= (dataRx[3] >> 4);
 5543              		.loc 1 485 15 view .LVU1435
 5544 0038 1943     		orrs	r1, r1, r3
 5545 003a 2180     		strh	r1, [r4]	@ movhi
 486:Core/Src/tmag5170_ex.c ****     output[1] = ((dataRx[0] & 0x0F) << 8);
 5546              		.loc 1 486 5 is_stmt 1 view .LVU1436
 486:Core/Src/tmag5170_ex.c ****     output[1] = ((dataRx[0] & 0x0F) << 8);
 5547              		.loc 1 486 25 is_stmt 0 view .LVU1437
 5548 003c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 486:Core/Src/tmag5170_ex.c ****     output[1] = ((dataRx[0] & 0x0F) << 8);
 5549              		.loc 1 486 15 view .LVU1438
 5550 0040 41EA1311 		orr	r1, r1, r3, lsr #4
 5551 0044 2180     		strh	r1, [r4]	@ movhi
 487:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[1] & 0xF0);
 5552              		.loc 1 487 5 is_stmt 1 view .LVU1439
 487:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[1] & 0xF0);
 5553              		.loc 1 487 25 is_stmt 0 view .LVU1440
 5554 0046 9DF80010 		ldrb	r1, [sp]	@ zero_extendqisi2
 487:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[1] & 0xF0);
 5555              		.loc 1 487 37 view .LVU1441
 5556 004a 0B02     		lsls	r3, r1, #8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 158


 5557 004c 03F47063 		and	r3, r3, #3840
 487:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[1] & 0xF0);
 5558              		.loc 1 487 15 view .LVU1442
 5559 0050 6380     		strh	r3, [r4, #2]	@ movhi
 488:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[2] & 0x0F);
 5560              		.loc 1 488 5 is_stmt 1 view .LVU1443
 488:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[2] & 0x0F);
 5561              		.loc 1 488 29 is_stmt 0 view .LVU1444
 5562 0052 02F0F002 		and	r2, r2, #240
 488:Core/Src/tmag5170_ex.c ****     output[1] |= (dataRx[2] & 0x0F);
 5563              		.loc 1 488 15 view .LVU1445
 5564 0056 1343     		orrs	r3, r3, r2
 5565 0058 6380     		strh	r3, [r4, #2]	@ movhi
 489:Core/Src/tmag5170_ex.c **** 
 5566              		.loc 1 489 5 is_stmt 1 view .LVU1446
 489:Core/Src/tmag5170_ex.c **** 
 5567              		.loc 1 489 29 is_stmt 0 view .LVU1447
 5568 005a 00F00F00 		and	r0, r0, #15
 489:Core/Src/tmag5170_ex.c **** 
 5569              		.loc 1 489 15 view .LVU1448
 5570 005e 0343     		orrs	r3, r3, r0
 5571 0060 6380     		strh	r3, [r4, #2]	@ movhi
 491:Core/Src/tmag5170_ex.c ****     output[2] = (dataRx[0] >> 4);
 5572              		.loc 1 491 5 is_stmt 1 view .LVU1449
 491:Core/Src/tmag5170_ex.c ****     output[2] = (dataRx[0] >> 4);
 5573              		.loc 1 491 15 is_stmt 0 view .LVU1450
 5574 0062 A580     		strh	r5, [r4, #4]	@ movhi
 492:Core/Src/tmag5170_ex.c **** }
 5575              		.loc 1 492 5 is_stmt 1 view .LVU1451
 492:Core/Src/tmag5170_ex.c **** }
 5576              		.loc 1 492 15 is_stmt 0 view .LVU1452
 5577 0064 0909     		lsrs	r1, r1, #4
 5578 0066 A180     		strh	r1, [r4, #4]	@ movhi
 493:Core/Src/tmag5170_ex.c **** 
 5579              		.loc 1 493 1 view .LVU1453
 5580 0068 03B0     		add	sp, sp, #12
 5581              	.LCFI125:
 5582              		.cfi_def_cfa_offset 12
 5583              		@ sp needed
 5584 006a 30BD     		pop	{r4, r5, pc}
 493:Core/Src/tmag5170_ex.c **** 
 5585              		.loc 1 493 1 view .LVU1454
 5586              		.cfi_endproc
 5587              	.LFE12:
 5589              		.section	.text.specialReadSTAT,"ax",%progbits
 5590              		.align	1
 5591              		.global	specialReadSTAT
 5592              		.syntax unified
 5593              		.thumb
 5594              		.thumb_func
 5596              	specialReadSTAT:
 5597              	.LVL526:
 5598              	.LFB13:
 507:Core/Src/tmag5170_ex.c ****     uint16_t output[3];
 5599              		.loc 1 507 1 is_stmt 1 view -0
 5600              		.cfi_startproc
 5601              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 159


 5602              		@ frame_needed = 0, uses_anonymous_args = 0
 507:Core/Src/tmag5170_ex.c ****     uint16_t output[3];
 5603              		.loc 1 507 1 is_stmt 0 view .LVU1456
 5604 0000 00B5     		push	{lr}
 5605              	.LCFI126:
 5606              		.cfi_def_cfa_offset 4
 5607              		.cfi_offset 14, -4
 5608 0002 83B0     		sub	sp, sp, #12
 5609              	.LCFI127:
 5610              		.cfi_def_cfa_offset 16
 5611 0004 0146     		mov	r1, r0
 508:Core/Src/tmag5170_ex.c ****     specialRead( output, cmd_bits );
 5612              		.loc 1 508 5 is_stmt 1 view .LVU1457
 509:Core/Src/tmag5170_ex.c ****     return output[2];
 5613              		.loc 1 509 5 view .LVU1458
 5614 0006 6846     		mov	r0, sp
 5615              	.LVL527:
 509:Core/Src/tmag5170_ex.c ****     return output[2];
 5616              		.loc 1 509 5 is_stmt 0 view .LVU1459
 5617 0008 FFF7FEFF 		bl	specialRead
 5618              	.LVL528:
 510:Core/Src/tmag5170_ex.c **** }
 5619              		.loc 1 510 5 is_stmt 1 view .LVU1460
 511:Core/Src/tmag5170_ex.c **** 
 5620              		.loc 1 511 1 is_stmt 0 view .LVU1461
 5621 000c BDF80400 		ldrh	r0, [sp, #4]
 5622 0010 03B0     		add	sp, sp, #12
 5623              	.LCFI128:
 5624              		.cfi_def_cfa_offset 4
 5625              		@ sp needed
 5626 0012 5DF804FB 		ldr	pc, [sp], #4
 5627              		.cfi_endproc
 5628              	.LFE13:
 5630              		.section	.text.getMeasurementsSpcl,"ax",%progbits
 5631              		.align	1
 5632              		.global	getMeasurementsSpcl
 5633              		.syntax unified
 5634              		.thumb
 5635              		.thumb_func
 5637              	getMeasurementsSpcl:
 5638              	.LVL529:
 5639              	.LFB65:
1836:Core/Src/tmag5170_ex.c ****     uint16_t output[3] = { 0 };
 5640              		.loc 1 1836 1 is_stmt 1 view -0
 5641              		.cfi_startproc
 5642              		@ args = 0, pretend = 0, frame = 8
 5643              		@ frame_needed = 0, uses_anonymous_args = 0
1836:Core/Src/tmag5170_ex.c ****     uint16_t output[3] = { 0 };
 5644              		.loc 1 1836 1 is_stmt 0 view .LVU1463
 5645 0000 10B5     		push	{r4, lr}
 5646              	.LCFI129:
 5647              		.cfi_def_cfa_offset 8
 5648              		.cfi_offset 4, -8
 5649              		.cfi_offset 14, -4
 5650 0002 2DED028B 		vpush.64	{d8}
 5651              	.LCFI130:
 5652              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 160


 5653              		.cfi_offset 80, -16
 5654              		.cfi_offset 81, -12
 5655 0006 82B0     		sub	sp, sp, #8
 5656              	.LCFI131:
 5657              		.cfi_def_cfa_offset 24
 5658 0008 0446     		mov	r4, r0
1837:Core/Src/tmag5170_ex.c ****     specialRead( output, 0x00 );
 5659              		.loc 1 1837 5 is_stmt 1 view .LVU1464
1837:Core/Src/tmag5170_ex.c ****     specialRead( output, 0x00 );
 5660              		.loc 1 1837 14 is_stmt 0 view .LVU1465
 5661 000a 0021     		movs	r1, #0
 5662 000c 0091     		str	r1, [sp]
 5663 000e ADF80410 		strh	r1, [sp, #4]	@ movhi
1838:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (float) DATA_TYPE_RESULTS;
 5664              		.loc 1 1838 5 is_stmt 1 view .LVU1466
 5665 0012 6846     		mov	r0, sp
 5666              	.LVL530:
1838:Core/Src/tmag5170_ex.c ****     meas_arr[2] = (float) DATA_TYPE_RESULTS;
 5667              		.loc 1 1838 5 is_stmt 0 view .LVU1467
 5668 0014 FFF7FEFF 		bl	specialRead
 5669              	.LVL531:
1839:Core/Src/tmag5170_ex.c **** 
 5670              		.loc 1 1839 5 is_stmt 1 view .LVU1468
1839:Core/Src/tmag5170_ex.c **** 
 5671              		.loc 1 1839 27 is_stmt 0 view .LVU1469
 5672 0018 BD4B     		ldr	r3, .L423
 5673 001a 1B88     		ldrh	r3, [r3]
 5674 001c 9B11     		asrs	r3, r3, #6
 5675 001e 23F00703 		bic	r3, r3, #7
1839:Core/Src/tmag5170_ex.c **** 
 5676              		.loc 1 1839 19 view .LVU1470
 5677 0022 07EE903A 		vmov	s15, r3	@ int
 5678 0026 F8EEE77A 		vcvt.f32.s32	s15, s15
1839:Core/Src/tmag5170_ex.c **** 
 5679              		.loc 1 1839 17 view .LVU1471
 5680 002a C4ED027A 		vstr.32	s15, [r4, #8]
1841:Core/Src/tmag5170_ex.c ****     {
 5681              		.loc 1 1841 5 is_stmt 1 view .LVU1472
1841:Core/Src/tmag5170_ex.c ****     {
 5682              		.loc 1 1841 8 is_stmt 0 view .LVU1473
 5683 002e 032B     		cmp	r3, #3
 5684 0030 23DC     		bgt	.L411
1843:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
 5685              		.loc 1 1843 9 is_stmt 1 view .LVU1474
1843:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
 5686              		.loc 1 1843 30 is_stmt 0 view .LVU1475
 5687 0032 BDF80020 		ldrh	r2, [sp]
1843:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
 5688              		.loc 1 1843 34 view .LVU1476
 5689 0036 D20A     		lsrs	r2, r2, #11
1843:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
 5690              		.loc 1 1843 41 view .LVU1477
 5691 0038 C2EB4252 		rsb	r2, r2, r2, lsl #21
 5692 003c D202     		lsls	r2, r2, #11
1843:Core/Src/tmag5170_ex.c ****         meas_arr[1] = (output[1] >> 11) * -2048;
 5693              		.loc 1 1843 21 view .LVU1478
 5694 003e 07EE902A 		vmov	s15, r2	@ int
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 161


 5695 0042 F8EEE77A 		vcvt.f32.s32	s15, s15
 5696 0046 C4ED007A 		vstr.32	s15, [r4]
1844:Core/Src/tmag5170_ex.c ****     }
 5697              		.loc 1 1844 9 is_stmt 1 view .LVU1479
1844:Core/Src/tmag5170_ex.c ****     }
 5698              		.loc 1 1844 30 is_stmt 0 view .LVU1480
 5699 004a BDF80220 		ldrh	r2, [sp, #2]
1844:Core/Src/tmag5170_ex.c ****     }
 5700              		.loc 1 1844 34 view .LVU1481
 5701 004e D20A     		lsrs	r2, r2, #11
1844:Core/Src/tmag5170_ex.c ****     }
 5702              		.loc 1 1844 41 view .LVU1482
 5703 0050 C2EB4252 		rsb	r2, r2, r2, lsl #21
 5704 0054 D202     		lsls	r2, r2, #11
1844:Core/Src/tmag5170_ex.c ****     }
 5705              		.loc 1 1844 21 view .LVU1483
 5706 0056 07EE902A 		vmov	s15, r2	@ int
 5707 005a F8EEE77A 		vcvt.f32.s32	s15, s15
 5708 005e C4ED017A 		vstr.32	s15, [r4, #4]
 5709              	.L412:
1852:Core/Src/tmag5170_ex.c ****     {
 5710              		.loc 1 1852 5 is_stmt 1 view .LVU1484
 5711 0062 013B     		subs	r3, r3, #1
 5712 0064 062B     		cmp	r3, #6
 5713 0066 65D8     		bhi	.L410
 5714 0068 DFE813F0 		tbh	[pc, r3, lsl #1]
 5715              	.L415:
 5716 006c 2E00     		.2byte	(.L421-.L415)/2
 5717 006e 6800     		.2byte	(.L420-.L415)/2
 5718 0070 9F00     		.2byte	(.L419-.L415)/2
 5719 0072 D600     		.2byte	(.L418-.L415)/2
 5720 0074 F300     		.2byte	(.L417-.L415)/2
 5721 0076 1001     		.2byte	(.L416-.L415)/2
 5722 0078 2D01     		.2byte	(.L414-.L415)/2
 5723              		.p2align 1
 5724              	.L411:
1846:Core/Src/tmag5170_ex.c ****     {
 5725              		.loc 1 1846 10 view .LVU1485
1846:Core/Src/tmag5170_ex.c ****     {
 5726              		.loc 1 1846 13 is_stmt 0 view .LVU1486
 5727 007a 062B     		cmp	r3, #6
 5728 007c F1DC     		bgt	.L412
1848:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
 5729              		.loc 1 1848 9 is_stmt 1 view .LVU1487
1848:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
 5730              		.loc 1 1848 30 is_stmt 0 view .LVU1488
 5731 007e BDF80020 		ldrh	r2, [sp]
1848:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
 5732              		.loc 1 1848 34 view .LVU1489
 5733 0082 D20A     		lsrs	r2, r2, #11
1848:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
 5734              		.loc 1 1848 41 view .LVU1490
 5735 0084 C2EB4252 		rsb	r2, r2, r2, lsl #21
 5736 0088 D202     		lsls	r2, r2, #11
1848:Core/Src/tmag5170_ex.c ****         meas_arr[1] = ECHAR_T_SENS_T0 + ( 16 * (((float) output[1]) - (ECHAR_T_ADC_T0/16)) / ECHAR_
 5737              		.loc 1 1848 21 view .LVU1491
 5738 008a 07EE902A 		vmov	s15, r2	@ int
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 162


 5739 008e F8EEE77A 		vcvt.f32.s32	s15, s15
 5740 0092 C4ED007A 		vstr.32	s15, [r4]
1849:Core/Src/tmag5170_ex.c ****     }
 5741              		.loc 1 1849 9 is_stmt 1 view .LVU1492
1849:Core/Src/tmag5170_ex.c ****     }
 5742              		.loc 1 1849 64 is_stmt 0 view .LVU1493
 5743 0096 BDF80220 		ldrh	r2, [sp, #2]
 5744 009a 07EE902A 		vmov	s15, r2	@ int
1849:Core/Src/tmag5170_ex.c ****     }
 5745              		.loc 1 1849 50 view .LVU1494
 5746 009e F8EE677A 		vcvt.f32.u32	s15, s15
1849:Core/Src/tmag5170_ex.c ****     }
 5747              		.loc 1 1849 69 view .LVU1495
 5748 00a2 9FED9C7A 		vldr.32	s14, .L423+4
 5749 00a6 77EEC77A 		vsub.f32	s15, s15, s14
1849:Core/Src/tmag5170_ex.c ****     }
 5750              		.loc 1 1849 46 view .LVU1496
 5751 00aa B3EE007A 		vmov.f32	s14, #1.6e+1
 5752 00ae 67EE877A 		vmul.f32	s15, s15, s14
1849:Core/Src/tmag5170_ex.c ****     }
 5753              		.loc 1 1849 92 view .LVU1497
 5754 00b2 DFED996A 		vldr.32	s13, .L423+8
 5755 00b6 87EEA67A 		vdiv.f32	s14, s15, s13
1849:Core/Src/tmag5170_ex.c ****     }
 5756              		.loc 1 1849 39 view .LVU1498
 5757 00ba F3EE097A 		vmov.f32	s15, #2.5e+1
 5758 00be 77EE277A 		vadd.f32	s15, s14, s15
1849:Core/Src/tmag5170_ex.c ****     }
 5759              		.loc 1 1849 21 view .LVU1499
 5760 00c2 C4ED017A 		vstr.32	s15, [r4, #4]
 5761 00c6 CCE7     		b	.L412
 5762              	.L421:
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5763              		.loc 1 1855 13 is_stmt 1 view .LVU1500
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5764              		.loc 1 1855 48 is_stmt 0 view .LVU1501
 5765 00c8 D4ED007A 		vldr.32	s15, [r4]
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5766              		.loc 1 1855 60 view .LVU1502
 5767 00cc BDF80030 		ldrh	r3, [sp]
 5768 00d0 08EE103A 		vmov	s16, r3	@ int
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5769              		.loc 1 1855 31 view .LVU1503
 5770 00d4 B8EEC88A 		vcvt.f32.s32	s16, s16
 5771 00d8 38EE278A 		vadd.f32	s16, s16, s15
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5772              		.loc 1 1855 66 view .LVU1504
 5773 00dc DFED8F8A 		vldr.32	s17, .L423+12
 5774 00e0 28EE288A 		vmul.f32	s16, s16, s17
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5775              		.loc 1 1855 76 view .LVU1505
 5776 00e4 FFF7FEFF 		bl	getXrange
 5777              	.LVL532:
 5778 00e8 07EE900A 		vmov	s15, r0	@ int
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5779              		.loc 1 1855 74 view .LVU1506
 5780 00ec F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 163


 5781 00f0 27EE888A 		vmul.f32	s16, s15, s16
1855:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5782              		.loc 1 1855 25 view .LVU1507
 5783 00f4 D4ED007A 		vldr.32	s15, [r4]
 5784 00f8 27EE888A 		vmul.f32	s16, s15, s16
 5785 00fc 84ED008A 		vstr.32	s16, [r4]
1856:Core/Src/tmag5170_ex.c ****             break;
 5786              		.loc 1 1856 13 is_stmt 1 view .LVU1508
1856:Core/Src/tmag5170_ex.c ****             break;
 5787              		.loc 1 1856 48 is_stmt 0 view .LVU1509
 5788 0100 D4ED017A 		vldr.32	s15, [r4, #4]
1856:Core/Src/tmag5170_ex.c ****             break;
 5789              		.loc 1 1856 60 view .LVU1510
 5790 0104 BDF80230 		ldrh	r3, [sp, #2]
 5791 0108 08EE103A 		vmov	s16, r3	@ int
1856:Core/Src/tmag5170_ex.c ****             break;
 5792              		.loc 1 1856 31 view .LVU1511
 5793 010c B8EEC88A 		vcvt.f32.s32	s16, s16
 5794 0110 38EE278A 		vadd.f32	s16, s16, s15
1856:Core/Src/tmag5170_ex.c ****             break;
 5795              		.loc 1 1856 66 view .LVU1512
 5796 0114 28EE288A 		vmul.f32	s16, s16, s17
1856:Core/Src/tmag5170_ex.c ****             break;
 5797              		.loc 1 1856 76 view .LVU1513
 5798 0118 FFF7FEFF 		bl	getYrange
 5799              	.LVL533:
 5800 011c 07EE900A 		vmov	s15, r0	@ int
1856:Core/Src/tmag5170_ex.c ****             break;
 5801              		.loc 1 1856 74 view .LVU1514
 5802 0120 F8EEE77A 		vcvt.f32.s32	s15, s15
 5803 0124 27EE888A 		vmul.f32	s16, s15, s16
1856:Core/Src/tmag5170_ex.c ****             break;
 5804              		.loc 1 1856 25 view .LVU1515
 5805 0128 D4ED017A 		vldr.32	s15, [r4, #4]
 5806 012c 27EE888A 		vmul.f32	s16, s15, s16
 5807 0130 84ED018A 		vstr.32	s16, [r4, #4]
1857:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_XZ :
 5808              		.loc 1 1857 13 is_stmt 1 view .LVU1516
 5809              	.L410:
1880:Core/Src/tmag5170_ex.c **** 
 5810              		.loc 1 1880 1 is_stmt 0 view .LVU1517
 5811 0134 02B0     		add	sp, sp, #8
 5812              	.LCFI132:
 5813              		.cfi_remember_state
 5814              		.cfi_def_cfa_offset 16
 5815              		@ sp needed
 5816 0136 BDEC028B 		vldm	sp!, {d8}
 5817              	.LCFI133:
 5818              		.cfi_restore 80
 5819              		.cfi_restore 81
 5820              		.cfi_def_cfa_offset 8
 5821 013a 10BD     		pop	{r4, pc}
 5822              	.LVL534:
 5823              	.L420:
 5824              	.LCFI134:
 5825              		.cfi_restore_state
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 164


 5826              		.loc 1 1859 13 is_stmt 1 view .LVU1518
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5827              		.loc 1 1859 48 is_stmt 0 view .LVU1519
 5828 013c D4ED007A 		vldr.32	s15, [r4]
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5829              		.loc 1 1859 60 view .LVU1520
 5830 0140 BDF80030 		ldrh	r3, [sp]
 5831 0144 08EE103A 		vmov	s16, r3	@ int
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5832              		.loc 1 1859 31 view .LVU1521
 5833 0148 B8EEC88A 		vcvt.f32.s32	s16, s16
 5834 014c 38EE278A 		vadd.f32	s16, s16, s15
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5835              		.loc 1 1859 66 view .LVU1522
 5836 0150 DFED728A 		vldr.32	s17, .L423+12
 5837 0154 28EE288A 		vmul.f32	s16, s16, s17
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5838              		.loc 1 1859 76 view .LVU1523
 5839 0158 FFF7FEFF 		bl	getXrange
 5840              	.LVL535:
 5841 015c 07EE900A 		vmov	s15, r0	@ int
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5842              		.loc 1 1859 74 view .LVU1524
 5843 0160 F8EEE77A 		vcvt.f32.s32	s15, s15
 5844 0164 27EE888A 		vmul.f32	s16, s15, s16
1859:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getZrange());
 5845              		.loc 1 1859 25 view .LVU1525
 5846 0168 D4ED007A 		vldr.32	s15, [r4]
 5847 016c 27EE888A 		vmul.f32	s16, s15, s16
 5848 0170 84ED008A 		vstr.32	s16, [r4]
1860:Core/Src/tmag5170_ex.c ****             break;
 5849              		.loc 1 1860 13 is_stmt 1 view .LVU1526
1860:Core/Src/tmag5170_ex.c ****             break;
 5850              		.loc 1 1860 48 is_stmt 0 view .LVU1527
 5851 0174 D4ED017A 		vldr.32	s15, [r4, #4]
1860:Core/Src/tmag5170_ex.c ****             break;
 5852              		.loc 1 1860 60 view .LVU1528
 5853 0178 BDF80230 		ldrh	r3, [sp, #2]
 5854 017c 08EE103A 		vmov	s16, r3	@ int
1860:Core/Src/tmag5170_ex.c ****             break;
 5855              		.loc 1 1860 31 view .LVU1529
 5856 0180 B8EEC88A 		vcvt.f32.s32	s16, s16
 5857 0184 38EE278A 		vadd.f32	s16, s16, s15
1860:Core/Src/tmag5170_ex.c ****             break;
 5858              		.loc 1 1860 66 view .LVU1530
 5859 0188 28EE288A 		vmul.f32	s16, s16, s17
1860:Core/Src/tmag5170_ex.c ****             break;
 5860              		.loc 1 1860 76 view .LVU1531
 5861 018c FFF7FEFF 		bl	getZrange
 5862              	.LVL536:
 5863 0190 07EE900A 		vmov	s15, r0	@ int
1860:Core/Src/tmag5170_ex.c ****             break;
 5864              		.loc 1 1860 74 view .LVU1532
 5865 0194 F8EEE77A 		vcvt.f32.s32	s15, s15
 5866 0198 27EE888A 		vmul.f32	s16, s15, s16
1860:Core/Src/tmag5170_ex.c ****             break;
 5867              		.loc 1 1860 25 view .LVU1533
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 165


 5868 019c D4ED017A 		vldr.32	s15, [r4, #4]
 5869 01a0 27EE888A 		vmul.f32	s16, s15, s16
 5870 01a4 84ED018A 		vstr.32	s16, [r4, #4]
1861:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_YZ :
 5871              		.loc 1 1861 13 is_stmt 1 view .LVU1534
 5872 01a8 C4E7     		b	.L410
 5873              	.L419:
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5874              		.loc 1 1863 13 view .LVU1535
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5875              		.loc 1 1863 48 is_stmt 0 view .LVU1536
 5876 01aa D4ED007A 		vldr.32	s15, [r4]
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5877              		.loc 1 1863 60 view .LVU1537
 5878 01ae BDF80030 		ldrh	r3, [sp]
 5879 01b2 08EE103A 		vmov	s16, r3	@ int
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5880              		.loc 1 1863 31 view .LVU1538
 5881 01b6 B8EEC88A 		vcvt.f32.s32	s16, s16
 5882 01ba 38EE278A 		vadd.f32	s16, s16, s15
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5883              		.loc 1 1863 66 view .LVU1539
 5884 01be DFED578A 		vldr.32	s17, .L423+12
 5885 01c2 28EE288A 		vmul.f32	s16, s16, s17
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5886              		.loc 1 1863 76 view .LVU1540
 5887 01c6 FFF7FEFF 		bl	getZrange
 5888              	.LVL537:
 5889 01ca 07EE900A 		vmov	s15, r0	@ int
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5890              		.loc 1 1863 74 view .LVU1541
 5891 01ce F8EEE77A 		vcvt.f32.s32	s15, s15
 5892 01d2 27EE888A 		vmul.f32	s16, s15, s16
1863:Core/Src/tmag5170_ex.c ****             meas_arr[1] *= ((((float) (meas_arr[1] + output[1])) / 2048) * getYrange());
 5893              		.loc 1 1863 25 view .LVU1542
 5894 01d6 D4ED007A 		vldr.32	s15, [r4]
 5895 01da 27EE888A 		vmul.f32	s16, s15, s16
 5896 01de 84ED008A 		vstr.32	s16, [r4]
1864:Core/Src/tmag5170_ex.c ****             break;
 5897              		.loc 1 1864 13 is_stmt 1 view .LVU1543
1864:Core/Src/tmag5170_ex.c ****             break;
 5898              		.loc 1 1864 48 is_stmt 0 view .LVU1544
 5899 01e2 D4ED017A 		vldr.32	s15, [r4, #4]
1864:Core/Src/tmag5170_ex.c ****             break;
 5900              		.loc 1 1864 60 view .LVU1545
 5901 01e6 BDF80230 		ldrh	r3, [sp, #2]
 5902 01ea 08EE103A 		vmov	s16, r3	@ int
1864:Core/Src/tmag5170_ex.c ****             break;
 5903              		.loc 1 1864 31 view .LVU1546
 5904 01ee B8EEC88A 		vcvt.f32.s32	s16, s16
 5905 01f2 38EE278A 		vadd.f32	s16, s16, s15
1864:Core/Src/tmag5170_ex.c ****             break;
 5906              		.loc 1 1864 66 view .LVU1547
 5907 01f6 28EE288A 		vmul.f32	s16, s16, s17
1864:Core/Src/tmag5170_ex.c ****             break;
 5908              		.loc 1 1864 76 view .LVU1548
 5909 01fa FFF7FEFF 		bl	getYrange
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 166


 5910              	.LVL538:
 5911 01fe 07EE900A 		vmov	s15, r0	@ int
1864:Core/Src/tmag5170_ex.c ****             break;
 5912              		.loc 1 1864 74 view .LVU1549
 5913 0202 F8EEE77A 		vcvt.f32.s32	s15, s15
 5914 0206 27EE888A 		vmul.f32	s16, s15, s16
1864:Core/Src/tmag5170_ex.c ****             break;
 5915              		.loc 1 1864 25 view .LVU1550
 5916 020a D4ED017A 		vldr.32	s15, [r4, #4]
 5917 020e 27EE888A 		vmul.f32	s16, s15, s16
 5918 0212 84ED018A 		vstr.32	s16, [r4, #4]
1865:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_XT :
 5919              		.loc 1 1865 13 is_stmt 1 view .LVU1551
 5920 0216 8DE7     		b	.L410
 5921              	.L418:
1867:Core/Src/tmag5170_ex.c ****             break;
 5922              		.loc 1 1867 13 view .LVU1552
1867:Core/Src/tmag5170_ex.c ****             break;
 5923              		.loc 1 1867 48 is_stmt 0 view .LVU1553
 5924 0218 D4ED007A 		vldr.32	s15, [r4]
1867:Core/Src/tmag5170_ex.c ****             break;
 5925              		.loc 1 1867 60 view .LVU1554
 5926 021c BDF80030 		ldrh	r3, [sp]
 5927 0220 08EE103A 		vmov	s16, r3	@ int
1867:Core/Src/tmag5170_ex.c ****             break;
 5928              		.loc 1 1867 31 view .LVU1555
 5929 0224 B8EEC88A 		vcvt.f32.s32	s16, s16
 5930 0228 38EE278A 		vadd.f32	s16, s16, s15
1867:Core/Src/tmag5170_ex.c ****             break;
 5931              		.loc 1 1867 66 view .LVU1556
 5932 022c DFED3B7A 		vldr.32	s15, .L423+12
 5933 0230 28EE278A 		vmul.f32	s16, s16, s15
1867:Core/Src/tmag5170_ex.c ****             break;
 5934              		.loc 1 1867 76 view .LVU1557
 5935 0234 FFF7FEFF 		bl	getXrange
 5936              	.LVL539:
 5937 0238 07EE900A 		vmov	s15, r0	@ int
1867:Core/Src/tmag5170_ex.c ****             break;
 5938              		.loc 1 1867 74 view .LVU1558
 5939 023c F8EEE77A 		vcvt.f32.s32	s15, s15
 5940 0240 27EE888A 		vmul.f32	s16, s15, s16
1867:Core/Src/tmag5170_ex.c ****             break;
 5941              		.loc 1 1867 25 view .LVU1559
 5942 0244 D4ED007A 		vldr.32	s15, [r4]
 5943 0248 27EE888A 		vmul.f32	s16, s15, s16
 5944 024c 84ED008A 		vstr.32	s16, [r4]
1868:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_YT :
 5945              		.loc 1 1868 13 is_stmt 1 view .LVU1560
 5946 0250 70E7     		b	.L410
 5947              	.L417:
1870:Core/Src/tmag5170_ex.c ****             break;
 5948              		.loc 1 1870 13 view .LVU1561
1870:Core/Src/tmag5170_ex.c ****             break;
 5949              		.loc 1 1870 48 is_stmt 0 view .LVU1562
 5950 0252 D4ED007A 		vldr.32	s15, [r4]
1870:Core/Src/tmag5170_ex.c ****             break;
 5951              		.loc 1 1870 60 view .LVU1563
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 167


 5952 0256 BDF80030 		ldrh	r3, [sp]
 5953 025a 08EE103A 		vmov	s16, r3	@ int
1870:Core/Src/tmag5170_ex.c ****             break;
 5954              		.loc 1 1870 31 view .LVU1564
 5955 025e B8EEC88A 		vcvt.f32.s32	s16, s16
 5956 0262 38EE278A 		vadd.f32	s16, s16, s15
1870:Core/Src/tmag5170_ex.c ****             break;
 5957              		.loc 1 1870 66 view .LVU1565
 5958 0266 DFED2D7A 		vldr.32	s15, .L423+12
 5959 026a 28EE278A 		vmul.f32	s16, s16, s15
1870:Core/Src/tmag5170_ex.c ****             break;
 5960              		.loc 1 1870 76 view .LVU1566
 5961 026e FFF7FEFF 		bl	getYrange
 5962              	.LVL540:
 5963 0272 07EE900A 		vmov	s15, r0	@ int
1870:Core/Src/tmag5170_ex.c ****             break;
 5964              		.loc 1 1870 74 view .LVU1567
 5965 0276 F8EEE77A 		vcvt.f32.s32	s15, s15
 5966 027a 27EE888A 		vmul.f32	s16, s15, s16
1870:Core/Src/tmag5170_ex.c ****             break;
 5967              		.loc 1 1870 25 view .LVU1568
 5968 027e D4ED007A 		vldr.32	s15, [r4]
 5969 0282 27EE888A 		vmul.f32	s16, s15, s16
 5970 0286 84ED008A 		vstr.32	s16, [r4]
1871:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_ZT :
 5971              		.loc 1 1871 13 is_stmt 1 view .LVU1569
 5972 028a 53E7     		b	.L410
 5973              	.L416:
1873:Core/Src/tmag5170_ex.c ****             break;
 5974              		.loc 1 1873 13 view .LVU1570
1873:Core/Src/tmag5170_ex.c ****             break;
 5975              		.loc 1 1873 48 is_stmt 0 view .LVU1571
 5976 028c D4ED007A 		vldr.32	s15, [r4]
1873:Core/Src/tmag5170_ex.c ****             break;
 5977              		.loc 1 1873 60 view .LVU1572
 5978 0290 BDF80030 		ldrh	r3, [sp]
 5979 0294 08EE103A 		vmov	s16, r3	@ int
1873:Core/Src/tmag5170_ex.c ****             break;
 5980              		.loc 1 1873 31 view .LVU1573
 5981 0298 B8EEC88A 		vcvt.f32.s32	s16, s16
 5982 029c 38EE278A 		vadd.f32	s16, s16, s15
1873:Core/Src/tmag5170_ex.c ****             break;
 5983              		.loc 1 1873 66 view .LVU1574
 5984 02a0 DFED1E7A 		vldr.32	s15, .L423+12
 5985 02a4 28EE278A 		vmul.f32	s16, s16, s15
1873:Core/Src/tmag5170_ex.c ****             break;
 5986              		.loc 1 1873 76 view .LVU1575
 5987 02a8 FFF7FEFF 		bl	getZrange
 5988              	.LVL541:
 5989 02ac 07EE900A 		vmov	s15, r0	@ int
1873:Core/Src/tmag5170_ex.c ****             break;
 5990              		.loc 1 1873 74 view .LVU1576
 5991 02b0 F8EEE77A 		vcvt.f32.s32	s15, s15
 5992 02b4 27EE888A 		vmul.f32	s16, s15, s16
1873:Core/Src/tmag5170_ex.c ****             break;
 5993              		.loc 1 1873 25 view .LVU1577
 5994 02b8 D4ED007A 		vldr.32	s15, [r4]
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 168


 5995 02bc 27EE888A 		vmul.f32	s16, s15, s16
 5996 02c0 84ED008A 		vstr.32	s16, [r4]
1874:Core/Src/tmag5170_ex.c ****         case DATA_TYPE_RESULTS_SpecialMode_AM :
 5997              		.loc 1 1874 13 is_stmt 1 view .LVU1578
 5998 02c4 36E7     		b	.L410
 5999              	.L414:
1876:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
 6000              		.loc 1 1876 13 view .LVU1579
1876:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
 6001              		.loc 1 1876 41 is_stmt 0 view .LVU1580
 6002 02c6 BDF80030 		ldrh	r3, [sp]
 6003 02ca 07EE903A 		vmov	s15, r3	@ int
1876:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
 6004              		.loc 1 1876 27 view .LVU1581
 6005 02ce F8EE677A 		vcvt.f32.u32	s15, s15
1876:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
 6006              		.loc 1 1876 45 view .LVU1582
 6007 02d2 B4EE007A 		vmov.f32	s14, #1.25e-1
 6008 02d6 67EE877A 		vmul.f32	s15, s15, s14
1876:Core/Src/tmag5170_ex.c ****             meas_arr[1] = (((float) output[1]) / 4096) * getMAGrange() * 4;
 6009              		.loc 1 1876 25 view .LVU1583
 6010 02da C4ED007A 		vstr.32	s15, [r4]
1877:Core/Src/tmag5170_ex.c ****             break;
 6011              		.loc 1 1877 13 is_stmt 1 view .LVU1584
1877:Core/Src/tmag5170_ex.c ****             break;
 6012              		.loc 1 1877 43 is_stmt 0 view .LVU1585
 6013 02de BDF80230 		ldrh	r3, [sp, #2]
 6014 02e2 07EE903A 		vmov	s15, r3	@ int
1877:Core/Src/tmag5170_ex.c ****             break;
 6015              		.loc 1 1877 29 view .LVU1586
 6016 02e6 F8EE677A 		vcvt.f32.u32	s15, s15
1877:Core/Src/tmag5170_ex.c ****             break;
 6017              		.loc 1 1877 48 view .LVU1587
 6018 02ea 9FED0D8A 		vldr.32	s16, .L423+16
 6019 02ee 27EE888A 		vmul.f32	s16, s15, s16
1877:Core/Src/tmag5170_ex.c ****             break;
 6020              		.loc 1 1877 58 view .LVU1588
 6021 02f2 FFF7FEFF 		bl	getMAGrange
 6022              	.LVL542:
 6023 02f6 07EE900A 		vmov	s15, r0	@ int
1877:Core/Src/tmag5170_ex.c ****             break;
 6024              		.loc 1 1877 56 view .LVU1589
 6025 02fa F8EEE77A 		vcvt.f32.s32	s15, s15
 6026 02fe 67EE887A 		vmul.f32	s15, s15, s16
1877:Core/Src/tmag5170_ex.c ****             break;
 6027              		.loc 1 1877 72 view .LVU1590
 6028 0302 B1EE007A 		vmov.f32	s14, #4.0e+0
 6029 0306 67EE877A 		vmul.f32	s15, s15, s14
1877:Core/Src/tmag5170_ex.c ****             break;
 6030              		.loc 1 1877 25 view .LVU1591
 6031 030a C4ED017A 		vstr.32	s15, [r4, #4]
1878:Core/Src/tmag5170_ex.c ****     }
 6032              		.loc 1 1878 13 is_stmt 1 view .LVU1592
1880:Core/Src/tmag5170_ex.c **** 
 6033              		.loc 1 1880 1 is_stmt 0 view .LVU1593
 6034 030e 11E7     		b	.L410
 6035              	.L424:
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 169


 6036              		.align	2
 6037              	.L423:
 6038 0310 00000000 		.word	.LANCHOR0
 6039 0314 00E48844 		.word	1149821952
 6040 0318 00007042 		.word	1114636288
 6041 031c 0000003A 		.word	973078528
 6042 0320 00008039 		.word	964689920
 6043              		.cfi_endproc
 6044              	.LFE65:
 6046              		.section	.text.csPulse,"ax",%progbits
 6047              		.align	1
 6048              		.global	csPulse
 6049              		.syntax unified
 6050              		.thumb
 6051              		.thumb_func
 6053              	csPulse:
 6054              	.LFB81:
2391:Core/Src/tmag5170_ex.c **** 
2392:Core/Src/tmag5170_ex.c **** 
2393:Core/Src/tmag5170_ex.c **** //****************************************************************************
2394:Core/Src/tmag5170_ex.c **** //! Pulse CS function
2395:Core/Src/tmag5170_ex.c **** //!
2396:Core/Src/tmag5170_ex.c **** //! This function pulses LOW on the GPIO pin connected to the CS pin of the TMAG5170
2397:Core/Src/tmag5170_ex.c **** //! for 2 us. (set pin to HIGH afterwards)
2398:Core/Src/tmag5170_ex.c **** //!
2399:Core/Src/tmag5170_ex.c **** //! Can be used to trigger conversion for TRIGGER_MODE set to 'at CS pulse'
2400:Core/Src/tmag5170_ex.c **** //****************************************************************************
2401:Core/Src/tmag5170_ex.c **** void csPulse()
2402:Core/Src/tmag5170_ex.c **** {
 6055              		.loc 1 2402 1 is_stmt 1 view -0
 6056              		.cfi_startproc
 6057              		@ args = 0, pretend = 0, frame = 0
 6058              		@ frame_needed = 0, uses_anonymous_args = 0
 6059 0000 08B5     		push	{r3, lr}
 6060              	.LCFI135:
 6061              		.cfi_def_cfa_offset 8
 6062              		.cfi_offset 3, -8
 6063              		.cfi_offset 14, -4
2403:Core/Src/tmag5170_ex.c ****     setCS(LOW);
 6064              		.loc 1 2403 5 view .LVU1595
 6065 0002 0020     		movs	r0, #0
 6066 0004 FFF7FEFF 		bl	setCS
 6067              	.LVL543:
2404:Core/Src/tmag5170_ex.c ****     delay_us(2);
 6068              		.loc 1 2404 5 view .LVU1596
 6069 0008 0220     		movs	r0, #2
 6070 000a FFF7FEFF 		bl	delay_us
 6071              	.LVL544:
2405:Core/Src/tmag5170_ex.c ****     setCS(HIGH);
 6072              		.loc 1 2405 5 view .LVU1597
 6073 000e 0120     		movs	r0, #1
 6074 0010 FFF7FEFF 		bl	setCS
 6075              	.LVL545:
2406:Core/Src/tmag5170_ex.c **** }
 6076              		.loc 1 2406 1 is_stmt 0 view .LVU1598
 6077 0014 08BD     		pop	{r3, pc}
 6078              		.cfi_endproc
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 170


 6079              	.LFE81:
 6081              		.section	.text.exitDeepSleepMode,"ax",%progbits
 6082              		.align	1
 6083              		.global	exitDeepSleepMode
 6084              		.syntax unified
 6085              		.thumb
 6086              		.thumb_func
 6088              	exitDeepSleepMode:
 6089              	.LFB25:
 809:Core/Src/tmag5170_ex.c ****     // A LOW pulse is needed on CS to exit Deep Sleep Mode (enters Configuration Mode)
 6090              		.loc 1 809 1 is_stmt 1 view -0
 6091              		.cfi_startproc
 6092              		@ args = 0, pretend = 0, frame = 0
 6093              		@ frame_needed = 0, uses_anonymous_args = 0
 6094 0000 08B5     		push	{r3, lr}
 6095              	.LCFI136:
 6096              		.cfi_def_cfa_offset 8
 6097              		.cfi_offset 3, -8
 6098              		.cfi_offset 14, -4
 811:Core/Src/tmag5170_ex.c **** 
 6099              		.loc 1 811 5 view .LVU1600
 6100 0002 FFF7FEFF 		bl	csPulse
 6101              	.LVL546:
 814:Core/Src/tmag5170_ex.c **** #else
 6102              		.loc 1 814 5 view .LVU1601
 6103 0006 4FF4FA70 		mov	r0, #500
 6104 000a FFF7FEFF 		bl	delay_us
 6105              	.LVL547:
 818:Core/Src/tmag5170_ex.c **** 
 6106              		.loc 1 818 1 is_stmt 0 view .LVU1602
 6107 000e 08BD     		pop	{r3, pc}
 6108              		.cfi_endproc
 6109              	.LFE25:
 6111              		.section	.text.resetDevice,"ax",%progbits
 6112              		.align	1
 6113              		.global	resetDevice
 6114              		.syntax unified
 6115              		.thumb
 6116              		.thumb_func
 6118              	resetDevice:
 6119              	.LFB1:
 139:Core/Src/tmag5170_ex.c ****     enterDeepSleepMode(); // Deep Sleep Mode resets the device to its default settings
 6120              		.loc 1 139 1 is_stmt 1 view -0
 6121              		.cfi_startproc
 6122              		@ args = 0, pretend = 0, frame = 0
 6123              		@ frame_needed = 0, uses_anonymous_args = 0
 6124 0000 08B5     		push	{r3, lr}
 6125              	.LCFI137:
 6126              		.cfi_def_cfa_offset 8
 6127              		.cfi_offset 3, -8
 6128              		.cfi_offset 14, -4
 140:Core/Src/tmag5170_ex.c ****     exitDeepSleepMode();
 6129              		.loc 1 140 5 view .LVU1604
 6130 0002 FFF7FEFF 		bl	enterDeepSleepMode
 6131              	.LVL548:
 141:Core/Src/tmag5170_ex.c **** }
 6132              		.loc 1 141 5 view .LVU1605
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 171


 6133 0006 FFF7FEFF 		bl	exitDeepSleepMode
 6134              	.LVL549:
 142:Core/Src/tmag5170_ex.c **** 
 6135              		.loc 1 142 1 is_stmt 0 view .LVU1606
 6136 000a 08BD     		pop	{r3, pc}
 6137              		.cfi_endproc
 6138              	.LFE1:
 6140              		.section	.text.alertPulse,"ax",%progbits
 6141              		.align	1
 6142              		.global	alertPulse
 6143              		.syntax unified
 6144              		.thumb
 6145              		.thumb_func
 6147              	alertPulse:
 6148              	.LFB82:
2407:Core/Src/tmag5170_ex.c **** 
2408:Core/Src/tmag5170_ex.c **** 
2409:Core/Src/tmag5170_ex.c **** //****************************************************************************
2410:Core/Src/tmag5170_ex.c **** //! Pulse ALERT function
2411:Core/Src/tmag5170_ex.c **** //!
2412:Core/Src/tmag5170_ex.c **** //! This function pulses LOW on the GPIO pin connected to the ALERT pin of the TMAG5170
2413:Core/Src/tmag5170_ex.c **** //! for 2 us. (set pin to HIGH afterwards)
2414:Core/Src/tmag5170_ex.c **** //!
2415:Core/Src/tmag5170_ex.c **** //! Can be used to trigger conversion for TRIGGER_MODE set to 'at ALERT pulse'
2416:Core/Src/tmag5170_ex.c **** //****************************************************************************
2417:Core/Src/tmag5170_ex.c **** void alertPulse()
2418:Core/Src/tmag5170_ex.c **** {
 6149              		.loc 1 2418 1 is_stmt 1 view -0
 6150              		.cfi_startproc
 6151              		@ args = 0, pretend = 0, frame = 0
 6152              		@ frame_needed = 0, uses_anonymous_args = 0
 6153 0000 08B5     		push	{r3, lr}
 6154              	.LCFI138:
 6155              		.cfi_def_cfa_offset 8
 6156              		.cfi_offset 3, -8
 6157              		.cfi_offset 14, -4
2419:Core/Src/tmag5170_ex.c ****     setALERT(LOW);
 6158              		.loc 1 2419 5 view .LVU1608
 6159 0002 0020     		movs	r0, #0
 6160 0004 FFF7FEFF 		bl	setALERT
 6161              	.LVL550:
2420:Core/Src/tmag5170_ex.c ****     delay_us(2);
 6162              		.loc 1 2420 5 view .LVU1609
 6163 0008 0220     		movs	r0, #2
 6164 000a FFF7FEFF 		bl	delay_us
 6165              	.LVL551:
2421:Core/Src/tmag5170_ex.c ****     setALERT(HIGH);
 6166              		.loc 1 2421 5 view .LVU1610
 6167 000e 0120     		movs	r0, #1
 6168 0010 FFF7FEFF 		bl	setALERT
 6169              	.LVL552:
2422:Core/Src/tmag5170_ex.c **** }
 6170              		.loc 1 2422 1 is_stmt 0 view .LVU1611
 6171 0014 08BD     		pop	{r3, pc}
 6172              		.cfi_endproc
 6173              	.LFE82:
 6175              		.global	atanArray32
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 172


 6176              		.global	magArray
 6177              		.section	.rodata
 6178              		.align	2
 6179              		.set	.LANCHOR7,. + 0
 6180              	.LC0:
 6181 0000 3200     		.short	50
 6182 0002 3200     		.short	50
 6183 0004 3200     		.short	50
 6184              		.section	.bss.SYSTEM_CONFIG_stored,"aw",%nobits
 6185              		.align	1
 6186              		.set	.LANCHOR0,. + 0
 6189              	SYSTEM_CONFIG_stored:
 6190 0000 0000     		.space	2
 6191              		.section	.rodata.__func__.0,"a"
 6192              		.align	2
 6193              		.set	.LANCHOR6,. + 0
 6196              	__func__.0:
 6197 0000 6E6F726D 		.ascii	"normalRead\000"
 6197      616C5265 
 6197      616400
 6198              		.section	.rodata.__func__.1,"a"
 6199              		.align	2
 6200              		.set	.LANCHOR5,. + 0
 6203              	__func__.1:
 6204 0000 77726974 		.ascii	"writeToRegisterWithSTAT\000"
 6204      65546F52 
 6204      65676973 
 6204      74657257 
 6204      69746853 
 6205              		.section	.rodata.__func__.2,"a"
 6206              		.align	2
 6207              		.set	.LANCHOR4,. + 0
 6210              	__func__.2:
 6211 0000 77726974 		.ascii	"writeToRegisterWithCMD0\000"
 6211      65546F52 
 6211      65676973 
 6211      74657257 
 6211      69746843 
 6212              		.section	.rodata.__func__.3,"a"
 6213              		.align	2
 6214              		.set	.LANCHOR3,. + 0
 6217              	__func__.3:
 6218 0000 77726974 		.ascii	"writeToRegister\000"
 6218      65546F52 
 6218      65676973 
 6218      74657200 
 6219              		.section	.rodata.atanArray32,"a"
 6220              		.align	2
 6221              		.set	.LANCHOR1,. + 0
 6224              	atanArray32:
 6225 0000 00000020 		.word	536870912
 6226 0004 1E05E412 		.word	316933406
 6227 0008 5B38FB09 		.word	167458907
 6228 000c D4111105 		.word	85004756
 6229 0010 430D8B02 		.word	42667331
 6230 0014 E1D74501 		.word	21354465
 6231 0018 1EF6A200 		.word	10679838
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 173


 6232 001c 557C5100 		.word	5340245
 6233 0020 53BE2800 		.word	2670163
 6234 0024 2F5F1400 		.word	1335087
 6235 0028 982F0A00 		.word	667544
 6236 002c CC170500 		.word	333772
 6237 0030 E68B0200 		.word	166886
 6238 0034 F3450100 		.word	83443
 6239 0038 FAA20000 		.word	41722
 6240 003c 7D510000 		.word	20861
 6241              		.section	.rodata.magArray,"a"
 6242              		.align	2
 6243              		.set	.LANCHOR2,. + 0
 6246              	magArray:
 6247 0000 9A79825A 		.word	1518500250
 6248 0004 894DF450 		.word	1358187913
 6249 0008 EA86894E 		.word	1317635818
 6250 000c 0745EE4D 		.word	1307460871
 6251 0010 066BC74D 		.word	1304914694
 6252 0014 EBB3BD4D 		.word	1304277995
 6253 0018 1A46BB4D 		.word	1304118810
 6254 001c A6AABA4D 		.word	1304079014
 6255 0020 C983BA4D 		.word	1304069065
 6256 0024 117ABA4D 		.word	1304066577
 6257 0028 A377BA4D 		.word	1304065955
 6258 002c 0877BA4D 		.word	1304065800
 6259 0030 E176BA4D 		.word	1304065761
 6260 0034 D776BA4D 		.word	1304065751
 6261 0038 D576BA4D 		.word	1304065749
 6262 003c D476BA4D 		.word	1304065748
 6263              		.text
 6264              	.Letext0:
 6265              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 6266              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 6267              		.file 4 "Core/Inc/hal.h"
 6268              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 6269              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 174


DEFINED SYMBOLS
                            *ABS*:00000000 tmag5170_ex.c
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:20     .text.getSYSTEM_CONFIG_stored:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:26     .text.getSYSTEM_CONFIG_stored:00000000 getSYSTEM_CONFIG_stored
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:42     .text.getSYSTEM_CONFIG_stored:00000008 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:47     .text.getDATA_TYPE:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:53     .text.getDATA_TYPE:00000000 getDATA_TYPE
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:71     .text.getDATA_TYPE:0000000c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:76     .text.atan2CORDIC:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:82     .text.atan2CORDIC:00000000 atan2CORDIC
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:255    .text.atan2CORDIC:0000008c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:261    .text.calcCORDIC:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:267    .text.calcCORDIC:00000000 calcCORDIC
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:359    .text.calcCORDIC:00000064 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:366    .text.planeAngles:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:372    .text.planeAngles:00000000 planeAngles
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:459    .text.convertToCylindrical:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:465    .text.convertToCylindrical:00000000 convertToCylindrical
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:525    .text.piecewiseLinearizationFloat:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:531    .text.piecewiseLinearizationFloat:00000000 piecewiseLinearizationFloat
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:624    .text.piecewiseLinearizationAngleFloat:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:630    .text.piecewiseLinearizationAngleFloat:00000000 piecewiseLinearizationAngleFloat
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:772    .text.piecewiseLinearizationAngleFloat:000000ac $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:777    .text.isqrt32:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:783    .text.isqrt32:00000000 isqrt32
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:893    .text.mag3D:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:899    .text.mag3D:00000000 mag3D
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:955    .text.convertToSpherical:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:961    .text.convertToSpherical:00000000 convertToSpherical
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1029   .text.resultRegisterTomT:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1035   .text.resultRegisterTomT:00000000 resultRegisterTomT
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1060   .text.resultRegisterTomT:00000020 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1065   .text.piecewiseLinearizationRegister:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1071   .text.piecewiseLinearizationRegister:00000000 piecewiseLinearizationRegister
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1217   .text.piecewiseLinearizationRegister:000000a4 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1222   .text.angleRegisterToDeg:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1228   .text.angleRegisterToDeg:00000000 angleRegisterToDeg
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1248   .text.angleRegisterToDeg:00000014 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1253   .text.piecewiseLinearizationAngle:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1259   .text.piecewiseLinearizationAngle:00000000 piecewiseLinearizationAngle
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1441   .text.piecewiseLinearizationAngle:000000bc $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1446   .text.calculateCRC:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1452   .text.calculateCRC:00000000 calculateCRC
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1743   .text.verifyCRC:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1749   .text.verifyCRC:00000000 verifyCRC
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1796   .text.sendAndReceiveFrame:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1802   .text.sendAndReceiveFrame:00000000 sendAndReceiveFrame
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1879   .text.sendAndReceiveFrame:0000004c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1884   .rodata.writeToRegister.str1.4:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1891   .text.writeToRegister:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1897   .text.writeToRegister:00000000 writeToRegister
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1967   .text.writeToRegister:00000038 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1974   .text.TMAG5170startup:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:1980   .text.TMAG5170startup:00000000 TMAG5170startup
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2010   .text.TMAG5170startup:00000018 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2015   .text.enterDeepSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2021   .text.enterDeepSleepMode:00000000 enterDeepSleepMode
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 175


C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2051   .text.enterDeepSleepMode:00000018 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2056   .text.magThreshSet:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2062   .text.magThreshSet:00000000 magThreshSet
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2116   .text.magThreshSet:00000028 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2121   .text.setMagOffsetIn7Bit:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2127   .text.setMagOffsetIn7Bit:00000000 setMagOffsetIn7Bit
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2183   .text.setMagGainConfigIn11Bit:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2189   .text.setMagGainConfigIn11Bit:00000000 setMagGainConfigIn11Bit
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2233   .text.setMagGainConfigInDecimal:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2239   .text.setMagGainConfigInDecimal:00000000 setMagGainConfigInDecimal
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2306   .text.setMagGainConfigInDecimal:0000004c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2311   .text.setDATATYPE:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2317   .text.setDATATYPE:00000000 setDATATYPE
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2354   .text.setDATATYPE:00000018 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2359   .text.writeToRegisterWithCMD0:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2365   .text.writeToRegisterWithCMD0:00000000 writeToRegisterWithCMD0
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2438   .text.writeToRegisterWithCMD0:00000040 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2445   .text.writeToRegisterWithSTAT:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2451   .text.writeToRegisterWithSTAT:00000000 writeToRegisterWithSTAT
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2562   .text.writeToRegisterWithSTAT:00000070 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2570   .text.normalRead:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2576   .text.normalRead:00000000 normalRead
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2670   .text.normalRead:00000058 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2677   .text.normalReadRegister:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2683   .text.normalReadRegister:00000000 normalReadRegister
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2721   .text.enterConfigurationMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2727   .text.enterConfigurationMode:00000000 enterConfigurationMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2773   .text.enterConfigurationMode:0000002c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2778   .text.enterStandbyMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2784   .text.enterStandbyMode:00000000 enterStandbyMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2834   .text.enterStandbyMode:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2839   .text.enterActiveMeasureMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2845   .text.enterActiveMeasureMode:00000000 enterActiveMeasureMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2895   .text.enterActiveMeasureMode:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2900   .text.enterActiveTriggerMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2906   .text.enterActiveTriggerMode:00000000 enterActiveTriggerMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2956   .text.enterActiveTriggerMode:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2961   .text.enterSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:2967   .text.enterSleepMode:00000000 enterSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3017   .text.enterSleepMode:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3022   .text.enterWakeUpAndSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3028   .text.enterWakeUpAndSleepMode:00000000 enterWakeUpAndSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3078   .text.enterWakeUpAndSleepMode:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3083   .text.setSLEEPTIME:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3089   .text.setSLEEPTIME:00000000 setSLEEPTIME
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3158   .text.setSLEEPTIME:00000034 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3163   .text.setWakeUpAndSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3169   .text.setWakeUpAndSleepMode:00000000 setWakeUpAndSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3194   .text.exitSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3200   .text.exitSleepMode:00000000 exitSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3246   .text.exitSleepMode:0000002c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3251   .text.exitWakeAndSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3257   .text.exitWakeAndSleepMode:00000000 exitWakeAndSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3303   .text.exitWakeAndSleepMode:0000002c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3308   .text.spiTriggersConversion:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3314   .text.spiTriggersConversion:00000000 spiTriggersConversion
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3358   .text.spiTriggersConversion:00000024 $d
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 176


C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3363   .text.csTriggersConversion:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3369   .text.csTriggersConversion:00000000 csTriggersConversion
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3417   .text.csTriggersConversion:00000028 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3422   .text.alertTriggersConversion:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3428   .text.alertTriggersConversion:00000000 alertTriggersConversion
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3492   .text.alertTriggersConversion:0000003c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3497   .text.alertIndicatesConversionEnable:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3503   .text.alertIndicatesConversionEnable:00000000 alertIndicatesConversionEnable
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3552   .text.alertIndicatesConversionEnable:00000028 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3557   .text.alertIndicatesConversionDisable:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3563   .text.alertIndicatesConversionDisable:00000000 alertIndicatesConversionDisable
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3607   .text.alertIndicatesConversionDisable:00000024 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3612   .text.setMagSwitch:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3618   .text.setMagSwitch:00000000 setMagSwitch
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3748   .text.setMagSwitch:00000070 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3753   .text.disableMagSwitch:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3759   .text.disableMagSwitch:00000000 disableMagSwitch
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3792   .text.enableMagChannels:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3798   .text.enableMagChannels:00000000 enableMagChannels
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3867   .text.enableMagChannels:00000034 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3872   .text.enableAngleMeasurement:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3878   .text.enableAngleMeasurement:00000000 enableAngleMeasurement
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3946   .text.enableAngleMeasurement:00000030 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3951   .text.enableTemperatureMeasurement:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3957   .text.enableTemperatureMeasurement:00000000 enableTemperatureMeasurement
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:3994   .text.disableTemperatureMeasurement:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4000   .text.disableTemperatureMeasurement:00000000 disableTemperatureMeasurement
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4032   .text.setSampleRate:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4038   .text.setSampleRate:00000000 setSampleRate
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4080   .text.setRanges:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4086   .text.setRanges:00000000 setRanges
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4161   .text.setRanges:00000040 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4166   .text.getXresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4172   .text.getXresult:00000000 getXresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4194   .text.getYresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4200   .text.getYresult:00000000 getYresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4222   .text.getZresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4228   .text.getZresult:00000000 getZresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4250   .text.getMagResultsRegistersNrml:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4256   .text.getMagResultsRegistersNrml:00000000 getMagResultsRegistersNrml
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4295   .text.getTEMPresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4301   .text.getTEMPresult:00000000 getTEMPresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4323   .text.getMeasurementNrmlTEMP:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4329   .text.getMeasurementNrmlTEMP:00000000 getMeasurementNrmlTEMP
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4367   .text.getMeasurementNrmlTEMP:00000028 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4373   .text.getANGLEresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4379   .text.getANGLEresult:00000000 getANGLEresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4401   .text.getMeasurementNrmlANGLE:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4407   .text.getMeasurementNrmlANGLE:00000000 getMeasurementNrmlANGLE
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4438   .text.getMeasurementNrmlANGLE:00000018 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4443   .text.getMAGresult:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4449   .text.getMAGresult:00000000 getMAGresult
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4471   .text.getVersion:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4477   .text.getVersion:00000000 getVersion
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4500   .text.getXrange:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4506   .text.getXrange:00000000 getXrange
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4585   .text.getMeasurementNrmlX:00000000 $t
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 177


C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4591   .text.getMeasurementNrmlX:00000000 getMeasurementNrmlX
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4645   .text.getMeasurementNrmlX:00000034 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4650   .text.getYrange:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4656   .text.getYrange:00000000 getYrange
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4735   .text.getMeasurementNrmlY:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4741   .text.getMeasurementNrmlY:00000000 getMeasurementNrmlY
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4795   .text.getMeasurementNrmlY:00000034 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4800   .text.getMAGrange:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4806   .text.getMAGrange:00000000 getMAGrange
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4848   .text.getMeasurementNrmlMAG:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4854   .text.getMeasurementNrmlMAG:00000000 getMeasurementNrmlMAG
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4906   .text.getMeasurementNrmlMAG:00000038 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4911   .text.getZrange:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4917   .text.getZrange:00000000 getZrange
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:4996   .text.getMeasurementNrmlZ:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5002   .text.getMeasurementNrmlZ:00000000 getMeasurementNrmlZ
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5056   .text.getMeasurementNrmlZ:00000034 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5062   .text.setMagOffsetInmT:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5068   .text.setMagOffsetInmT:00000000 setMagOffsetInmT
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5224   .text.setMagOffsetInmT:000000b8 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5229   .text.getMagMeasurementsNrml:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5235   .text.getMagMeasurementsNrml:00000000 getMagMeasurementsNrml
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5342   .text.getMagMeasurementsNrml:00000074 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5348   .text.isCRCenabled:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5354   .text.isCRCenabled:00000000 isCRCenabled
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5380   .text.normalReadRegisterWithCMD0:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5386   .text.normalReadRegisterWithCMD0:00000000 normalReadRegisterWithCMD0
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5425   .text.normalReadSTAT:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5431   .text.normalReadSTAT:00000000 normalReadSTAT
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5475   .text.specialRead:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5481   .text.specialRead:00000000 specialRead
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5590   .text.specialReadSTAT:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5596   .text.specialReadSTAT:00000000 specialReadSTAT
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5631   .text.getMeasurementsSpcl:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5637   .text.getMeasurementsSpcl:00000000 getMeasurementsSpcl
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5716   .text.getMeasurementsSpcl:0000006c $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:5723   .text.getMeasurementsSpcl:0000007a $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6038   .text.getMeasurementsSpcl:00000310 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6047   .text.csPulse:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6053   .text.csPulse:00000000 csPulse
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6082   .text.exitDeepSleepMode:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6088   .text.exitDeepSleepMode:00000000 exitDeepSleepMode
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6112   .text.resetDevice:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6118   .text.resetDevice:00000000 resetDevice
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6141   .text.alertPulse:00000000 $t
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6147   .text.alertPulse:00000000 alertPulse
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6224   .rodata.atanArray32:00000000 atanArray32
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6246   .rodata.magArray:00000000 magArray
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6178   .rodata:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6185   .bss.SYSTEM_CONFIG_stored:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6189   .bss.SYSTEM_CONFIG_stored:00000000 SYSTEM_CONFIG_stored
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6192   .rodata.__func__.0:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6196   .rodata.__func__.0:00000000 __func__.0
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6199   .rodata.__func__.1:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6203   .rodata.__func__.1:00000000 __func__.1
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6206   .rodata.__func__.2:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6210   .rodata.__func__.2:00000000 __func__.2
ARM GAS  C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s 			page 178


C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6213   .rodata.__func__.3:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6217   .rodata.__func__.3:00000000 __func__.3
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6220   .rodata.atanArray32:00000000 $d
C:\Users\jakub\AppData\Local\Temp\cc5FfkfH.s:6242   .rodata.magArray:00000000 $d

UNDEFINED SYMBOLS
spiSendReceiveArrays
__assert_func
delay_ms
delay_us
__aeabi_f2d
__aeabi_d2uiz
floor
__aeabi_d2iz
round
setCS
setALERT
